D G "EXAMPLE_TCP_PORT" 0 40 " (int16)7654"
D G "__PCH__" 0 113 ""5.025""
D G "__DEVICE__" 0 113 "4680"
D G "__DATE__" 0 113 ""01-abr.-22""
D G "__TIME__" 0 113 ""11:37:45"" "2019/01/23 Se cambio la razon social"
c L "set_tris_a" 2 1 6 "FUNCTION"
v L "value" 2 43 "int8" `54 
f B "set_tris_a" 2 43 "void(int8 value)" `53 
v L "value" 2 44 "int8" `56 
f B "set_tris_b" 2 44 "void(int8 value)" `55 
v L "value" 2 45 "int8" `58 
f B "set_tris_c" 2 45 "void(int8 value)" `57 
v L "value" 2 46 "int8" `60 
f B "set_tris_d" 2 46 "void(int8 value)" `59 
v L "value" 2 47 "int8" `62 
f B "set_tris_e" 2 47 "void(int8 value)" `61 
f B "get_tris_a" 2 48 "int8()" `63 
f B "get_tris_b" 2 49 "int8()" `64 
f B "get_tris_c" 2 50 "int8()" `65 
f B "get_tris_d" 2 51 "int8()" `66 
f B "get_tris_e" 2 52 "int8()" `67 
v L "value" 2 53 "int8" `69 
f B "output_a" 2 53 "void(int8 value)" `68 
v L "value" 2 54 "int8" `71 
f B "output_b" 2 54 "void(int8 value)" `70 
v L "value" 2 55 "int8" `73 
f B "output_c" 2 55 "void(int8 value)" `72 
v L "value" 2 56 "int8" `75 
f B "output_d" 2 56 "void(int8 value)" `74 
v L "value" 2 57 "int8" `77 
f B "output_e" 2 57 "void(int8 value)" `76 
f B "input_a" 2 58 "int8()" `78 
f B "input_b" 2 59 "int8()" `79 
f B "input_c" 2 60 "int8()" `80 
f B "input_d" 2 61 "int8()" `81 
f B "input_e" 2 62 "int8()" `82 
f B "input_change_a" 2 63 "int8()" `83 
f B "input_change_b" 2 64 "int8()" `84 
f B "input_change_c" 2 65 "int8()" `85 
f B "input_change_d" 2 66 "int8()" `86 
f B "input_change_e" 2 67 "int8()" `87 
v L "pin" 2 68 "int16" `89 
f B "input" 2 68 "int8(int16 pin)" `88 
v L "pin" 2 69 "int16" `91 
f B "input_state" 2 69 "int8(int16 pin)" `90 
v L "pin" 2 70 "int16" `93 
f B "output_low" 2 70 "void(int16 pin)" `92 
v L "pin" 2 71 "int16" `95 
f B "output_high" 2 71 "void(int16 pin)" `94 
v L "pin" 2 72 "int16" `97 
f B "output_toggle" 2 72 "void(int16 pin)" `96 
v L "pin" 2 73 "int16" `99 
v L "level" 2 73 "int8" `100 
f B "output_bit" 2 73 "void(int16 pin,int8 level)" `98 
v L "pin" 2 74 "int16" `102 
f B "output_float" 2 74 "void(int16 pin)" `101 
v L "pin" 2 75 "int16" `104 
f B "output_drive" 2 75 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 79 "31744"
d G "PIN_A1" 2 80 "31745"
d G "PIN_A2" 2 81 "31746"
d G "PIN_A3" 2 82 "31747"
d G "PIN_A4" 2 83 "31748"
d G "PIN_A5" 2 84 "31749"
d G "PIN_A6" 2 85 "31750"
d G "PIN_A7" 2 86 "31751"
d G "PIN_B0" 2 88 "31752"
d G "PIN_B1" 2 89 "31753"
d G "PIN_B2" 2 90 "31754"
d G "PIN_B3" 2 91 "31755"
d G "PIN_B4" 2 92 "31756"
d G "PIN_B5" 2 93 "31757"
d G "PIN_B6" 2 94 "31758"
d G "PIN_B7" 2 95 "31759"
d G "PIN_C0" 2 97 "31760"
d G "PIN_C1" 2 98 "31761"
d G "PIN_C2" 2 99 "31762"
d G "PIN_C3" 2 100 "31763"
d G "PIN_C4" 2 101 "31764"
d G "PIN_C5" 2 102 "31765"
d G "PIN_C6" 2 103 "31766"
d G "PIN_C7" 2 104 "31767"
d G "PIN_D0" 2 106 "31768"
d G "PIN_D1" 2 107 "31769"
d G "PIN_D2" 2 108 "31770"
d G "PIN_D3" 2 109 "31771"
d G "PIN_D4" 2 110 "31772"
d G "PIN_D5" 2 111 "31773"
d G "PIN_D6" 2 112 "31774"
d G "PIN_D7" 2 113 "31775"
d G "PIN_E0" 2 115 "31776"
d G "PIN_E1" 2 116 "31777"
d G "PIN_E2" 2 117 "31778"
d G "PIN_E3" 2 118 "31779"
d G "FALSE" 2 121 "0"
d G "TRUE" 2 122 "1"
d G "BYTE" 2 124 "int8"
d G "BOOLEAN" 2 125 "int1"
d G "getc" 2 127 "getch"
d G "fgetc" 2 128 "getch"
d G "getchar" 2 129 "getch"
d G "putc" 2 130 "putchar"
d G "fputc" 2 131 "putchar"
d G "fgets" 2 132 "gets"
d G "fputs" 2 133 "puts"
c L "output_drive" 2 1 3 "FUNCTION"
f B "restart_cause" 2 138 "int8()" `105 
f B "reset_cpu" 2 139 "void()" `106 
f B "sleep" 2 140 "void()" `107 
v L "type" 2 141 "int8" `109 
f G "sleep" 2 141 "void(int8 type)" `108  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 143 "7"
d G "MCLR_FROM_SLEEP" 2 144 "11"
d G "MCLR_FROM_RUN" 2 145 "15"
d G "NORMAL_POWER_UP" 2 146 "12"
d G "BROWNOUT_RESTART" 2 147 "14"
d G "WDT_FROM_SLEEP" 2 148 "3"
d G "RESET_INSTRUCTION" 2 149 "0"
d G "SLEEP_FULL" 2 152 "0" "Default"
d G "SLEEP_IDLE" 2 153 "1" "Clock and peripherals don't stop"
c L "sleep" 2 1 5 "FUNCTION"
v L "mode" 2 160 "int8" `111 
f B "setup_timer_0" 2 160 "void(int8 mode)" `110 
v L "value" 2 161 "int16" `113 
f B "set_timer0" 2 161 "void(int16 value)" `112 
f B "get_timer0" 2 162 "int16()" `114 
v L "mode" 2 163 "int8" `116 
v L "prescaler" 2 163 "int8" `117 
f B "setup_counters" 2 163 "void(int8 mode,int8 prescaler)" `115 
v L "value" 2 164 "int16" `119 
f B "set_rtcc" 2 164 "void(int16 value)" `118 
f B "get_rtcc" 2 165 "int16()" `120  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 167 "0"
d G "T0_EXT_L_TO_H" 2 168 "32"
d G "T0_EXT_H_TO_L" 2 169 "48"
d G "T0_DIV_1" 2 171 "8"
d G "T0_DIV_2" 2 172 "0"
d G "T0_DIV_4" 2 173 "1"
d G "T0_DIV_8" 2 174 "2"
d G "T0_DIV_16" 2 175 "3"
d G "T0_DIV_32" 2 176 "4"
d G "T0_DIV_64" 2 177 "5"
d G "T0_DIV_128" 2 178 "6"
d G "T0_DIV_256" 2 179 "7"
d G "T0_OFF" 2 181 "0x80"
d G "T0_8_BIT" 2 183 "0x40"
d G "RTCC_INTERNAL" 2 185 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 186 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 187 "48"
d G "RTCC_DIV_1" 2 188 "8"
d G "RTCC_DIV_2" 2 189 "0"
d G "RTCC_DIV_4" 2 190 "1"
d G "RTCC_DIV_8" 2 191 "2"
d G "RTCC_DIV_16" 2 192 "3"
d G "RTCC_DIV_32" 2 193 "4"
d G "RTCC_DIV_64" 2 194 "5"
d G "RTCC_DIV_128" 2 195 "6"
d G "RTCC_DIV_256" 2 196 "7"
d G "RTCC_OFF" 2 197 "0x80"
d G "RTCC_8_BIT" 2 198 "0x40"
c L "get_rtcc" 2 1 8 "FUNCTION"
v L "mode" 2 209 "int16" `122 
f B "setup_wdt" 2 209 "void(int16 mode)" `121 
f B "restart_wdt" 2 210 "void()" `123  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 212 "0x100"
d G "WDT_OFF" 2 213 "0"
d G "WDT_4MS" 2 215 "0x300"
d G "WDT_8MS" 2 216 "0x500"
d G "WDT_16MS" 2 217 "0x700"
d G "WDT_32MS" 2 218 "0x900"
d G "WDT_64MS" 2 219 "0xB00"
d G "WDT_128MS" 2 220 "0xD00"
d G "WDT_256MS" 2 221 "0xF00"
d G "WDT_512MS" 2 222 "0x1100"
d G "WDT_1S" 2 223 "0x1300"
d G "WDT_2S" 2 224 "0x1500"
d G "WDT_4S" 2 225 "0x1700"
d G "WDT_8S" 2 226 "0x1900"
d G "WDT_16" 2 227 "0x1B00"
d G "WDT_32S" 2 228 "0x1D00"
d G "WDT_64S" 2 229 "0x1F00"
d G "WDT_128S" 2 230 "0x2100"
c L "restart_wdt" 2 1 3 "FUNCTION"
v L "mode" 2 235 "int16" `125 
f B "setup_timer_1" 2 235 "void(int16 mode)" `124 
f B "get_timer1" 2 236 "int16()" `126 
v L "value" 2 237 "int16" `128 
f B "set_timer1" 2 237 "void(int16 value)" `127  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 240 "0"
d G "T1_INTERNAL" 2 241 "0x85"
d G "T1_EXTERNAL" 2 242 "0x87"
d G "T1_EXTERNAL_SYNC" 2 243 "0x83"
d G "T1_CLK_OUT" 2 245 "8"
d G "T1_DIV_BY_1" 2 247 "0"
d G "T1_DIV_BY_2" 2 248 "0x10"
d G "T1_DIV_BY_4" 2 249 "0x20"
d G "T1_DIV_BY_8" 2 250 "0x30"
c L "set_timer1" 2 1 3 "FUNCTION"
v L "mode" 2 255 "int8" `130 
v L "period" 2 255 "int8" `131 
v L "postscale" 2 255 "int8" `132 
f B "setup_timer_2" 2 255 "void(int8 mode,int8 period,int8 postscale)" `129 
f B "get_timer2" 2 256 "int8()" `133 
v L "value" 2 257 "int8" `135 
f B "set_timer2" 2 257 "void(int8 value)" `134  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 259 "0"
d G "T2_DIV_BY_1" 2 260 "4"
d G "T2_DIV_BY_4" 2 261 "5"
d G "T2_DIV_BY_16" 2 262 "6"
c L "set_timer2" 2 1 3 "FUNCTION"
v L "mode" 2 267 "int16" `137 
f B "setup_timer_3" 2 267 "void(int16 mode)" `136 
f B "get_timer3" 2 268 "int16()" `138 
v L "value" 2 269 "int16" `140 
f B "set_timer3" 2 269 "void(int16 value)" `139  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 272 "0"
d G "T3_INTERNAL" 2 273 "0x85"
d G "T3_EXTERNAL" 2 274 "0x87"
d G "T3_EXTERNAL_SYNC" 2 275 "0x83"
d G "T3_DIV_BY_1" 2 277 "0"
d G "T3_DIV_BY_2" 2 278 "0x10"
d G "T3_DIV_BY_4" 2 279 "0x20"
d G "T3_DIV_BY_8" 2 280 "0x30"
c L "set_timer3" 2 1 4 "FUNCTION"
v L "mode" 2 286 "int32" `142 
f B "setup_ccp1" 2 286 "void(int32 mode)" `141 
v L "mode" 2 287 "int32" `144 
v L "pwm" 2 287 "int8" `145 
f G "setup_ccp1" 2 287 "void(int32 mode,int8 pwm)" `143 
v L "value" 2 288 "int16" `147 
f B "set_pwm1_duty" 2 288 "void(int16 value)" `146  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 290 "0"
d G "CCP_CAPTURE_FE" 2 291 "0x04"
d G "CCP_CAPTURE_RE" 2 292 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 293 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 294 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 295 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 296 "0x09"
d G "CCP_COMPARE_INT" 2 297 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 298 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 299 "0x0B"
d G "CCP_PWM" 2 300 "0x0C"
d G "CCP_PWM_PLUS_1" 2 301 "0x1c"
d G "CCP_PWM_PLUS_2" 2 302 "0x2c"
d G "CCP_PWM_PLUS_3" 2 303 "0x3c"
c L "set_pwm1_duty" 2 1 1 "FUNCTION"
d G "T3_CCP1_TO_2" 2 310 "0x48"
d G "T3_CCP2" 2 311 "0x8"
d G "CCP_PWM_H_H" 2 314 "0x0c"
d G "CCP_PWM_H_L" 2 315 "0x0d"
d G "CCP_PWM_L_H" 2 316 "0x0e"
d G "CCP_PWM_L_L" 2 317 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 319 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 320 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 321 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 323 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 324 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 325 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 326 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 327 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 328 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 329 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 331 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 332 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 333 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 335 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 336 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 337 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 339 "0x80000000"
c L "set_pwm1_duty" 2 1 1 "FUNCTION"
v L "mode" 2 343 "int32" `152 
f B "setup_ccp2" 2 343 "void(int32 mode)" `151 
v L "mode" 2 344 "int32" `154 
v L "pwm" 2 344 "int8" `155 
f G "setup_ccp2" 2 344 "void(int32 mode,int8 pwm)" `153 
v L "value" 2 345 "int16" `157 
f B "set_pwm2_duty" 2 345 "void(int16 value)" `156 
c L "set_pwm2_duty" 2 1 5 "FUNCTION"
v L "mode" 2 354 "int8" `162 
f B "setup_psp" 2 354 "void(int8 mode)" `161 
f B "psp_output_full" 2 355 "int8()" `163 
f B "psp_input_full" 2 356 "int8()" `164 
f B "psp_overflow" 2 357 "int8()" `165  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 2 359 "0x10"
d G "PSP_DISABLED" 2 360 "0"
c L "psp_overflow" 2 1 3 "FUNCTION"
v L "mode" 2 367 "int32" `168 
f B "setup_spi" 2 367 "void(int32 mode)" `167 
v L "value" 2 368 "int8" `170 
f B "spi_write" 2 368 "void(int8 value)" `169 
f B "spi_read" 2 369 "int8()" `171 
v L "value" 2 370 "int8" `173 
f G "spi_read" 2 370 "int8(int8 value)" `172 
f B "spi_data_in" 2 371 "int8()" `174 
v L "mode" 2 372 "int32" `176 
f B "setup_spi2" 2 372 "void(int32 mode)" `175 
v L "value" 2 373 "int8" `178 
f B "spi_write2" 2 373 "void(int8 value)" `177 
f B "spi_read2" 2 374 "int8()" `179 
v L "value" 2 375 "int8" `181 
f G "spi_read2" 2 375 "int8(int8 value)" `180 
f B "spi_data_in2" 2 376 "int8()" `182  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 378 "0x00"
d G "SPI_MASTER" 2 379 "0x20"
d G "SPI_SLAVE" 2 380 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 381 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 382 "0x00"
d G "SPI_CLK_DIV_4" 2 383 "0x00"
d G "SPI_CLK_DIV_16" 2 384 "0x01"
d G "SPI_CLK_DIV_64" 2 385 "0x02"
d G "SPI_CLK_T2" 2 386 "0x03"
d G "SPI_SS_DISABLED" 2 387 "0x01"
d G "SPI_XMIT_L_TO_H" 2 389 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 390 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 392 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 393 "0x8000"
d G "SPI_L_TO_H" 2 396 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 397 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 1 2 "FUNCTION"
v L "baud" 2 401 "int32" `184 
f B "setup_uart" 2 401 "void(int32 baud)" `183 
v L "baud" 2 402 "int32" `186 
v L "stream" 2 402 "int8" `187 
f G "setup_uart" 2 402 "void(int32 baud,int8 stream)" `185 
v L "baud" 2 403 "int32" `189 
v L "stream" 2 403 "int8" `190 
v L "clock" 2 403 "int32" `191 
f G "setup_uart" 2 403 "void(int32 baud,int8 stream,int32 clock)" `188 
v L "baud" 2 404 "int32" `193 
f B "set_uart_speed" 2 404 "void(int32 baud)" `192 
v L "baud" 2 405 "int32" `195 
v L "stream" 2 405 "int8" `196 
f G "set_uart_speed" 2 405 "void(int32 baud,int8 stream)" `194 
v L "baud" 2 406 "int32" `198 
v L "stream" 2 406 "int8" `199 
v L "clock" 2 406 "int32" `200 
f G "set_uart_speed" 2 406 "void(int32 baud,int8 stream,int32 clock)" `197  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 410 "2"
d G "UART_DATA" 2 411 "4"
d G "UART_AUTODETECT" 2 412 "8"
d G "UART_AUTODETECT_NOWAIT" 2 413 "9"
d G "UART_WAKEUP_ON_RDA" 2 414 "10"
d G "UART_SEND_BREAK" 2 415 "13"
c L "set_uart_speed" 2 1 3 "FUNCTION"
v L "mode" 2 419 "int32" `202 
f B "setup_comparator" 2 419 "void(int32 mode)" `201  "Constants used in setup_comparator() are:"
d G "D1_D0_D3_D0" 2 421 "0x0Bff04"
d G "D1_D0_D3_D2_OUT_ON_E1_E2" 2 422 "0x0FF903"
d G "D1_D0_D3_D0_OUT_ON_E1_E2" 2 423 "0x0BF905"
d G "NC_NC_NC_NC" 2 424 "0x00ff07"
d G "D1_D0_D3_D2" 2 425 "0x0Fff02"
d G "D1_D0_NC_NC_OUT_ON_E1" 2 426 "0x03FD01"
d G "D1_VR_D3_VR" 2 427 "0x0Aff06"
d G "D0_VR_D2_VR" 2 428 "0x05ff0e"
d G "CP1_INVERT" 2 429 "0x0000010"
d G "CP2_INVERT" 2 430 "0x0000020"
c L "setup_comparator" 2 1 2 "FUNCTION"
v L "mode" 2 437 "int8" `206 
f B "setup_vref" 2 437 "void(int8 mode)" `205  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 439 "0xa0"
d G "VREF_HIGH" 2 440 "0x80"
d G "VREF_F5" 2 442 "0x40"
d G "VREF_COMP" 2 443 "0x10"
c L "setup_vref" 2 1 2 "FUNCTION"
v L "mode" 2 447 "int8" `208 
f B "setup_low_volt_detect" 2 447 "void(int8 mode)" `207  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 449 "0x1F"
d G "LVD_45" 2 450 "0x1E"
d G "LVD_42" 2 451 "0x1D"
d G "LVD_40" 2 452 "0x1C"
d G "LVD_38" 2 453 "0x1B"
d G "LVD_36" 2 454 "0x1A"
d G "LVD_35" 2 455 "0x19"
d G "LVD_33" 2 456 "0x18"
d G "LVD_30" 2 457 "0x17"
d G "LVD_28" 2 458 "0x16"
d G "LVD_27" 2 459 "0x15"
d G "LVD_25" 2 460 "0x14"
d G "LVD_24" 2 461 "0x13"
d G "LVD_23" 2 462 "0x12"
d G "LVD_22" 2 463 "0x11"
d G "LVD_21" 2 464 "0x10"
d G "LVD_TRIGGER_BELOW" 2 466 "0"
d G "LVD_TRIGGER_ABOVE" 2 467 "0x80"
c L "setup_low_volt_detect" 2 1 2 "FUNCTION"
v L "mode" 2 472 "int8" `210 
f B "setup_oscillator" 2 472 "int8(int8 mode)" `209 
v L "mode" 2 473 "int8" `212 
v L "tune" 2 473 "sint8" `213 
f G "setup_oscillator" 2 473 "int8(int8 mode,sint8 tune)" `211  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 476 "0"
d G "OSC_125KHZ" 2 477 "0x10"
d G "OSC_250KHZ" 2 478 "0x20"
d G "OSC_500KHZ" 2 479 "0x30"
d G "OSC_1MHZ" 2 480 "0x40"
d G "OSC_2MHZ" 2 481 "0x50"
d G "OSC_4MHZ" 2 482 "0x60"
d G "OSC_8MHZ" 2 483 "0x70"
d G "OSC_16MHZ" 2 484 "0x4060"
d G "OSC_32MHZ" 2 485 "0x4070"
d G "OSC_TIMER1" 2 487 "1"
d G "OSC_INTRC" 2 488 "2"
d G "OSC_NORMAL" 2 489 "0"
d G "OSC_IDLE_MODE" 2 491 "0x80"
d G "OSC_31250" 2 492 "0x8000"
d G "OSC_PLL_ON" 2 493 "0x4000"
d G "OSC_PLL_OFF" 2 494 "0"
d G "OSC_STATE_STABLE" 2 498 "4"
d G "OSC_STATE_EXT_RUNNING" 2 499 "8"
c L "setup_oscillator" 2 1 4 "FUNCTION"
v L "mode" 2 506 "int16" `215 
f B "setup_adc" 2 506 "void(int16 mode)" `214 
f B "read_adc" 2 507 "int8()" `216 
v L "mode" 2 508 "int8" `218 
f G "read_adc" 2 508 "int8(int8 mode)" `217 
f G "read_adc" 2 509 "int16()" `219 
v L "mode" 2 510 "int8" `221 
f G "read_adc" 2 510 "int16(int8 mode)" `220 
f B "adc_done" 2 511 "int8()" `222  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 513 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 514 "0x100"
d G "ADC_CLOCK_DIV_4" 2 515 "0x04"
d G "ADC_CLOCK_DIV_8" 2 516 "0x01"
d G "ADC_CLOCK_DIV_16" 2 517 "0x05"
d G "ADC_CLOCK_DIV_32" 2 518 "0x02"
d G "ADC_CLOCK_DIV_64" 2 519 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 520 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 522 "0x00"
d G "ADC_TAD_MUL_2" 2 523 "0x08"
d G "ADC_TAD_MUL_4" 2 524 "0x10"
d G "ADC_TAD_MUL_6" 2 525 "0x18"
d G "ADC_TAD_MUL_8" 2 526 "0x20"
d G "ADC_TAD_MUL_12" 2 527 "0x28"
d G "ADC_TAD_MUL_16" 2 528 "0x30"
d G "ADC_TAD_MUL_20" 2 529 "0x38"
c L "adc_done" 2 1 1 "FUNCTION"
v L "pins" 2 532 "int8" `224 
f B "setup_adc_ports" 2 532 "void(int8 pins)" `223 
v L "pins" 2 533 "int8" `226 
v L "reference" 2 533 "int8" `227 
f G "setup_adc_ports" 2 533 "void(int8 pins,int8 reference)" `225 
v L "channel" 2 534 "int8" `229 
f B "set_adc_channel" 2 534 "void(int8 channel)" `228  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 2 537 "0x0F" "None"
d G "ALL_ANALOG" 2 538 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B1 B4 B0"
d G "AN0_TO_AN9" 2 539 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B1 B4"
d G "AN0_TO_AN8" 2 540 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B1"
d G "AN0_TO_AN7" 2 541 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 2 542 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 2 543 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 2 544 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 2 545 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 2 546 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 2 547 "0x0D" "A0 A1"
d G "AN0" 2 548 "0x0E" "A0"
d G "AN0_TO_AN12_ANALOG" 2 549 "0x02" "!old only provided for compatibility"
d G "AN0_TO_AN11_ANALOG" 2 550 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 2 551 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 2 552 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 2 553 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 2 554 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 2 555 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 2 556 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 2 557 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 2 558 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 2 561 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 2 562 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 2 563 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 2 564 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 2 567 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 568 "1"
d G "ADC_READ_ONLY" 2 569 "6"
c L "set_adc_channel" 2 1 3 "FUNCTION"
v L "x" 2 575 "sint8" `231 
f B "abs" 2 575 "sint8(sint8 x)" `230 
v L "x" 2 576 "sint16" `233 
f G "abs" 2 576 "sint16(sint16 x)" `232 
v L "x" 2 577 "sint32" `235 
f G "abs" 2 577 "sint32(sint32 x)" `234 
v L "x" 2 578 "float" `237 
f G "abs" 2 578 "float(float x)" `236 
v L "??65535" 2 579 "int8" `239 
v L "??65535" 2 579 "int8" `240 
f B "_mul" 2 579 "int16(int8 ,int8 )" `238 
v L "??65535" 2 580 "sint8" `239 
v L "??65535" 2 580 "sint8" `243 
f G "_mul" 2 580 "sint16(sint8 ,sint8 )" `241 
v L "??65535" 2 581 "int16" `239 
v L "??65535" 2 581 "int16" `246 
f G "_mul" 2 581 "int32(int16 ,int16 )" `244 
v L "??65535" 2 582 "sint16" `239 
v L "??65535" 2 582 "sint16" `249 
f G "_mul" 2 582 "sint32(sint16 ,sint16 )" `247  "Memory Manipulation Prototypes:"
v L "bank" 2 585 "int8" `251 
v L "offset" 2 585 "int8" `252 
f B "read_bank" 2 585 "int8(int8 bank,int8 offset)" `250 
v L "bank" 2 586 "int8" `254 
v L "offset" 2 586 "int8" `255 
v L "value" 2 586 "int8" `256 
f B "write_bank" 2 586 "void(int8 bank,int8 offset,int8 value)" `253 
v L "dest" 2 587 "*int8" `258 
v L "src" 2 587 "*int8" `259 
f B "strcpy" 2 587 "void(*int8 dest,*int8 src)" `257 
v L "dest" 2 588 "*int8" `261 
v L "src" 2 588 "*int8" `262 
f B "strcopy" 2 588 "void(*int8 dest,*int8 src)" `260 
v L "destination" 2 589 "*int8" `264 
v L "value" 2 589 "int8" `265 
v L "num" 2 589 "int16" `266 
f B "memset" 2 589 "void(*int8 destination,int8 value,int16 num)" `263 
v L "destination" 2 590 "*int8" `268 
v L "source" 2 590 "*int8" `269 
v L "num" 2 590 "int16" `270 
f B "memcpy" 2 590 "void(*int8 destination,*int8 source,int16 num)" `267  "String Prototypes:"
v L "cvalue" 2 593 "int8" `272 
f B "toupper" 2 593 "int8(int8 cvalue)" `271 
v L "cvalue" 2 594 "int8" `274 
f B "tolower" 2 594 "int8(int8 cvalue)" `273 
v L "string" 2 595 "*int8" `276 
v L "cstring" 2 595 "*int8" `277 
f B "sprintf" 2 595 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `275  "Data Manipulators Prototypes:"
v L "address" 2 598 "*int8" `280 
v L "bytes" 2 598 "int8" `281 
v L "value" 2 598 "int8" `282 
f B "shift_left" 2 598 "int8(*int8 address,int8 bytes,int8 value)" `279 
v L "address" 2 599 "*int8" `284 
v L "bytes" 2 599 "int8" `285 
v L "value" 2 599 "int8" `286 
f B "shift_right" 2 599 "int8(*int8 address,int8 bytes,int8 value)" `283 
v L "address" 2 600 "*int8" `288 
v L "bytes" 2 600 "int8" `289 
f B "rotate_left" 2 600 "void(*int8 address,int8 bytes)" `287 
v L "address" 2 601 "*int8" `291 
v L "bytes" 2 601 "int8" `292 
f B "rotate_right" 2 601 "void(*int8 address,int8 bytes)" `290 
v L "value" 2 602 "int8" `294 
f B "swap" 2 602 "void(int8 value)" `293 
v L "var" 2 603 "int16" `296 
v L "offset" 2 603 "int8" `297 
f B "make8" 2 603 "int8(int16 var,int8 offset)" `295 
v L "var" 2 604 "int32" `296 
v L "offset" 2 604 "int8" `300 
f G "make8" 2 604 "int8(int32 var,int8 offset)" `298 
v L "varhigh" 2 605 "int8" `302 
v L "varlow" 2 605 "int8" `303 
f B "make16" 2 605 "int16(int8 varhigh,int8 varlow)" `301 
v L "var1" 2 606 "int16" `305 
f B "make32" 2 606 "int32(int16 var1)" `304 
v L "var1" 2 607 "int16" `307 
v L "var2" 2 607 "int16" `308 
f G "make32" 2 607 "int32(int16 var1,int16 var2)" `306 
v L "var1" 2 608 "int16" `307 
v L "var2" 2 608 "int8" `311 
f G "make32" 2 608 "int32(int16 var1,int8 var2)" `309 
v L "var1" 2 609 "int16" `313 
v L "var2" 2 609 "int8" `314 
v L "var3" 2 609 "int8" `315 
f G "make32" 2 609 "int32(int16 var1,int8 var2,int8 var3)" `312 
v L "var1" 2 610 "int8" `317 
f G "make32" 2 610 "int32(int8 var1)" `316 
v L "var1" 2 611 "int8" `307 
v L "var2" 2 611 "int8" `320 
f G "make32" 2 611 "int32(int8 var1,int8 var2)" `318 
v L "var1" 2 612 "int8" `313 
v L "var2" 2 612 "int8" `314 
v L "var3" 2 612 "int8" `324 
f G "make32" 2 612 "int32(int8 var1,int8 var2,int8 var3)" `321 
v L "var1" 2 613 "int8" `326 
v L "var2" 2 613 "int8" `327 
v L "var3" 2 613 "int8" `328 
v L "var4" 2 613 "int8" `329 
f G "make32" 2 613 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `325 
v L "var1" 2 614 "int8" `307 
v L "var2" 2 614 "int16" `332 
f G "make32" 2 614 "int32(int8 var1,int16 var2)" `330 
v L "var1" 2 615 "int8" `313 
v L "var2" 2 615 "int16" `314 
v L "var3" 2 615 "int8" `336 
f G "make32" 2 615 "int32(int8 var1,int16 var2,int8 var3)" `333 
v L "var1" 2 616 "int8" `313 
v L "var2" 2 616 "int8" `314 
v L "var3" 2 616 "int16" `340 
f G "make32" 2 616 "int32(int8 var1,int8 var2,int16 var3)" `337 
v L "var" 2 617 "int8" `342 
v L "bit" 2 617 "int8" `343 
f B "bit_set" 2 617 "void(int8 var,int8 bit)" `341 
v L "var" 2 618 "int16" `342 
v L "bit" 2 618 "int8" `346 
f G "bit_set" 2 618 "void(int16 var,int8 bit)" `344 
v L "var" 2 619 "int32" `342 
v L "bit" 2 619 "int8" `349 
f G "bit_set" 2 619 "void(int32 var,int8 bit)" `347 
v L "var" 2 620 "int8" `351 
v L "bit" 2 620 "int8" `352 
f B "bit_clear" 2 620 "void(int8 var,int8 bit)" `350 
v L "var" 2 621 "int16" `351 
v L "bit" 2 621 "int8" `355 
f G "bit_clear" 2 621 "void(int16 var,int8 bit)" `353 
v L "var" 2 622 "int32" `351 
v L "bit" 2 622 "int8" `358 
f G "bit_clear" 2 622 "void(int32 var,int8 bit)" `356 
v L "var" 2 623 "int8" `360 
v L "bit" 2 623 "int8" `361 
f B "bit_test" 2 623 "int8(int8 var,int8 bit)" `359 
v L "var" 2 624 "int16" `360 
v L "bit" 2 624 "int8" `364 
f G "bit_test" 2 624 "int8(int16 var,int8 bit)" `362 
v L "var" 2 625 "int32" `360 
v L "bit" 2 625 "int8" `367 
f G "bit_test" 2 625 "int8(int32 var,int8 bit)" `365  "#use delay() Prototypes:"
v L "count" 2 628 "int8" `369 
f B "delay_cycles" 2 628 "void(int8 count)" `368 
v L "time" 2 629 "int16" `371 
f B "delay_ms" 2 629 "void(int16 time)" `370 
v L "time" 2 630 "int16" `373 
f B "delay_us" 2 630 "void(int16 time)" `372  "#use rs232() Prototypes:"
v L "cdata" 2 633 "int8" `375 
f B "putchar" 2 633 "void(int8 cdata)" `374 
v L "cdata" 2 634 "int8" `377 
v L "stream" 2 634 "int8" `378 
f G "putchar" 2 634 "void(int8 cdata,int8 stream)" `376 
v L "string" 2 635 "*int8" `380 
f B "puts" 2 635 "void(*int8 string)" `379 
v L "string" 2 636 "*int8" `382 
v L "stream" 2 636 "int8" `383 
f G "puts" 2 636 "void(*int8 string,int8 stream)" `381 
f B "getch" 2 637 "int8()" `384 
v L "stream" 2 638 "int8" `386 
f G "getch" 2 638 "int8(int8 stream)" `385 
v L "string" 2 639 "*int8" `388 
f B "gets" 2 639 "void(*int8 string)" `387 
v L "string" 2 640 "*int8" `390 
v L "stream" 2 640 "int8" `391 
f G "gets" 2 640 "void(*int8 string,int8 stream)" `389 
f B "kbhit" 2 641 "int8()" `392 
v L "stream" 2 642 "int8" `394 
f G "kbhit" 2 642 "int8(int8 stream)" `393 
v L "string" 2 643 "*int8" `396 
f B "printf" 2 643 "void(*int8 string,*int8 _VA_LIST)" `395 
v L "stream" 2 644 "int8" `399 
v L "string" 2 644 "*int8" `400 
f B "fprintf" 2 644 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `398 
f B "putc_send" 2 645 "void()" `402 
v L "stream" 2 646 "int8" `404 
f B "fputc_send" 2 646 "void(int8 stream)" `403 
f B "rcv_buffer_full" 2 647 "int8()" `405 
v L "stream" 2 648 "int8" `407 
f G "rcv_buffer_full" 2 648 "int8(int8 stream)" `406 
f B "rcv_buffer_bytes" 2 649 "int16()" `408 
v L "stream" 2 650 "int8" `410 
f G "rcv_buffer_bytes" 2 650 "int16(int8 stream)" `409 
f B "tx_buffer_full" 2 651 "int8()" `411 
v L "stream" 2 652 "int8" `413 
f G "tx_buffer_full" 2 652 "int8(int8 stream)" `412 
f B "tx_buffer_bytes" 2 653 "int16()" `414 
v L "stream" 2 654 "int8" `416 
f G "tx_buffer_bytes" 2 654 "int16(int8 stream)" `415  "#use i2c() Prototypes:"
f B "i2c_read" 2 657 "int8()" `417 
v L "stream" 2 658 "int8" `419 
f G "i2c_read" 2 658 "int8(int8 stream)" `418 
v L "stream" 2 659 "int8" `421 
v L "ack" 2 659 "int8" `422 
f G "i2c_read" 2 659 "int8(int8 stream,int8 ack)" `420 
v L "data" 2 660 "int8" `424 
f B "i2c_write" 2 660 "int8(int8 data)" `423 
v L "stream" 2 661 "int8" `426 
v L "data" 2 661 "int8" `427 
f G "i2c_write" 2 661 "int8(int8 stream,int8 data)" `425 
f B "i2c_start" 2 662 "void()" `428 
v L "stream" 2 663 "int8" `430 
f G "i2c_start" 2 663 "void(int8 stream)" `429 
v L "stream" 2 664 "int8" `432 
v L "restart" 2 664 "int8" `433 
f G "i2c_start" 2 664 "void(int8 stream,int8 restart)" `431 
f B "i2c_stop" 2 665 "void()" `434 
v L "stream" 2 666 "int8" `436 
f G "i2c_stop" 2 666 "void(int8 stream)" `435 
f B "i2c_isr_state" 2 667 "int8()" `437 
v L "addr" 2 668 "int8" `439 
f B "i2c_slaveaddr" 2 668 "void(int8 addr)" `438 
v L "stream" 2 669 "int8" `441 
v L "addr" 2 669 "int8" `442 
f G "i2c_slaveaddr" 2 669 "void(int8 stream,int8 addr)" `440 
f B "i2c_poll" 2 670 "int8()" `443 
v L "stream" 2 671 "int8" `445 
f G "i2c_poll" 2 671 "int8(int8 stream)" `444 
v L "baud" 2 672 "int32" `447 
f B "i2c_init" 2 672 "void(int32 baud)" `446 
v L "stream" 2 673 "int8" `449 
v L "baud" 2 673 "int32" `450 
f G "i2c_init" 2 673 "void(int8 stream,int32 baud)" `448  "#use spi() Prototypes:"
f B "spi_xfer" 2 676 "int8()" `451 
f G "spi_xfer" 2 677 "int16()" `452 
f G "spi_xfer" 2 678 "int32()" `453 
v L "data" 2 679 "int8" `455 
f G "spi_xfer" 2 679 "int8(int8 data)" `454 
v L "data" 2 680 "int16" `457 
f G "spi_xfer" 2 680 "int16(int16 data)" `456 
v L "data" 2 681 "int32" `459 
f G "spi_xfer" 2 681 "int32(int32 data)" `458 
v L "stream" 2 682 "int8" `461 
v L "data" 2 682 "int8" `462 
f G "spi_xfer" 2 682 "int8(int8 stream,int8 data)" `460 
v L "stream" 2 683 "int8" `461 
v L "data" 2 683 "int16" `465 
f G "spi_xfer" 2 683 "int16(int8 stream,int16 data)" `463 
v L "stream" 2 684 "int8" `461 
v L "data" 2 684 "int32" `468 
f G "spi_xfer" 2 684 "int32(int8 stream,int32 data)" `466 
v L "stream" 2 685 "int8" `470 
v L "data" 2 685 "int8" `471 
v L "bits" 2 685 "int8" `472 
f G "spi_xfer" 2 685 "int8(int8 stream,int8 data,int8 bits)" `469 
v L "stream" 2 686 "int8" `470 
v L "data" 2 686 "int16" `471 
v L "bits" 2 686 "int8" `476 
f G "spi_xfer" 2 686 "int16(int8 stream,int16 data,int8 bits)" `473 
v L "stream" 2 687 "int8" `470 
v L "data" 2 687 "int32" `471 
v L "bits" 2 687 "int8" `480 
f G "spi_xfer" 2 687 "int32(int8 stream,int32 data,int8 bits)" `477 
v L "baud" 2 688 "int32" `482 
f B "spi_init" 2 688 "void(int32 baud)" `481 
v L "stream" 2 689 "int8" `484 
v L "baud" 2 689 "int32" `485 
f G "spi_init" 2 689 "void(int8 stream,int32 baud)" `483 
v L "baud" 2 690 "int32" `487 
f B "spi_speed" 2 690 "void(int32 baud)" `486 
v L "stream" 2 691 "int8" `489 
v L "baud" 2 691 "int32" `490 
f G "spi_speed" 2 691 "void(int8 stream,int32 baud)" `488 
v L "stream" 2 692 "int8" `492 
v L "baud" 2 692 "int32" `493 
v L "clock" 2 692 "int32" `494 
f G "spi_speed" 2 692 "void(int8 stream,int32 baud,int32 clock)" `491 
v L "data" 2 693 "int8" `496 
f B "spi_prewrite" 2 693 "void(int8 data)" `495 
v L "data" 2 694 "int16" `498 
f G "spi_prewrite" 2 694 "void(int16 data)" `497 
v L "data" 2 695 "int32" `500 
f G "spi_prewrite" 2 695 "void(int32 data)" `499 
v L "??65535" 2 696 "int8" `502 
v L "data" 2 696 "int8" `503 
f G "spi_prewrite" 2 696 "void(int8 ,int8 data)" `501 
v L "??65535" 2 697 "int8" `502 
v L "data" 2 697 "int16" `506 
f G "spi_prewrite" 2 697 "void(int8 ,int16 data)" `504 
v L "??65535" 2 698 "int8" `502 
v L "data" 2 698 "int32" `509 
f G "spi_prewrite" 2 698 "void(int8 ,int32 data)" `507 
f B "spi_xfer_in" 2 699 "int8()" `510 
f G "spi_xfer_in" 2 700 "int16()" `511 
f G "spi_xfer_in" 2 701 "int32()" `512 
v L "bits" 2 702 "int8" `514 
f G "spi_xfer_in" 2 702 "int8(int8 bits)" `513 
v L "bits" 2 703 "int8" `516 
f G "spi_xfer_in" 2 703 "int16(int8 bits)" `515 
v L "bits" 2 704 "int8" `518 
f G "spi_xfer_in" 2 704 "int32(int8 bits)" `517 
v L "stream" 2 705 "int8" `520 
v L "bits" 2 705 "int8" `521 
f G "spi_xfer_in" 2 705 "int8(int8 stream,int8 bits)" `519 
v L "stream" 2 706 "int8" `520 
v L "bits" 2 706 "int8" `524 
f G "spi_xfer_in" 2 706 "int16(int8 stream,int8 bits)" `522 
v L "stream" 2 707 "int8" `520 
v L "bits" 2 707 "int8" `527 
f G "spi_xfer_in" 2 707 "int32(int8 stream,int8 bits)" `525  "#use rtos() Prototypes:"
f B "rtos_run" 2 710 "void()" `528 
f B "rtos_yield" 2 711 "void()" `529 
v L "task" 2 712 "int8" `531 
f B "rtos_enable" 2 712 "void(int8 task)" `530 
v L "task" 2 713 "int8" `533 
f B "rtos_disable" 2 713 "void(int8 task)" `532 
f B "rtos_terminate" 2 714 "void()" `534 
v L "flag" 2 715 "int8" `536 
f B "rtos_await" 2 715 "void(int8 flag)" `535 
v L "sem" 2 716 "int8" `538 
f B "rtos_wait" 2 716 "void(int8 sem)" `537 
v L "sem" 2 717 "int8" `540 
f B "rtos_signal" 2 717 "void(int8 sem)" `539 
v L "task" 2 718 "int8" `542 
v L "msg" 2 718 "int8" `543 
f B "rtos_msg_send" 2 718 "void(int8 task,int8 msg)" `541 
f B "rtos_msg_read" 2 719 "int8()" `544 
f B "rtos_msg_poll" 2 720 "int8()" `545 
v L "task" 2 721 "int8" `547 
f B "rtos_overrun" 2 721 "int8(int8 task)" `546 
v L "task" 2 722 "int8" `549 
v L "stat" 2 722 "*int8" `550 
f B "rtos_stats" 2 722 "void(int8 task,*int8 stat)" `548  "#use timer() Prototypes:"
f B "get_ticks" 2 725 "int8()" `551 
f G "get_ticks" 2 726 "int16()" `552 
f G "get_ticks" 2 727 "int32()" `553 
v L "stream" 2 728 "int8" `555 
f G "get_ticks" 2 728 "int8(int8 stream)" `554 
v L "stream" 2 729 "int8" `557 
f G "get_ticks" 2 729 "int16(int8 stream)" `556 
v L "stream" 2 730 "int8" `559 
f G "get_ticks" 2 730 "int32(int8 stream)" `558 
v L "value" 2 731 "int8" `561 
f B "set_ticks" 2 731 "void(int8 value)" `560 
v L "value" 2 732 "int16" `563 
f G "set_ticks" 2 732 "void(int16 value)" `562 
v L "value" 2 733 "int32" `565 
f G "set_ticks" 2 733 "void(int32 value)" `564 
v L "stream" 2 734 "int8" `567 
v L "value" 2 734 "int8" `568 
f G "set_ticks" 2 734 "void(int8 stream,int8 value)" `566 
v L "stream" 2 735 "int8" `567 
v L "value" 2 735 "int16" `571 
f G "set_ticks" 2 735 "void(int8 stream,int16 value)" `569 
v L "stream" 2 736 "int8" `567 
v L "value" 2 736 "int32" `574 
f G "set_ticks" 2 736 "void(int8 stream,int32 value)" `572  "#use pwm() Prototypes:"
f B "pwm_on" 2 739 "void()" `575 
v L "stream" 2 740 "int8" `577 
f G "pwm_on" 2 740 "void(int8 stream)" `576 
f B "pwm_off" 2 741 "void()" `578 
v L "stream" 2 742 "int8" `580 
f G "pwm_off" 2 742 "void(int8 stream)" `579 
v L "duty" 2 743 "int16" `582 
f B "pwm_set_duty" 2 743 "void(int16 duty)" `581 
v L "stream" 2 744 "int8" `584 
v L "duty" 2 744 "int16" `585 
f G "pwm_set_duty" 2 744 "void(int8 stream,int16 duty)" `583 
v L "percent" 2 745 "int16" `587 
f B "pwm_set_duty_percent" 2 745 "void(int16 percent)" `586 
v L "stream" 2 746 "int8" `589 
v L "percent" 2 746 "int16" `590 
f G "pwm_set_duty_percent" 2 746 "void(int8 stream,int16 percent)" `588 
v L "frequency" 2 747 "int32" `592 
f B "pwm_set_frequency" 2 747 "void(int32 frequency)" `591 
v L "stream" 2 748 "int8" `594 
v L "frequency" 2 748 "int32" `595 
f G "pwm_set_frequency" 2 748 "void(int8 stream,int32 frequency)" `593  "#use capture() Prototypes:"
f B "get_capture_time" 2 751 "int16()" `596 
v L "stream" 2 752 "int8" `598 
f G "get_capture_time" 2 752 "int16(int8 stream)" `597 
f B "get_capture_event" 2 753 "int8()" `599 
v L "stream" 2 754 "int8" `601 
f G "get_capture_event" 2 754 "int8(int8 stream)" `600  "Enviroment Prototypes:"
c L "get_capture_event" 2 1 2 "FUNCTION"
v L "address" 2 767 "int32" `603 
f B "goto_address" 2 767 "void(int32 address)" `602 
v L "label" 2 768 "int32" `605 
f B "label_address" 2 768 "int32(int32 label)" `604  "Program Memory Prototypes:"
v L "address" 2 771 "int32" `607 
v L "dataptr" 2 771 "*int8" `608 
v L "count" 2 771 "int16" `609 
f B "read_program_memory" 2 771 "void(int32 address,*int8 dataptr,int16 count)" `606 
v L "address" 2 772 "int32" `611 
f B "read_program_eeprom" 2 772 "int16(int32 address)" `610 
v L "address" 2 773 "int32" `613 
f B "erase_program_eeprom" 2 773 "void(int32 address)" `612 
v L "address" 2 774 "int32" `615 
v L "dataptr" 2 774 "*int8" `616 
v L "count" 2 774 "int16" `617 
f B "write_program_memory" 2 774 "void(int32 address,*int8 dataptr,int16 count)" `614 
v L "address" 2 775 "int32" `619 
v L "data" 2 775 "int16" `620 
f B "write_program_eeprom" 2 775 "void(int32 address,int16 data)" `618  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 780 "int16" `621 
v L "address" 2 785 "__EEADDRESS__" `623 
f B "read_eeprom" 2 785 "int8(__EEADDRESS__ address)" `622 
v L "address" 2 786 "__EEADDRESS__" `625 
v L "value" 2 786 "int8" `626 
f B "write_eeprom" 2 786 "void(__EEADDRESS__ address,int8 value)" `624  "INT"
c L "write_eeprom" 2 1 4 "FUNCTION"
v L "interrupt" 2 793 "int32" `628 
f B "enable_interrupts" 2 793 "void(int32 interrupt)" `627 
v L "interrupt" 2 794 "int32" `630 
f B "disable_interrupts" 2 794 "void(int32 interrupt)" `629 
v L "interrupt" 2 795 "int32" `632 
f B "clear_interrupt" 2 795 "void(int32 interrupt)" `631 
v L "interrupt" 2 796 "int32" `634 
f B "interrupt_active" 2 796 "int8(int32 interrupt)" `633 
v L "interrupt" 2 797 "int32" `636 
f B "interrupt_enabled" 2 797 "int8(int32 interrupt)" `635 
v L "source" 2 798 "int8" `638 
v L "edge" 2 798 "int8" `639 
f B "ext_int_edge" 2 798 "void(int8 source,int8 edge)" `637 
v L "address" 2 799 "int16" `641 
f B "jump_to_isr" 2 799 "void(int16 address)" `640  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 801 "0x40"
d G "H_TO_L" 2 802 "0"
d G "GLOBAL" 2 804 "0xF2C0"
d G "PERIPH" 2 805 "0xF240"
d G "INT_RTCC" 2 806 "0x00F220"
d G "INT_TIMER0" 2 807 "0x00F220"
d G "INT_TIMER1" 2 808 "0x009D01"
d G "INT_TIMER2" 2 809 "0x009D02"
d G "INT_TIMER3" 2 810 "0x00A002"
d G "INT_EXT_L2H" 2 811 "0x5000F210"
d G "INT_EXT_H2L" 2 812 "0x6000F210"
d G "INT_EXT" 2 813 "0x00F210"
d G "INT_EXT1_L2H" 2 814 "0x5001F008"
d G "INT_EXT1_H2L" 2 815 "0x6001F008"
d G "INT_EXT1" 2 816 "0x00F008"
d G "INT_EXT2_L2H" 2 817 "0x5002F010"
d G "INT_EXT2_H2L" 2 818 "0x6002F010"
d G "INT_EXT2" 2 819 "0x00F010"
d G "INT_RB" 2 820 "0x00FFF208"
d G "INT_PSP" 2 821 "0x009D80"
d G "INT_AD" 2 822 "0x009D40"
d G "INT_RDA" 2 823 "0x009D20"
d G "INT_TBE" 2 824 "0x009D10"
d G "INT_SSP" 2 825 "0x009D08"
d G "INT_CCP1" 2 826 "0x009D04"
d G "INT_CCP2" 2 827 "0x00A001"
d G "INT_BUSCOL" 2 828 "0x00A008"
d G "INT_LOWVOLT" 2 829 "0x00A004"
d G "INT_CANIRX" 2 830 "0x00A380"
d G "INT_CANWAKE" 2 831 "0x00A340"
d G "INT_CANERR" 2 832 "0x00A320"
d G "INT_COMP" 2 833 "0x00A040"
d G "INT_EEPROM" 2 834 "0x00A010"
d G "INT_CANTX2" 2 835 "0x00A310"
d G "INT_CANTX1" 2 836 "0x00A308"
d G "INT_CANTX0" 2 837 "0x00A304"
d G "INT_CANRX1" 2 838 "0x00A302"
d G "INT_CANRX0" 2 839 "0x00A301"
d G "INT_OSCF" 2 840 "0x00A080"
C L "jump_to_isr" 1 8 7 "FUNCTION"
V G "data_set" 1 40 "int8" `651 
C L "jump_to_isr" 1 8 1 "FUNCTION"
V G "port_size" 1 41 "int8" `653 
V G "tag_size" 1 42 "int8" `655 
V G "word_size_reg" 1 43 "int8" `657 
C L "jump_to_isr" 1 8 1 "FUNCTION"
V G "lim_reg" 1 44 "int16" `659 
V G "data_numbers_ext" 1 45 "int16" `661 
C L "jump_to_isr" 1 8 1 "FUNCTION"
V G "instruccion_size" 1 46 "int8" `663 
V G "envia_pc" 1 48 "int8" `665 
V G "a" 1 48 "int8" `666 
V G "b2" 1 48 "int8" `667 
V G "relay1" 1 48 "int8" `668 
V G "tcp_recibe" 1 48 "int8" `669 
V G "time_relay1" 1 48 "int8" `670 
V G "falla_grabar" 1 48 "int8" `671 
V G "f_graba" 1 48 "int8" `672 
V G "memory" 1 49 "int8[30]" `673 
V G "i" 1 50 "int16" `674 
V G "n" 1 50 "int16" `675 
V G "b" 1 50 "int16" `676 
V G "c_envia" 1 50 "int16" `677 
V G "size_tx_tcp" 1 51 "int8" `678 
V G "con_activas" 1 51 "int8" `679 
V G "m" 1 52 "int16" `680 
V G "dir" 1 52 "int16" `681 
V G "edo_str" 1 54 "int8" `682 
V G "reintento_envio" 1 54 "int8" `683 
V G "inicializado" 1 54 "int8" `684 
V G "socket2" 1 54 "int8" `685 
V G "XX" 1 55 "int8[90]" `686  "ARREGLO GENERICO(ALMACENA LECTURAS TARJETAS Y DATOS RECIBIDOS DE TCP)"
V G "YY" 1 56 "int8[90]" `687  "ARREGLO GENERICO(ALMACENA LECTURAS TARJETAS Y DATOS RESPALDO EN RAM)"
V G "txtcp" 1 57 "int8[90]" `688  "ARREGLO DE TRANSMICION"
V G "rxtcp" 1 58 "int8[90]" `689  "1536->112 tags,se direcciona mal la ram con valores mas grandes"
C L "jump_to_isr" 1 8 1 "FUNCTION"
V G "lcd_men" 1 60 "int8[80]" `690  "VARIABLES WIEGAND/////////"
V G "wieg_size" 1 62 "int8" `691 
C L "jump_to_isr" 1 8 1 "FUNCTION"
V G "deteccion_nulo" 1 63 "int8" `693 
V G "pre_cuenta" 1 63 "int8" `694 
V G "wieg" 1 64 "int8" `695 
V G "wigmal" 1 64 "int8" `696 
V G "tecla" 1 64 "int8" `697 
V G "sub_indice" 1 65 "int8" `698 
V G "wieg_full" 1 66 "int8" `699 
V G "wiegand_cuenta" 1 67 "int8" `700 
V G "deci" 1 68 "int32" `701 
V G "data" 1 69 "int8[26]" `702 
V G "con_barra" 1 70 "int8[30]" `703 
V G "barra_codi" 1 70 "int8[30]" `704 
V G "folio" 1 71 "int32" `705 
V G "idbar" 1 72 "int8" `706 
V G "data_numbers" 1 73 "int8" `708 
C L "jump_to_isr" 1 8 1 "FUNCTION"
V G "day" 1 75 "int8" `710 
V G "month" 1 75 "int8" `711 
V G "yr" 1 75 "int8" `712 
V G "hrs" 1 75 "int8" `713 
V G "min" 1 75 "int8" `714 
V G "sec" 1 75 "int8" `715 
V G "dow" 1 75 "int8" `716 
V G "puntos" 1 75 "int8" `717 
V G "cambio_msj" 1 75 "int8" `718 
V G "dias_prueba" 1 76 "int8" `719 
V G "dia_temp" 1 76 "int8" `720 
V G "pago" 1 76 "int8" `721 
V G "cuenta" 1 76 "int8" `722 
V G "espera" 1 76 "int8" `723 
V G "hrs2" 1 76 "int8" `724 
V G "mes2" 1 77 "int16" `725 
V G "dia" 1 77 "int16" `726 
V G "dia_limite" 1 78 "int8" `727 
C L "jump_to_isr" 1 8 1 "FUNCTION"
V G "en1" 1 80 "int8" `729 
V G "en2" 1 80 "int8" `730 
V G "en3" 1 80 "int8" `731 
V G "en4" 1 80 "int8" `732 
V G "en5" 1 80 "int8" `733 
V G "flag_pluma" 1 80 "int8" `734  "boleto"
V G "time_boleto" 1 82 "int8" `735 
V G "re_bol" 1 82 "int8" `736 
V G "cta_lcd" 1 82 "int8" `737  "Definimos macros hardware:"
D G "LCD_DB4" 3 8 "PIN_A4"
D G "LCD_DB5" 3 9 "PIN_A2"
D G "LCD_DB6" 3 10 "PIN_A1"
D G "LCD_DB7" 3 11 "PIN_A0"
D G "LCD_RS" 3 13 "PIN_E2"
D G "LCD_RW" 3 14 "PIN_C1"
D G "LCD_E" 3 15 "PIN_A3"
D G "LCD_LINE_1_ADDRESS" 3 53 "0x00"
D G "LCD_LINE_2_ADDRESS" 3 54 "0x40"
D G "LCD_LINE_3_ADDRESS" 3 55 "0x14"
D G "LCD_LINE_4_ADDRESS" 3 56 "0x54"
D G "lcd_type" 3 68 "2" "0=5x7, 1=5x10, 2=2 lines(or more)"
V G "lcd_line" 3 70 "int8" `738 
V G "LCD_INIT_STRING" 3 72 "[4]" `739 
C L "jump_to_isr" 3 1 1 "FUNCTION"
C L "jump_to_isr" 3 1 1 "FUNCTION"
C L "jump_to_isr" 3 1 1 "FUNCTION"
C L "jump_to_isr" 3 1 1 "FUNCTION"
V L "nibble" 3 82 "int8" `743 
F G "lcd_send_nibble" 3 83 "void(int8 nibble)" `742  "Note:  !! converts an integer expression"
C L "lcd_send_nibble" 3 1 1 "FUNCTION"
C L "lcd_send_byte" 3 1 6 "FUNCTION"
V L "address" 3 153 "int8" `745 
V L "n" 3 153 "int8" `746 
F G "lcd_send_byte" 3 154 "void(int8 address,int8 n)" `744 
F G "lcd_init" 3 183 "void()" `747 
V L "i" 3 184 "int8" `748 
C L "lcd_init" 3 1 4 "FUNCTION"
C L "lcd_init" 3 1 6 "FUNCTION"
V L "x" 3 229 "int8" `750 
V L "y" 3 229 "int8" `751 
F G "lcd_gotoxy" 3 230 "void(int8 x,int8 y)" `749 
V L "address" 3 231 "int8" `752 
V L "c" 3 263 "int8" `754 
F G "lcd_putc" 3 264 "void(int8 c)" `753 
D G "EEPROM_SDA" 4 26 "PIN_B5" "PIN_B7"
D G "EEPROM_SCL" 4 27 "PIN_B4" "PIN_B6"
D G "EEPROM_ADDRESS" 4 33 "long int"
D G "EEPROM_SIZE" 4 34 "32768"
F G "init_ext_eeprom" 4 37 "void()" `759 
V L "address" 4 44 "int16" `761 
V L "data" 4 44 "int8" `762 
F G "write_ext_eeprom" 4 44 "void(int16 address,int8 data)" `760 
V L "status" 4 45 "int1" `763 
V L "address" 4 62 "int16" `765 
F G "read_ext_eeprom" 4 62 "int8(int16 address)" `764 
V L "data" 4 63 "int8" `766 
D G "RTC_SDA" 5 19 "PIN_D6"
D G "RTC_SCL" 5 20 "PIN_E1"
V L "binary_value" 5 24 "int8" `772 
f G "bin2bcd" 5 24 "int8(int8 binary_value)" `771 
V L "bcd_value" 5 25 "int8" `774 
f G "bcd2bin" 5 25 "int8(int8 bcd_value)" `773 
F G "ds1307_init" 5 28 "void()" `775 
V L "seconds" 5 32 "int8" `776 
C L "ds1307_init" 5 4 1 "FUNCTION"
C L "ds1307_init" 5 4 1 "FUNCTION"
C L "ds1307_init" 5 4 1 "FUNCTION"
C L "ds1307_init" 5 4 1 "FUNCTION"
C L "ds1307_init" 5 4 1 "FUNCTION"
C L "ds1307_init" 5 4 1 "FUNCTION"
C L "ds1307_init" 5 4 1 "FUNCTION"
C L "ds1307_init" 5 4 1 "FUNCTION"
C L "ds1307_init" 5 4 1 "FUNCTION"
C L "ds1307_init" 5 4 1 "FUNCTION"
V L "day" 5 59 "int8" `778 
V L "mth" 5 59 "int8" `779 
V L "year" 5 59 "int8" `780 
V L "dow" 5 59 "int8" `781 
V L "hr" 5 59 "int8" `782 
V L "min" 5 59 "int8" `783 
V L "sec" 5 59 "int8" `784 
F G "ds1307_set_date_time" 5 60 "void(int8 day,int8 mth,int8 year,int8 dow,int8 hr,int8 min,int8 sec)" `777 
C L "ds1307_set_date_time" 5 4 1 "FUNCTION"
C L "ds1307_set_date_time" 5 4 1 "FUNCTION"
C L "ds1307_set_date_time" 5 4 1 "FUNCTION"
C L "ds1307_set_date_time" 5 4 1 "FUNCTION"
C L "ds1307_set_date_time" 5 4 1 "FUNCTION"
C L "ds1307_set_date_time" 5 4 1 "FUNCTION"
C L "ds1307_set_date_time" 5 4 1 "FUNCTION"
C L "ds1307_set_date_time" 5 4 1 "FUNCTION"
C L "ds1307_set_date_time" 5 4 1 "FUNCTION"
C L "ds1307_set_date_time" 5 4 1 "FUNCTION"
V L "day" 5 84 "int8" `786 
V L "mth" 5 84 "int8" `787 
V L "year" 5 84 "int8" `788 
V L "dow" 5 84 "int8" `789 
F G "ds1307_get_date" 5 85 "void(int8 day,int8 mth,int8 year,int8 dow)" `785 
C L "ds1307_get_date" 5 4 1 "FUNCTION"
C L "ds1307_get_date" 5 4 1 "FUNCTION"
C L "ds1307_get_date" 5 4 1 "FUNCTION"
C L "ds1307_get_date" 5 4 1 "FUNCTION"
C L "ds1307_get_date" 5 4 1 "FUNCTION"
V L "hr" 5 105 "int8" `791 
V L "min" 5 105 "int8" `792 
V L "sec" 5 105 "int8" `793 
F G "ds1307_get_time" 5 106 "void(int8 hr,int8 min,int8 sec)" `790 
C L "ds1307_get_time" 5 4 1 "FUNCTION"
V L "binary_value" 5 124 "int8" `795 
F G "bin2bcd" 5 125 "int8(int8 binary_value)" `771 
V L "temp" 5 127 "int8" `794 
V L "retval" 5 128 "int8" `795 
C L "bin2bcd" 5 4 2 "FUNCTION"
C L "bin2bcd" 5 4 1 "FUNCTION"
C L "bcd2bin" 5 4 1 "FUNCTION"
V L "bcd_value" 5 153 "int8" `797 
F G "bcd2bin" 5 154 "int8(int8 bcd_value)" `773 
V L "temp" 5 155 "int8" `796 
C L "bcd2bin" 5 4 1 "FUNCTION"
C L "bcd2bin" 5 4 1 "FUNCTION"
C L "bcd2bin" 5 4 1 "FUNCTION"
D G "entrada01" 1 88 "PIN_D4"
D G "entrada02" 1 89 "PIN_B0" "DATA1"
D G "entrada03" 1 90 "PIN_B1" "DATA0"
D G "entrada04" 1 91 "PIN_D0"
D G "entrada05" 1 92 "PIN_D1" "SENSOR BARRERA"
D G "salida01" 1 95 "PIN_A5" "abre entrada"
D G "salida02" 1 96 "PIN_E0" "abre entrada"
D G "salida03" 1 97 "PIN_D2" "abre salida"
D G "salida04" 1 98 "PIN_D3" "indicador de cupo lleno"
D G "salida05" 1 99 "PIN_D7"
D G "salida06" 1 100 "PIN_C2" "indicador de conexion"
V G "texto1" 1 102 "int8[12]" `797 
V G "texto2" 1 103 "int8[12]" `798 
V G "texto3" 1 104 "int8[12]" `799 
V G "texto4" 1 105 "int8[12]" `800 
V G "texto5" 1 106 "int8[12]" `801 
V G "texto6" 1 107 "int8[12]" `802 
V G "texto7" 1 108 "int8[12]" `803 
V G "texto8" 1 109 "int8[12]" `804 
V G "texto9" 1 110 "int8[12]" `805 
V G "texto10" 1 111 "int8[12]" `806 
V G "texto11" 1 112 "int8[12]" `807 
V G "texto12" 1 113 "int8[12]" `808 
V G "texto13" 1 114 "int8[12]" `809 
V G "texto14" 1 115 "int8[12]" `810 
V G "boleto" 1 116 "int8[1]" `811 
V G "barrera" 1 117 "int8[1]" `812 
V G "fmensaje" 1 118 "int8" `813 
V G "time_lcd" 1 119 "int16" `814  "int en5,flag_pluma;"
V G "flag_time" 0 9 "int8" `815 
V G "time_bot" 0 10 "int16" `816  "Define el stack usado: ENC28J60."
D G "STACK_USE_CCS_PICENS" 0 13 "1"
D G "STACK_USE_ICMP" 0 15 "1"
D G "STACK_USE_ARP" 0 17 "1"
D G "STACK_USE_TCP" 0 19 "1"
D G "STACK_USE_MCPENC" 0 21 "1"
D G "PIN_ENC_MAC_SO" 0 25 "PIN_C4"
D G "PIN_ENC_MAC_SI" 0 26 "PIN_C5"
D G "PIN_ENC_MAC_CLK" 0 27 "PIN_C3"
D G "PIN_ENC_MAC_CS" 0 29 "PIN_C1"
D G "PIN_ENC_MAC_RST" 0 30 "PIN_C0"
D G "PIN_ENC_MAC_INT" 0 31 "PIN_D2"
D G "PIN_ENC_MAC_WOL" 0 32 "PIN_D3"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
D G "STACK_USE_FTP_SERVER" 6 63 "STACK_USE_FTP"
D G "STACK_INCLUDE" 6 65 ""
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 2 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
D G "STACK_TSK_H" 7 49 ""
D G "OUTPUT_DRIVE_MACRO" 7 55 "(x) bit_clear(*(x/8+18),x%8)"
D G "OUTPUT_FLOAT_MACRO" 7 63 "(x) bit_set(*(x/8+18),x%8)"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
D G "COMPILER_H" 8 43 ""
C G "" 8 49 1 "*"
C G "" 8 111 1 "*"
C G "" 8 175 1 "*"
C G "" 8 238 1 "*"
C G "" 7 72 1 "*"
C G "" 7 72 1 "*"
C G "" 7 72 1 "*"
C G "" 7 72 1 "*"
C G "" 7 72 1 "*"
C G "" 7 72 2 "*"
C G "" 7 83 1 "*"
C G "" 7 83 1 "*"
C G "" 7 83 1 "*"
C G "" 7 83 1 "*"
C G "" 7 83 1 "*"
C G "" 7 83 1 "*"
C G "" 7 83 1 "*"
C G "" 7 83 1 "*"
C G "" 7 83 2 "*"
C G "" 7 96 1 "*"
C G "" 7 96 1 "*"
C G "" 7 96 1 "*"
C G "" 7 96 1 "*"
C G "" 7 96 1 "*"
D G "MPFS_START_POSITION" 7 107 "548"
D G "END_OF_MPFS_POINTER" 7 110 " (MPFS_START_POSITION)"
D G "MPFS_RESERVE_BLOCK" 7 111 " (END_OF_MPFS_POINTER+4)"
C G "" 7 113 1 "*"
C G "" 7 113 1 "*"
C G "" 7 113 1 "*"
C G "" 7 113 1 "*"
D G "STACK_USE_MAC" 7 121 "TRUE"
D G "STACK_USE_MCPINC" 7 129 "FALSE"
D G "STACK_USE_MAC" 7 135 "TRUE"
D G "STACK_USE_PPP" 7 146 "FALSE"
D G "STACK_USE_SLIP" 7 150 "FALSE"
D G "STACK_USE_DNS" 7 162 "FALSE"
D G "STACK_USE_DHCP" 7 166 "FALSE"
D G "STACK_USE_UDP" 7 170 "FALSE"
D G "STACK_USE_TELNET" 7 182 "FALSE"
D G "STACK_USE_HTTP" 7 186 "FALSE"
D G "STACK_USE_SMTP" 7 190 "FALSE"
D G "STACK_USE_SNMP" 7 194 "FALSE"
D G "STACK_USE_ANNOUNCE" 7 198 "FALSE"
D G "STACK_USE_IP_GLEANING" 7 210 "FALSE"
D G "STACK_USE_MPFS" 7 214 "FALSE"
D G "STACK_USE_HTTP2" 7 218 "FALSE"
D G "STACK_USE_FAT" 7 222 "FALSE"
D G "STACK_USE_FTP" 7 226 "FALSE"
D G "STACK_USE_TFTP" 7 230 "FALSE"
D G "STACK_USE_TEMP" 7 234 "FALSE"
C G "" 7 237 1 "*"
C G "" 7 245 1 "*"
C G "" 7 255 1 "*"
C G "" 7 265 1 "*"
C G "" 7 265 1 "*"
C G "" 7 265 1 "*"
D G "MCHP_MAC" 7 272 ""
C G "" 7 276 1 "*"
C G "" 7 276 1 "*"
C G "" 7 276 1 "*"
C G "" 7 276 1 "*"
C G "" 7 276 1 "*"
C G "" 7 276 1 "*"
C G "" 7 276 1 "*"
C G "" 7 276 1 "*"
C G "" 7 276 1 "*"
D G "___TCPIP_STACK_CONFIGURATION" 9 29 ""
D G "STACK_USE_CCS_PICNET" 9 33 "FALSE"
D G "TCP_NO_WAIT_FOR_ACK" 9 124 "FALSE"
D G "MY_DEFAULT_IP_ADDR_BYTE1" 9 131 "10" "IP ADDRESS"
D G "MY_DEFAULT_IP_ADDR_BYTE2" 9 132 "10" "This unit's IP address."
D G "MY_DEFAULT_IP_ADDR_BYTE3" 9 133 "5"
D G "MY_DEFAULT_IP_ADDR_BYTE4" 9 134 "15"
D G "MY_DEFAULT_MASK_BYTE1" 9 136 "0xff" "NETMASK"
D G "MY_DEFAULT_MASK_BYTE2" 9 137 "0xff" "Netmask tells the IP / ARP stack which"
D G "MY_DEFAULT_MASK_BYTE3" 9 138 "0xff" "IP's are on your local network."
D G "MY_DEFAULT_MASK_BYTE4" 9 139 "0x00"
D G "MY_DEFAULT_GATE_BYTE1" 9 141 "192" "GATEWAY IP ADDRESS"
D G "MY_DEFAULT_GATE_BYTE2" 9 142 "168" "Gateway acts as a conduit between two networks."
D G "MY_DEFAULT_GATE_BYTE3" 9 143 "100"
D G "MY_DEFAULT_GATE_BYTE4" 9 144 "1"
D G "MY_DEFAULT_MAC_BYTE1" 9 150 "0x00"
D G "MY_DEFAULT_MAC_BYTE2" 9 151 "0x04"
D G "MY_DEFAULT_MAC_BYTE3" 9 152 "0xa3"
D G "MY_DEFAULT_MAC_BYTE4" 9 153 "0x00"
D G "MY_DEFAULT_MAC_BYTE5" 9 154 "0x00"
D G "MY_DEFAULT_MAC_BYTE6" 9 155 "0x00"
D G "MAX_SOCKETS" 9 161 "35"
D G "MAX_UDP_SOCKETS" 9 168 "2"
D G "MAC_TX_BUFFER_SIZE" 9 190 "1024" "do not modify this line"
D G "MAC_TX_BUFFER_COUNT" 9 191 "1" "do not modify this line"
D G "MAC_RX_BUFFER_SIZE" 9 200 "MAC_TX_BUFFER_SIZE" "do not modify this line unless you are certain you know what you're doing"
D G "MY_MAC_BYTE1" 7 295 "AppConfig.MyMACAddr.v[0]"
D G "MY_MAC_BYTE2" 7 296 "AppConfig.MyMACAddr.v[1]"
D G "MY_MAC_BYTE3" 7 297 "AppConfig.MyMACAddr.v[2]"
D G "MY_MAC_BYTE4" 7 298 "AppConfig.MyMACAddr.v[3]"
D G "MY_MAC_BYTE5" 7 299 "AppConfig.MyMACAddr.v[4]"
D G "MY_MAC_BYTE6" 7 300 "AppConfig.MyMACAddr.v[5]"
C G "" 7 302 1 "*"
C G "" 7 302 1 "*"
D G "MY_MASK_BYTE1" 7 307 "AppConfig.MyMask.v[0]"
D G "MY_MASK_BYTE2" 7 308 "AppConfig.MyMask.v[1]"
D G "MY_MASK_BYTE3" 7 309 "AppConfig.MyMask.v[2]"
D G "MY_MASK_BYTE4" 7 310 "AppConfig.MyMask.v[3]"
C G "" 7 312 1 "*"
C G "" 7 312 1 "*"
D G "MY_IP" 7 319 "AppConfig.MyIPAddr"
D G "MY_IP_BYTE1" 7 321 "AppConfig.MyIPAddr.v[0]"
D G "MY_IP_BYTE2" 7 322 "AppConfig.MyIPAddr.v[1]"
D G "MY_IP_BYTE3" 7 323 "AppConfig.MyIPAddr.v[2]"
D G "MY_IP_BYTE4" 7 324 "AppConfig.MyIPAddr.v[3]"
C G "" 7 326 1 "*"
D G "MY_GATE_BYTE1" 7 330 "AppConfig.MyGateway.v[0]"
D G "MY_GATE_BYTE2" 7 331 "AppConfig.MyGateway.v[1]"
D G "MY_GATE_BYTE3" 7 332 "AppConfig.MyGateway.v[2]"
D G "MY_GATE_BYTE4" 7 333 "AppConfig.MyGateway.v[3]"
D G "MY_DNS_BYTE1" 7 338 "AppConfig.PrimaryDNSServer.v[0]"
D G "MY_DNS_BYTE2" 7 339 "AppConfig.PrimaryDNSServer.v[1]"
D G "MY_DNS_BYTE3" 7 340 "AppConfig.PrimaryDNSServer.v[2]"
D G "MY_DNS_BYTE4" 7 341 "AppConfig.PrimaryDNSServer.v[3]"
T G "BOOL" 7 377 "int1" `987 
T G "BUFFER" 7 379 "int8" `988 
T G "WORD" 7 381 "int16" `989 
T G "DWORD" 7 382 "int32" `990 
T G "BYTE_VAL" 7 398 "{int8 Val}" `1003 
T G "SWORD_VAL" 7 410 "{int32 Val}" `1011 
T G "WORD_VAL" 7 422 "{int16 Val,int8[2] v}" `1019  "typedef union _DWORD_VAL"
T G "DWORD_VAL" 7 484 "{DWORD Val,WORD[2] w,int8[4] v}" `1068 
D G "LOWER_LSB" 7 487 "(a)    (a).v[0]"
D G "LOWER_MSB" 7 488 "(a)   (a).v[1]"
D G "UPPER_LSB" 7 489 "(a)    (a).v[2]"
D G "UPPER_MSB" 7 490 "(a)    (a).v[3]"
T G "MAC_ADDR" 7 495 "{int8[6] v}" `1071 
T G "IP_ADDR" 7 501 "{int8[4] v,DWORD Val}" `1075 
T G "NODE_INFO" 7 508 "{MAC_ADDR MACAddr,IP_ADDR IPAddr}" `1079 
T G "APP_CONFIG" 7 526 "{IP_ADDR MyIPAddr,MAC_ADDR MyMACAddr,IP_ADDR MyMask,IP_ADDR MyGateway,IP_ADDR PrimaryDNSServer}" `1094  "typedef union _STACK_FLAGS"
V G "AppConfig" 7 537 "APP_CONFIG" `1095 
D G "StackIsInConfigMode" 7 542 "()   FALSE"
C L "StackInit" 7 546 1 "*"
C L "StackInit" 7 546 1 "*"
C L "StackInit" 7 546 1 "*"
C L "StackInit" 7 546 1 "*"
C L "StackInit" 7 546 1 "*"
C L "StackInit" 7 546 1 "*"
C L "StackInit" 7 546 1 "*"
f G "StackInit" 7 561 "void()" `1096  "* Function:        void StackTask(void)"
C L "StackInit" 7 564 1 "*"
C L "StackInit" 7 564 1 "*"
C L "StackInit" 7 564 1 "*"
C L "StackInit" 7 564 1 "*"
C L "StackInit" 7 564 1 "*"
C L "StackInit" 7 564 1 "*"
C L "StackInit" 7 564 1 "*"
C L "StackInit" 7 564 1 "*"
C L "StackInit" 7 564 1 "*"
f G "StackTask" 7 583 "void()" `1097  "(C) Copyright 1996,2008 Custom Computer Services            ////"
D G "_STRING" 10 12 ""
D G "_STDDEF" 11 13 ""
D G "ptrdiff_t" 11 18 "unsigned int16"
D G "size_t" 11 24 "unsigned int16"
D G "wchar_t" 11 26 "char"
D G "NULL" 11 27 "0"
D G "offsetof" 11 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 12 12 ""
D G "islower" 12 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 12 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 12 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 12 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 12 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 12 19 "(x)  ((x)==' ')"
D G "isxdigit" 12 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 12 21 "(x)  ((x)<' ')"
D G "isprint" 12 22 "(x)  ((x)>=' ')"
D G "isgraph" 12 23 "(x)  ((x)>' ')"
D G "ispunct" 12 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "StackTask" 10 19 10 "FUNCTION"
V L "s1" 10 34 "*int8" `1099 
V L "s2" 10 34 "*int8" `1100 
V L "n" 10 34 "int16" `1101 
F G "memmove" 10 35 "*int8(*int8 s1,*int8 s2,int16 n)" `1098 
V L "sc1" 10 36 "*int8" `1102 
V L "sc2" 10 37 "*int8" `1103 
D G "strcopy" 10 54 "strcpy"
V L "s1" 10 61 "*int8" `1105 
V L "s2" 10 61 "*int8" `1106 
V L "n" 10 61 "int16" `1107 
F G "strncpy" 10 62 "*int8(*int8 s1,*int8 s2,int16 n)" `1104 
V L "s" 10 63 "*int8" `1108 
V L "s1" 10 78 "*int8" `1110 
V L "s2" 10 78 "*int8" `1111 
F G "strcat" 10 79 "*int8(*int8 s1,*int8 s2)" `1109 
V L "s" 10 80 "*int8" `1112 
V L "s1" 10 96 "*int8" `1114 
V L "s2" 10 96 "*int8" `1115 
V L "n" 10 96 "int16" `1116 
F G "strncat" 10 97 "*int8(*int8 s1,*int8 s2,int16 n)" `1113 
V L "s" 10 98 "*int8" `1117 
C L "memcmp" 10 19 3 "FUNCTION"
V L "s1" 10 120 "*int8" `1119 
V L "s2" 10 120 "*int8" `1120 
V L "n" 10 120 "int16" `1121 
F G "memcmp" 10 121 "sint8(*int8 s1,*int8 s2,int16 n)" `1118 
V L "su1" 10 122 "*int8" `1122 
V L "su2" 10 122 "*int8" `1123 
C L "strcmp" 10 19 2 "FUNCTION"
V L "s1" 10 134 "*int8" `1125 
V L "s2" 10 134 "*int8" `1126 
F G "strcmp" 10 135 "sint8(*int8 s1,*int8 s2)" `1124 
C L "strcoll" 10 19 2 "FUNCTION"
V L "s1" 10 144 "*int8" `1128 
V L "s2" 10 144 "*int8" `1129 
F G "strcoll" 10 145 "sint8(*int8 s1,*int8 s2)" `1127 
C L "strncmp" 10 19 4 "FUNCTION"
V L "s1" 10 157 "*int8" `1131 
V L "s2" 10 157 "*int8" `1132 
V L "n" 10 157 "int16" `1133 
F G "strncmp" 10 158 "sint8(*int8 s1,*int8 s2,int16 n)" `1130 
C L "strxfrm" 10 19 3 "FUNCTION"
V L "s1" 10 169 "*int8" `1135 
V L "s2" 10 169 "*int8" `1136 
V L "n" 10 169 "int16" `1137 
F G "strxfrm" 10 170 "int16(*int8 s1,*int8 s2,int16 n)" `1134 
V L "s" 10 171 "*int8" `1138 
V L "n1" 10 172 "int8" `1139 
V L "s" 10 191 "*int8" `1141 
V L "c" 10 191 "int8" `1142 
V L "n" 10 191 "int16" `1143 
F G "memchr" 10 192 "*int8(*int8 s,int8 c,int16 n)" `1140 
V L "uc" 10 193 "int8" `1144 
V L "su" 10 194 "*int8" `1145 
V L "s" 10 205 "*int8" `1147 
V L "c" 10 205 "int8" `1148 
F G "strchr" 10 206 "*int8(*int8 s,int8 c)" `1146 
C L "strcspn" 10 19 4 "FUNCTION"
V L "s1" 10 217 "*int8" `1150 
V L "s2" 10 217 "*int8" `1151 
F G "strcspn" 10 218 "int8(*int8 s1,*int8 s2)" `1149 
V L "sc1" 10 219 "*int8" `1152 
V L "sc2" 10 219 "*int8" `1153 
V L "s1" 10 232 "*int8" `1155 
V L "s2" 10 232 "*int8" `1156 
F G "strpbrk" 10 233 "*int8(*int8 s1,*int8 s2)" `1154 
V L "sc1" 10 234 "*int8" `1157 
V L "sc2" 10 234 "*int8" `1158 
V L "s" 10 247 "*int8" `1160 
V L "c" 10 247 "int8" `1161 
F G "strrchr" 10 248 "*int8(*int8 s,int8 c)" `1159 
V L "p" 10 249 "*int8" `1162 
C L "strspn" 10 19 2 "FUNCTION"
V L "s1" 10 262 "*int8" `1164 
V L "s2" 10 262 "*int8" `1165 
F G "strspn" 10 263 "int8(*int8 s1,*int8 s2)" `1163 
V L "sc1" 10 264 "*int8" `1166 
V L "sc2" 10 264 "*int8" `1167 
V L "s1" 10 281 "*int8" `1169 
V L "s2" 10 281 "*int8" `1170 
F G "strstr" 10 282 "*int8(*int8 s1,*int8 s2)" `1168 
V L "s" 10 283 "*int8" `1171 
V L "t" 10 283 "*int8" `1172 
V L "s1" 10 320 "*int8" `1174 
V L "s2" 10 320 "*int8" `1175 
F G "strtok" 10 321 "*int8(*int8 s1,*int8 s2)" `1173 
V L "beg" 10 322 "*int8" `1176 
V L "end" 10 322 "*int8" `1177 
V L "save" 10 323 "*int8" `1178 
C L "strlen" 10 19 6 "FUNCTION"
V L "s" 10 369 "*int8" `1180 
F G "strlen" 10 370 "int8(*int8 s)" `1179 
V L "sc" 10 371 "*int8" `1181 
C L "stricmp" 10 19 2 "FUNCTION"
V L "s1" 10 380 "*int8" `1183 
V L "s2" 10 380 "*int8" `1184 
F G "stricmp" 10 381 "sint8(*int8 s1,*int8 s2)" `1182 
V L "s" 10 394 "*int8" `1188 
F G "strlwr" 10 395 "*int8(*int8 s)" `1187 
V L "p" 10 396 "*int8" `1189 
V L "s" 10 408 "*int8" `1191 
F G "strupr" 10 409 "*int8(*int8 s)" `1190 
V L "p" 10 410 "*int8" `1192 
D G "_STDLIB" 13 12 ""
D G "RAND_MAX" 13 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 13 25 "1"
T G "div_t" 13 33 "{sint8 quot,sint8 rem}" `1196 
T G "ldiv_t" 13 38 "{sint16 quot,sint16 rem}" `1200  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 11 3 6 "FUNCTION"
C L "atoi" 13 43 2 "FUNCTION"
C L "atoi" 13 46 1 "*"
C L "atoi" 13 46 1 "*"
V L "s" 13 50 "*int8" `1202 
f G "atoi" 13 50 "sint8(*int8 s)" `1201  "Syntax: signed int32  atoi32(char * s)"
V L "s" 13 58 "*int8" `1204 
f G "atoi32" 13 58 "sint32(*int8 s)" `1203  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 13 46 2 "FUNCTION"
V L "num" 13 79 "sint32" `1206 
V L "base" 13 79 "int8" `1207 
V L "s" 13 79 "*int8" `1208 
f G "itoa" 13 79 "*int8(sint32 num,int8 base,*int8 s)" `1205  "Standard template: signed int16  atol(char * s)"
C L "itoa" 13 81 1 "*"
C L "itoa" 13 81 1 "*"
V L "s" 13 85 "*int8" `1210 
f G "atol" 13 85 "sint16(*int8 s)" `1209  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 13 87 1 "*"
C L "atol" 13 87 1 "*"
C L "atol" 13 87 1 "*"
C L "atol" 13 87 1 "*"
V L "s" 13 93 "*int8" `1212 
V L "endptr" 13 93 "*int8" `1213 
V L "base" 13 93 "sint8" `1214 
f G "strtol" 13 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `1211  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 13 95 1 "*"
C L "strtol" 13 95 1 "*"
C L "strtol" 13 95 1 "*"
C L "strtol" 13 95 1 "*"
V L "s" 13 101 "*int8" `1216 
V L "endptr" 13 101 "*int8" `1217 
V L "base" 13 101 "sint8" `1218 
f G "strtoul" 13 101 "int16(*int8 s,*int8 endptr,sint8 base)" `1215  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 13 95 2 "FUNCTION"
C L "strtoul" 13 103 1 "*"
C L "strtoul" 13 103 1 "*"
C L "strtoul" 13 103 1 "*"
V L "s" 13 110 "*int8" `1220 
V L "endptr" 13 110 "*int8" `1221 
f G "strtof" 13 110 "float(*int8 s,*int8 endptr)" `1219  "provided for compatibility"
D G "strtof48" 13 116 "(s,e) strtof(s, e)"
D G "strtod" 13 117 "(s,e) strtof(s, e)"
C L "strtof" 13 103 1 "FUNCTION"
C L "strtof" 13 120 1 "*"
D G "atof" 13 124 "(s)   strtof(s, 0)"
C L "strtof" 13 120 1 "FUNCTION"
C L "strtof" 13 143 1 "*"
C L "strtof" 13 143 1 "*"
C L "strtof" 13 143 1 "*"
V L "s" 13 149 "*int8" `1223 
f G "atoe" 13 149 "float(*int8 s)" `1222  "Pseudo-random sequence generation functions"
C L "atoe" 13 143 1 "FUNCTION"
C L "atoe" 13 160 1 "*"
C L "atoe" 13 160 1 "*"
C L "atoe" 13 160 1 "*"
C L "atoe" 13 160 1 "*"
C L "atoe" 13 160 1 "*"
f G "rand" 13 169 "int16()" `1224  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 13 171 1 "*"
C L "rand" 13 171 1 "*"
C L "rand" 13 171 1 "*"
C L "rand" 13 171 1 "*"
C L "rand" 13 171 1 "*"
C L "rand" 13 171 1 "*"
C L "rand" 13 171 1 "*"
C L "rand" 13 171 1 "*"
C L "rand" 13 171 1 "*"
C L "rand" 13 171 1 "*"
C L "rand" 13 171 1 "*"
C L "rand" 13 171 1 "*"
C L "rand" 13 171 1 "*"
C L "rand" 13 171 1 "*"
C L "rand" 13 171 1 "*"
V L "seed" 13 191 "int32" `1226 
f G "srand" 13 191 "void(int32 seed)" `1225  "Memory management functions"
C L "srand" 13 171 3 "FUNCTION"
V L "string" 13 205 "*int8" `1228 
f G "system" 13 205 "sint8(*int8 string)" `1227  "Searching and sorting utilities"
C L "system" 13 171 1 "FUNCTION"
C L "system" 13 211 1 "*"
C L "system" 13 211 1 "*"
C L "system" 13 211 1 "*"
C L "system" 13 211 1 "*"
C L "system" 13 211 1 "*"
C L "system" 13 211 1 "*"
C L "system" 13 211 1 "*"
C L "system" 13 211 1 "*"
C L "system" 13 211 1 "*"
C L "system" 13 211 1 "*"
C L "system" 13 211 4 "*"
C L "system" 13 229 1 "*"
C L "system" 13 229 1 "*"
C L "system" 13 229 1 "*"
C L "system" 13 229 1 "*"
C L "system" 13 229 1 "*"
C L "system" 13 229 1 "*"
C L "system" 13 229 1 "*"
C L "system" 13 229 1 "*"
D G "labs" 13 249 "abs"
V L "numer" 13 251 "sint8" `1230 
V L "denom" 13 251 "sint8" `1231 
f G "div" 13 251 "div_t(sint8 numer,sint8 denom)" `1229 
V L "numer" 13 252 "sint16" `1233 
V L "denom" 13 252 "sint16" `1234 
f G "ldiv" 13 252 "ldiv_t(sint16 numer,sint16 denom)" `1232  "Multibyte character functions"
C L "ldiv" 13 229 4 "FUNCTION"
C L "ldiv" 11 2 7 "FUNCTION"
C L "ldiv" 10 2 7 "FUNCTION"
V L "numer" 13 274 "sint8" `1230 
V L "denom" 13 274 "sint8" `1237 
F G "div" 13 275 "div_t(sint8 numer,sint8 denom)" `1229 
V L "val" 13 276 "div_t" `1235 
V L "numer" 13 282 "sint16" `1233 
V L "denom" 13 282 "sint16" `1244 
F G "ldiv" 13 283 "ldiv_t(sint16 numer,sint16 denom)" `1232 
V L "val" 13 284 "ldiv_t" `1242 
V L "s" 13 361 "*int8" `1250 
F G "atoe" 13 362 "float(*int8 s)" `1222 
V L "pow10" 13 363 "float" `1249 
V L "result" 13 364 "float" `1250 
V L "sign" 13 365 "int8" `1251 
V L "expsign" 13 366 "int8" `1252 
V L "c" 13 367 "int8" `1253 
V L "ptr" 13 368 "int8" `1254 
V L "i" 13 369 "int8" `1255 
V L "exp" 13 370 "float" `1256 
V L "expcnt" 13 371 "int8" `1257 
C L "atoe" 13 397 1 "FUNCTION"
V L "s" 13 429 "*int8" `1270 
F G "atoi" 13 430 "sint8(*int8 s)" `1201 
V L "result" 13 431 "sint8" `1269 
V L "sign" 13 432 "int8" `1270 
V L "base" 13 432 "int8" `1271 
V L "index" 13 432 "int8" `1272 
V L "c" 13 433 "int8" `1273 
C L "atoi" 13 397 1 "FUNCTION"
C L "atoi" 13 397 1 "FUNCTION"
C L "atoi" 13 397 1 "FUNCTION"
C L "atoi" 13 397 1 "FUNCTION"
C L "atoi" 13 397 1 "FUNCTION"
C L "atoi" 13 397 1 "FUNCTION"
V L "s" 13 498 "*int8" `1275 
F G "atol" 13 499 "sint16(*int8 s)" `1209 
V L "result" 13 500 "sint16" `1274 
V L "sign" 13 501 "int8" `1275 
V L "base" 13 501 "int8" `1276 
V L "index" 13 501 "int8" `1277 
V L "c" 13 502 "int8" `1278 
C L "atol" 13 397 1 "FUNCTION"
C L "atol" 13 397 1 "FUNCTION"
C L "atol" 13 397 1 "FUNCTION"
C L "atol" 13 397 1 "FUNCTION"
C L "mult_with10" 13 397 1 "FUNCTION"
V L "num" 13 565 "int32" `1280 
F G "mult_with10" 13 566 "sint32(int32 num)" `1279 
V L "s" 13 571 "*int8" `1282 
F G "atoi32" 13 572 "sint32(*int8 s)" `1203 
V L "result" 13 573 "sint32" `1281 
V L "sign" 13 574 "int8" `1282 
V L "base" 13 574 "int8" `1283 
V L "index" 13 574 "int8" `1284 
V L "c" 13 575 "int8" `1285 
C L "atoi32" 13 397 1 "FUNCTION"
C L "atoi32" 13 397 1 "FUNCTION"
C L "atoi32" 13 397 1 "FUNCTION"
C L "atoi32" 13 397 1 "FUNCTION"
C L "atoi32" 13 397 1 "FUNCTION"
V L "num" 13 770 "sint32" `1206 
V L "base" 13 770 "int8" `1207 
V L "s" 13 770 "*int8" `1289 
F G "itoa" 13 771 "*int8(sint32 num,int8 base,*int8 s)" `1205 
V L "temp" 13 772 "int32" `1286 
V L "i" 13 773 "int8" `1287 
V L "sign" 13 773 "int8" `1288 
V L "cnt" 13 773 "int8" `1289 
V L "c" 13 774 "int8" `1290 
C L "itoa" 13 397 1 "FUNCTION"
C L "itoa" 13 397 1 "FUNCTION"
C L "itoa" 13 397 1 "FUNCTION"
C L "itoa" 13 397 1 "FUNCTION"
C L "itoa" 13 397 1 "FUNCTION"
V L "s" 13 885 "*int8" `1220 
V L "endptr" 13 885 "*int8" `1299 
F G "strtof" 13 886 "float(*int8 s,*int8 endptr)" `1219 
V L "pow10" 13 887 "float" `1297 
V L "result" 13 888 "float" `1298 
V L "skip" 13 889 "int1" `1299 
V L "sign" 13 889 "int1" `1300 
V L "point" 13 889 "int1" `1301 
V L "c" 13 890 "int8" `1302 
V L "ptr" 13 891 "int8" `1303 
V L "s" 13 1103 "*int8" `1216 
V L "endptr" 13 1103 "*int8" `1217 
V L "base" 13 1103 "sint8" `1308 
F G "strtoul" 13 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `1215 
V L "sc" 13 1105 "*int8" `1305 
V L "s1" 13 1105 "*int8" `1306 
V L "sd" 13 1105 "*int8" `1307 
V L "x" 13 1106 "int16" `1308 
V L "sign" 13 1107 "int8" `1309 
V L "digits" 13 1108 "int8[1]" `1310 
C L "strtoul" 13 397 1 "FUNCTION"
C L "strtoul" 13 397 1 "FUNCTION"
C L "strtoul" 13 397 1 "FUNCTION"
V L "s" 13 1165 "*int8" `1212 
V L "endptr" 13 1165 "*int8" `1213 
V L "base" 13 1165 "sint8" `1315 
F G "strtol" 13 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `1211 
V L "sc" 13 1167 "*int8" `1312 
V L "s1" 13 1167 "*int8" `1313 
V L "sd" 13 1167 "*int8" `1314 
V L "x" 13 1168 "sint16" `1315 
V L "sign" 13 1169 "int8" `1316 
V L "digits" 13 1170 "int8[1]" `1317 
C L "strtol" 13 397 1 "FUNCTION"
C L "strtol" 13 397 1 "FUNCTION"
C L "strtol" 13 397 1 "FUNCTION"
V L "string" 13 1228 "*int8" `1320 
F G "system" 13 1229 "sint8(*int8 string)" `1227 
V L "s" 13 1233 "*int8" `1320 
V L "n" 13 1233 "int16" `1321 
F G "mblen" 13 1234 "int8(*int8 s,int16 n)" `1319 
V L "pwc" 13 1238 "*int8" `1323 
V L "s" 13 1238 "*int8" `1324 
V L "n" 13 1238 "int16" `1325 
F G "mbtowc" 13 1239 "int8(*int8 pwc,*int8 s,int16 n)" `1322 
V L "s" 13 1244 "*int8" `1327 
V L "wchar" 13 1244 "int8" `1328 
F G "wctomb" 13 1245 "int8(*int8 s,int8 wchar)" `1326 
V L "pwcs" 13 1250 "*int8" `1330 
V L "s" 13 1250 "*int8" `1331 
V L "n" 13 1250 "int16" `1332 
F G "mbstowcs" 13 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `1329 
V L "s" 13 1256 "*int8" `1334 
V L "pwcs" 13 1256 "*int8" `1335 
V L "n" 13 1256 "int16" `1336 
F G "wcstombs" 13 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `1333 
V G "_Randseed" 13 1266 "int32" `1337 
F G "rand" 13 1269 "int16()" `1224 
V L "seed" 13 1274 "int32" `1342 
F G "srand" 13 1275 "void(int32 seed)" `1225 
V L "p1" 13 1284 "*int8" `1342 
V L "p2" 13 1284 "*int8" `1343 
T G "*_Cmpfun" 13 1284 "sint8(*int8 p1,*int8 p2)" `1341 
V L "qdata" 13 1291 "*int8" `1346 
V L "qitems" 13 1291 "int8" `1347 
V L "qsize" 13 1291 "int8" `1348 
V L "cmp" 13 1291 "_Cmpfun" `1349 
F G "qsort" 13 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `1345 
V L "m" 13 1292 "int8" `1350 
V L "j" 13 1292 "int8" `1351 
V L "i" 13 1292 "int8" `1352 
V L "l" 13 1292 "int8" `1353 
V L "done" 13 1293 "int1" `1354 
V L "t" 13 1294 "int8[16]" `1355 
V L "key" 13 1319 "*int8" `1358 
V L "base" 13 1319 "*int8" `1359 
V L "num" 13 1319 "int16" `1360 
V L "width" 13 1319 "int16" `1361 
V L "cmp" 13 1319 "_Cmpfun" `1362 
F G "bsearch" 13 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `1357 
V L "p" 13 1321 "*int8" `1363 
V L "q" 13 1321 "*int8" `1364 
V L "n" 13 1322 "int16" `1365 
V L "pivot" 13 1323 "int16" `1366 
V L "val" 13 1324 "sint8" `1367 
C L "bsearch" 13 397 1 "FUNCTION"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
D G "HELPERS_H" 15 44 ""
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 2 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
V L "Dest" 15 53 "*int8" `1372 
V L "BufferLen" 15 53 "int8" `1373 
f G "ReadStringUART" 15 53 "int8(*int8 Dest,int8 BufferLen)" `1371 
V L "AsciiChars" 15 54 "WORD_VAL" `1375 
f G "hexatob" 15 54 "int8(WORD_VAL AsciiChars)" `1374 
V L "b" 15 55 "int8" `1377 
f G "btohexa_high" 15 55 "int8(int8 b)" `1376 
V L "b" 15 56 "int8" `1379 
f G "btohexa_low" 15 56 "int8(int8 b)" `1378 
V L "v" 15 58 "WORD_VAL" `1381 
f G "swaps" 15 58 "WORD(WORD_VAL v)" `1380 
V L "v" 15 59 "DWORD_VAL" `1383 
f G "swapl" 15 59 "DWORD(DWORD_VAL v)" `1382 
V L "buffer" 15 61 "*int8" `1385 
V L "len" 15 61 "WORD" `1386 
f G "CalcIPChecksum" 15 61 "WORD(*int8 buffer,WORD len)" `1384 
V L "len" 15 62 "WORD" `1388 
f G "CalcIPBufferChecksum" 15 62 "WORD(WORD len)" `1387  "*                  MAC Module Defs for Microchip Stack"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
C L "CalcIPBufferChecksum" 16 1 1 "*"
D G "MAC_H" 16 41 ""
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 2 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
C L "CalcIPBufferChecksum" 17 1 1 "*"
D G "MAC_IP" 16 45 " (0u)"
D G "MAC_ARP" 16 46 " (0x6u)"
D G "MAC_UNKNOWN" 16 47 " (0x0ffu)"
D G "INVALID_BUFFER" 16 49 " (0xffu)"
C L "CalcIPBufferChecksum" 16 51 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
C L "CalcIPBufferChecksum" 18 1 1 "*"
D G "ENC28J60_H" 18 42 ""
T G "TXSTATUS" 18 68 "{int8[7] v}" `1413 
T G "RXSTATUS" 18 91 "{int8[4] v}" `1435  "* Register locations"
D G "ERDPTL" 18 97 "0x00"
D G "ERDPTH" 18 98 "0x01"
D G "EWRPTL" 18 99 "0x02"
D G "EWRPTH" 18 100 "0x03"
D G "ETXSTL" 18 101 "0x04"
D G "ETXSTH" 18 102 "0x05"
D G "ETXNDL" 18 103 "0x06"
D G "ETXNDH" 18 104 "0x07"
D G "ERXSTL" 18 105 "0x08"
D G "ERXSTH" 18 106 "0x09"
D G "ERXNDL" 18 107 "0x0A"
D G "ERXNDH" 18 108 "0x0B"
D G "ERXRDPTL" 18 109 "0x0C"
D G "ERXRDPTH" 18 110 "0x0D"
D G "ERXWRPTL" 18 111 "0x0E"
D G "ERXWRPTH" 18 112 "0x0F"
D G "EDMASTL" 18 113 "0x10"
D G "EDMASTH" 18 114 "0x11"
D G "EDMANDL" 18 115 "0x12"
D G "EDMANDH" 18 116 "0x13"
D G "EDMADSTL" 18 117 "0x14"
D G "EDMADSTH" 18 118 "0x15"
D G "EDMACSL" 18 119 "0x16"
D G "EDMACSH" 18 120 "0x17"
D G "EIE" 18 124 "0x1B"
D G "EIR" 18 125 "0x1C"
D G "ESTAT" 18 126 "0x1D"
D G "ECON2" 18 127 "0x1E"
D G "ECON1" 18 128 "0x1F"
D G "EHT0" 18 131 "0x100"
D G "EHT1" 18 132 "0x101"
D G "EHT2" 18 133 "0x102"
D G "EHT3" 18 134 "0x103"
D G "EHT4" 18 135 "0x104"
D G "EHT5" 18 136 "0x105"
D G "EHT6" 18 137 "0x106"
D G "EHT7" 18 138 "0x107"
D G "EPMM0" 18 139 "0x108"
D G "EPMM1" 18 140 "0x109"
D G "EPMM2" 18 141 "0x10A"
D G "EPMM3" 18 142 "0x10B"
D G "EPMM4" 18 143 "0x10C"
D G "EPMM5" 18 144 "0x10D"
D G "EPMM6" 18 145 "0x10E"
D G "EPMM7" 18 146 "0x10F"
D G "EPMCSL" 18 147 "0x110"
D G "EPMCSH" 18 148 "0x111"
D G "EPMOL" 18 151 "0x114"
D G "EPMOH" 18 152 "0x115"
D G "ERXFCON" 18 155 "0x118"
D G "EPKTCNT" 18 156 "0x119"
D G "MACON1" 18 165 "0x200"
D G "MACON2" 18 166 "0x201"
D G "MACON3" 18 168 "0x202"
D G "MACON4" 18 169 "0x203"
D G "MABBIPG" 18 170 "0x204"
D G "MAIPGL" 18 172 "0x206"
D G "MAIPGH" 18 173 "0x207"
D G "MACLCON1" 18 174 "0x208"
D G "MACLCON2" 18 175 "0x209"
D G "MAMXFLL" 18 176 "0x20A"
D G "MAMXFLH" 18 177 "0x20B"
D G "MICMD" 18 184 "0x212"
D G "MIREGADR" 18 186 "0x214"
D G "MIWRL" 18 188 "0x216"
D G "MIWRH" 18 189 "0x217"
D G "MIRDL" 18 190 "0x218"
D G "MIRDH" 18 191 "0x219"
D G "MAADR5" 18 200 "0x300"
D G "MAADR6" 18 201 "0x301"
D G "MAADR3" 18 202 "0x302"
D G "MAADR4" 18 203 "0x303"
D G "MAADR1" 18 204 "0x304"
D G "MAADR2" 18 205 "0x305"
D G "EBSTSD" 18 206 "0x306"
D G "EBSTCON" 18 207 "0x307"
D G "EBSTCSL" 18 208 "0x308"
D G "EBSTCSH" 18 209 "0x309"
D G "MISTAT" 18 210 "0x30A"
D G "EREVID" 18 218 "0x312"
D G "ECOCON" 18 221 "0x315"
D G "EFLOCON" 18 223 "0x317"
D G "EPAUSL" 18 224 "0x318"
D G "EPAUSH" 18 225 "0x319"
C L "CalcIPBufferChecksum" 18 1 7 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
T G "REG" 18 406 "{int8 Val}" `1576  "* PH Register Locations"
D G "PHCON1" 18 412 "0x00"
D G "PHSTAT1" 18 413 "0x01"
D G "PHID1" 18 414 "0x02"
D G "PHID2" 18 415 "0x03"
D G "PHCON2" 18 416 "0x10"
D G "PHSTAT2" 18 417 "0x11"
D G "PHIE" 18 418 "0x12"
D G "PHIR" 18 419 "0x13"
D G "PHLCON" 18 420 "0x14"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
C L "CalcIPBufferChecksum" 18 1 1 "FUNCTION"
T G "PHYREG" 18 546 "{int16 Val,WORD_VAL VAL}" `1684  "* Individual Register Bits"
D G "EIE_INTIE" 18 555 " (1<<7)"
D G "EIE_PKTIE" 18 556 " (1<<6)"
D G "EIE_DMAIE" 18 557 " (1<<5)"
D G "EIE_LINKIE" 18 558 " (1<<4)"
D G "EIE_TXIE" 18 559 " (1<<3)"
D G "EIE_TXERIE" 18 560 " (1<<1)"
D G "EIE_RXERIE" 18 561 " (1)"
D G "EIR_PKTIF" 18 564 " (1<<6)"
D G "EIR_DMAIF" 18 565 " (1<<5)"
D G "EIR_LINKIF" 18 566 " (1<<4)"
D G "EIR_TXIF" 18 567 " (1<<3)"
D G "EIR_TXERIF" 18 568 " (1<<1)"
D G "EIR_RXERIF" 18 569 " (1)"
D G "ESTAT_INT" 18 572 " (1<<7)"
D G "ESTAT_BUFFER" 18 573 " (1<<6)"
D G "ESTAT_LATECOL" 18 574 " (1<<4)"
D G "ESTAT_RXBUSY" 18 575 " (1<<2)"
D G "ESTAT_TXABRT" 18 576 " (1<<1)"
D G "ESTAT_CLKRDY" 18 577 " (1)"
D G "ECON2_AUTOINC" 18 580 " (1<<7)"
D G "ECON2_PKTDEC" 18 581 " (1<<6)"
D G "ECON2_PWRSV" 18 582 " (1<<5)"
D G "ECON2_VRPS" 18 583 " (1<<3)"
D G "ECON1_TXRST" 18 586 " (1<<7)"
D G "ECON1_RXRST" 18 587 " (1<<6)"
D G "ECON1_DMAST" 18 588 " (1<<5)"
D G "ECON1_CSUMEN" 18 589 " (1<<4)"
D G "ECON1_TXRTS" 18 590 " (1<<3)"
D G "ECON1_RXEN" 18 591 " (1<<2)"
D G "ECON1_BSEL1" 18 592 " (1<<1)"
D G "ECON1_BSEL0" 18 593 " (1)"
D G "ERXFCON_UCEN" 18 596 " (1<<7)"
D G "ERXFCON_ANDOR" 18 597 " (1<<6)"
D G "ERXFCON_CRCEN" 18 598 " (1<<5)"
D G "ERXFCON_PMEN" 18 599 " (1<<4)"
D G "ERXFCON_MPEN" 18 600 " (1<<3)"
D G "ERXFCON_HTEN" 18 601 " (1<<2)"
D G "ERXFCON_MCEN" 18 602 " (1<<1)"
D G "ERXFCON_BCEN" 18 603 " (1)"
D G "MACON1_TXPAUS" 18 606 " (1<<3)"
D G "MACON1_RXPAUS" 18 607 " (1<<2)"
D G "MACON1_PASSALL" 18 608 " (1<<1)"
D G "MACON1_MARXEN" 18 609 " (1)"
D G "MACON3_PADCFG2" 18 612 " (1<<7)"
D G "MACON3_PADCFG1" 18 613 " (1<<6)"
D G "MACON3_PADCFG0" 18 614 " (1<<5)"
D G "MACON3_TXCRCEN" 18 615 " (1<<4)"
D G "MACON3_PHDRLEN" 18 616 " (1<<3)"
D G "MACON3_HFRMEN" 18 617 " (1<<2)"
D G "MACON3_FRMLNEN" 18 618 " (1<<1)"
D G "MACON3_FULDPX" 18 619 " (1)"
D G "MACON4_DEFER" 18 622 " (1<<6)"
D G "MACON4_BPEN" 18 623 " (1<<5)"
D G "MACON4_NOBKOFF" 18 624 " (1<<4)"
D G "MICMD_MIISCAN" 18 628 " (1<<1)"
D G "MICMD_MIIRD" 18 629 " (1)"
D G "EBSTCON_PSV2" 18 632 " (1<<7)"
D G "EBSTCON_PSV1" 18 633 " (1<<6)"
D G "EBSTCON_PSV0" 18 634 " (1<<5)"
D G "EBSTCON_PSEL" 18 635 " (1<<4)"
D G "EBSTCON_TMSEL1" 18 636 " (1<<3)"
D G "EBSTCON_TMSEL0" 18 637 " (1<<2)"
D G "EBSTCON_TME" 18 638 " (1<<1)"
D G "EBSTCON_BISTST" 18 639 " (1)"
D G "MISTAT_NVALID" 18 642 " (1<<2)"
D G "MISTAT_SCAN" 18 643 " (1<<1)"
D G "MISTAT_BUSY" 18 644 " (1)"
D G "ECOCON_COCON2" 18 647 " (1<<2)"
D G "ECOCON_COCON1" 18 648 " (1<<1)"
D G "ECOCON_COCON0" 18 649 " (1)"
D G "EFLOCON_FULDPXS" 18 652 " (1<<2)"
D G "EFLOCON_FCEN1" 18 653 " (1<<1)"
D G "EFLOCON_FCEN0" 18 654 " (1)"
D G "PHCON1_PRST" 18 661 " (1ul<<15)"
D G "PHCON1_PLOOPBK" 18 662 " (1ul<<14)"
D G "PHCON1_PPWRSV" 18 663 " (1ul<<11)"
D G "PHCON1_PDPXMD" 18 664 " (1ul<<8)"
D G "PHSTAT1_PFDPX" 18 667 " (1ul<<12)"
D G "PHSTAT1_PHDPX" 18 668 " (1ul<<11)"
D G "PHSTAT1_LLSTAT" 18 669 " (1ul<<2)"
D G "PHSTAT1_JBSTAT" 18 670 " (1ul<<1)"
D G "PHID2_PID24" 18 673 " (1ul<<15)"
D G "PHID2_PID23" 18 674 " (1ul<<14)"
D G "PHID2_PID22" 18 675 " (1ul<<13)"
D G "PHID2_PID21" 18 676 " (1ul<<12)"
D G "PHID2_PID20" 18 677 " (1ul<<11)"
D G "PHID2_PID19" 18 678 " (1ul<<10)"
D G "PHID2_PPN5" 18 679 " (1ul<<9)"
D G "PHID2_PPN4" 18 680 " (1ul<<8)"
D G "PHID2_PPN3" 18 681 " (1ul<<7)"
D G "PHID2_PPN2" 18 682 " (1ul<<6)"
D G "PHID2_PPN1" 18 683 " (1ul<<5)"
D G "PHID2_PPN0" 18 684 " (1ul<<4)"
D G "PHID2_PREV3" 18 685 " (1ul<<3)"
D G "PHID2_PREV2" 18 686 " (1ul<<2)"
D G "PHID2_PREV1" 18 687 " (1ul<<1)"
D G "PHID2_PREV0" 18 688 " (1ul)"
D G "PHCON2_FRCLNK" 18 691 " (1ul<<14)"
D G "PHCON2_TXDIS" 18 692 " (1ul<<13)"
D G "PHCON2_JABBER" 18 693 " (1ul<<10)"
D G "PHCON2_HDLDIS" 18 694 " (1ul<<8)"
D G "PHSTAT2_TXSTAT" 18 697 " (1ul<<13)"
D G "PHSTAT2_RXSTAT" 18 698 " (1ul<<12)"
D G "PHSTAT2_COLSTAT" 18 699 " (1ul<<11)"
D G "PHSTAT2_LSTAT" 18 700 " (1ul<<10)"
D G "PHSTAT2_DPXSTAT" 18 701 " (1ul<<9)"
D G "PHSTAT2_PLRITY" 18 702 " (1ul<<5)"
D G "PHIE_PLNKIE" 18 705 " (1ul<<4)"
D G "PHIE_PGEIE" 18 706 " (1ul<<1)"
D G "PHIR_PLNKIF" 18 709 " (1ul<<4)"
D G "PHIR_PGIF" 18 710 " (1ul<<2)"
D G "PHLCON_LACFG3" 18 713 " (1ul<<11)"
D G "PHLCON_LACFG2" 18 714 " (1ul<<10)"
D G "PHLCON_LACFG1" 18 715 " (1ul<<9)"
D G "PHLCON_LACFG0" 18 716 " (1ul<<8)"
D G "PHLCON_LBCFG3" 18 717 " (1ul<<7)"
D G "PHLCON_LBCFG2" 18 718 " (1ul<<6)"
D G "PHLCON_LBCFG1" 18 719 " (1ul<<5)"
D G "PHLCON_LBCFG0" 18 720 " (1ul<<4)"
D G "PHLCON_LFRQ1" 18 721 " (1ul<<3)"
D G "PHLCON_LFRQ0" 18 722 " (1ul<<2)"
D G "PHLCON_STRCH" 18 723 " (1ul<<1)"
C L "CalcIPBufferChecksum" 16 64 1 "FUNCTION"
E G "HALF" 16 67 "0" `1686 
E G "FULL" 16 68 "1" `1687 
E G "USE_PHY" 16 69 "2" `1688 
T G "DUPLEX" 16 69 "_DUPLEX" `1689 
E G "Divide1" 16 73 "0" `1691 
E G "Divide2" 16 74 "1" `1692 
E G "Divide3" 16 75 "2" `1693 
E G "Divide4" 16 76 "3" `1694 
E G "Divide8" 16 77 "4" `1695 
T G "CLK_CONFIG" 16 77 "_CLK_CONFIG" `1696 
V L "DuplexState" 16 78 "DUPLEX" `1698 
f G "MACSetDuplex" 16 78 "void(DUPLEX DuplexState)" `1697 
V L "len" 16 79 "WORD" `1700 
f G "CalcIPBufferChecksum" 16 79 "WORD(WORD len)" `1387 
f G "MACPowerDown" 16 81 "void(WORD len)" `1699 
f G "MACPowerUp" 16 82 "void()" `1700 
V L "offset" 16 83 "WORD" `1702 
V L "len" 16 83 "WORD" `1703 
f G "MACCalcRxChecksum" 16 83 "WORD(WORD offset,WORD len)" `1701 
V L "offset" 16 84 "WORD" `1705 
V L "len" 16 84 "WORD" `1706 
f G "MACCalcTxChecksum" 16 84 "WORD(WORD offset,WORD len)" `1704 
V L "RxOffset" 16 85 "WORD" `1708 
V L "TxOffset" 16 85 "WORD" `1709 
V L "len" 16 85 "WORD" `1710 
f G "MACCopyRxToTx" 16 85 "void(WORD RxOffset,WORD TxOffset,WORD len)" `1707 
V L "Register" 16 86 "int8" `1712 
V L "Data" 16 86 "WORD" `1713 
f G "WritePHYReg" 16 86 "void(int8 Register,WORD Data)" `1711 
V L "Register" 16 87 "int8" `1715 
f G "ReadPHYReg" 16 87 "PHYREG(int8 Register)" `1714 
V L "DestMACAddr" 16 88 "MAC_ADDR" `1717 
f G "SetRXHashTableEntry" 16 88 "void(MAC_ADDR DestMACAddr)" `1716  "* Macro:           void SetLEDConfig(WORD NewConfig)"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
C L "SetRXHashTableEntry" 16 91 1 "*"
D G "SetLEDConfig" 16 139 "(NewConfig)      WritePHYReg(PHLCON, NewConfig)"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
C L "SetRXHashTableEntry" 16 142 1 "*"
D G "GetLEDConfig" 16 188 "()      ReadPHYReg(PHLCON).Val"
f G "MACInit" 16 193 "void()" `1718 
f G "MACIsLinked" 16 194 "int8()" `1719 
V L "remote" 16 196 "*MAC_ADDR" `1721 
V L "type" 16 196 "*int8" `1722 
f G "MACGetHeader" 16 196 "int8(*MAC_ADDR remote,*int8 type)" `1720 
V L "offset" 16 197 "WORD" `1724 
f G "MACSetRxBuffer" 16 197 "void(WORD offset)" `1723 
f G "MACGet" 16 198 "int8()" `1725 
V L "val" 16 199 "*int8" `1727 
V L "len" 16 199 "WORD" `1728 
f G "MACGetArray" 16 199 "WORD(*int8 val,WORD len)" `1726 
f G "MACDiscardRx" 16 200 "void()" `1729 
f G "MACGetFreeRxSize" 16 201 "WORD()" `1730 
V L "remote" 16 203 "*MAC_ADDR" `1732 
V L "type" 16 204 "int8" `1733 
V L "dataLen" 16 205 "WORD" `1734 
f G "MACPutHeader" 16 205 "void(*MAC_ADDR remote,int8 type,WORD dataLen)" `1731 
V L "HighPriority" 16 206 "int8" `1736 
f G "MACIsTxReady" 16 206 "int8(int8 HighPriority)" `1735 
V L "buffer" 16 207 "BUFFER" `1738 
V L "offset" 16 207 "WORD" `1739 
f G "MACSetTxBuffer" 16 207 "void(BUFFER buffer,WORD offset)" `1737 
V L "val" 16 208 "int8" `1741 
f G "MACPut" 16 208 "void(int8 val)" `1740 
V L "val" 16 209 "*int8" `1743 
V L "len" 16 209 "WORD" `1744 
f G "MACPutArray" 16 209 "void(*int8 val,WORD len)" `1742 
V L "buffer" 16 210 "BUFFER" `1746 
f G "MACDiscardTx" 16 210 "void(BUFFER buffer)" `1745 
f G "MACFlush" 16 211 "void()" `1747 
V L "HighPriority" 16 212 "int8" `1749 
f G "MACGetTxBuffer" 16 212 "BUFFER(int8 HighPriority)" `1748  "extern *"
V G "CurrentTxBuffer" 16 215 "BUFFER" `1750  "* Function:        BYTE hexatob(WORD_VAL AsciiChars)"
C L "MACGetTxBuffer" 14 51 1 "*"
C L "MACGetTxBuffer" 14 51 1 "*"
C L "MACGetTxBuffer" 14 51 1 "*"
C L "MACGetTxBuffer" 14 51 1 "*"
C L "MACGetTxBuffer" 14 51 1 "*"
C L "MACGetTxBuffer" 14 51 1 "*"
C L "MACGetTxBuffer" 14 51 1 "*"
V L "AsciiChars" 14 67 "WORD_VAL" `1752 
F G "hexatob" 14 68 "int8(WORD_VAL AsciiChars)" `1374  "Convert lowercase to uppercase"
C L "hexatob" 14 51 1 "FUNCTION"
C L "hexatob" 14 51 1 "FUNCTION"
C L "btohexa_high" 14 90 1 "*"
C L "btohexa_high" 14 90 1 "*"
C L "btohexa_high" 14 90 1 "*"
C L "btohexa_high" 14 90 1 "*"
C L "btohexa_high" 14 90 1 "*"
C L "btohexa_high" 14 90 1 "*"
C L "btohexa_high" 14 90 1 "*"
C L "btohexa_high" 14 90 1 "*"
C L "btohexa_high" 14 90 1 "*"
C L "btohexa_high" 14 90 1 "*"
V L "b" 14 108 "int8" `1752 
F G "btohexa_high" 14 109 "int8(int8 b)" `1376 
C L "btohexa_low" 14 114 1 "*"
C L "btohexa_low" 14 114 1 "*"
C L "btohexa_low" 14 114 1 "*"
C L "btohexa_low" 14 114 1 "*"
C L "btohexa_low" 14 114 1 "*"
C L "btohexa_low" 14 114 1 "*"
C L "btohexa_low" 14 114 1 "*"
C L "btohexa_low" 14 114 1 "*"
C L "btohexa_low" 14 114 1 "*"
C L "btohexa_low" 14 114 1 "*"
V L "b" 14 132 "int8" `1752 
F G "btohexa_low" 14 133 "int8(int8 b)" `1378 
V L "v" 14 138 "WORD_VAL" `1752 
F G "swaps" 14 139 "WORD(WORD_VAL v)" `1380 
V L "new" 14 140 "WORD_VAL" `1751 
V L "v" 14 148 "DWORD_VAL" `1753 
F G "swapl" 14 149 "DWORD(DWORD_VAL v)" `1382 
V L "new" 14 150 "DWORD_VAL" `1752 
V L "buffer" 14 160 "*int8" `1385 
V L "count" 14 160 "WORD" `1755 
F G "CalcIPChecksum" 14 161 "WORD(*int8 buffer,WORD count)" `1384 
V L "i" 14 162 "WORD" `1753 
V L "val" 14 163 "*WORD" `1754 
V L "tempSum" 14 173 "{DWORD Val}" `1761 
V L "sum" 14 173 "{DWORD Val}" `1762 
C G "" 14 200 1 "*"
C G "" 14 200 1 "*"
C G "" 14 200 1 "*"
C G "" 14 200 1 "*"
C G "" 14 200 1 "*"
C G "" 14 200 1 "*"
C G "" 14 200 1 "*"
C G "" 14 200 1 "*"
C G "" 14 200 1 "*"
C G "" 14 200 7 "*"
C G "" 14 258 8 "*t"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
C G "" 19 1 1 "*"
D G "TICK_INCLUDE" 19 44 ""
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 2 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
D G "TICK_H" 20 43 ""
T G "TICKTYPE" 20 45 "int16" `1763  "* This value is used by TCP to implement timeout actions."
D G "TICKS_PER_SECOND" 20 50 "12" "10 original value (MiE)"
D G "CYCLES_PER_TICKS_PER_SECOND" 20 57 "getenv("CLOCK")/(4 * 16 * TICKS_PER_SECOND)"
D G "TICK_COUNTER" 20 68 "0xFFFF-CYCLES_PER_TICKS_PER_SECOND"
D G "TICK_SECOND" 20 82 "TICKS_PER_SECOND"
D G "TickGetDiff" 20 85 "(a,b)       ((TICKTYPE)(a < b) ? (((TICKTYPE)0xffff - b) + a + 1) : (a - b))"
C L "TickInit" 20 88 1 "*"
C L "TickInit" 20 88 1 "*"
C L "TickInit" 20 88 1 "*"
C L "TickInit" 20 88 1 "*"
C L "TickInit" 20 88 1 "*"
C L "TickInit" 20 88 1 "*"
C L "TickInit" 20 88 1 "*"
f G "TickInit" 20 103 "void()" `1764  "* Function:        TICK TickGet(void)"
C L "TickInit" 20 107 1 "*"
C L "TickInit" 20 107 1 "*"
C L "TickInit" 20 107 1 "*"
C L "TickInit" 20 107 1 "*"
C L "TickInit" 20 107 1 "*"
C L "TickInit" 20 107 1 "*"
f G "TickGet" 20 122 "TICKTYPE()" `1765  "* Function:        void TickUpdate(void)"
C L "TickGet" 20 125 1 "*"
C L "TickGet" 20 125 1 "*"
C L "TickGet" 20 125 1 "*"
C L "TickGet" 20 125 1 "*"
C L "TickGet" 20 125 1 "*"
C L "TickGet" 20 125 1 "*"
C L "TickGet" 20 125 1 "*"
C L "TickGet" 20 125 2 "*"
V G "TickCount" 19 50 "TICKTYPE" `1766 
C L "TickGet" 19 50 1 "FUNCTION"
C L "TickGet" 19 53 1 "*"
C L "TickGet" 19 53 1 "*"
C L "TickGet" 19 53 1 "*"
C L "TickGet" 19 53 1 "*"
C L "TickGet" 19 53 1 "*"
C L "TickGet" 19 53 1 "*"
C L "TickGet" 19 53 1 "*"
F G "TickInit" 19 69 "void()" `1764 
C L "TickGet" 19 78 1 "*"
C L "TickGet" 19 78 1 "*"
C L "TickGet" 19 78 1 "*"
C L "TickGet" 19 78 1 "*"
C L "TickGet" 19 78 1 "*"
C L "TickGet" 19 78 1 "*"
C L "TickGet" 19 78 1 "*"
F G "TickGet" 19 94 "TICKTYPE()" `1765 
V L "ret" 19 95 "int16" `1767 
C G "" 19 102 1 "*"
C G "" 19 102 1 "*"
C G "" 19 102 1 "*"
C G "" 19 102 1 "*"
C G "" 19 102 1 "*"
C G "" 19 102 1 "*"
C G "" 19 102 1 "*"
V G "second_counter" 19 117 "int8" `1768 
V G "second_counter_intermediate" 19 118 "int8" `1769 
F G "Tick_Isr" 19 127 "void()" `1770 
C L "Tick_Isr" 19 102 1 "FUNCTION"
C L "Tick_Isr" 19 102 1 "FUNCTION"
C L "Tick_Isr" 19 102 1 "FUNCTION"
D G "debug_stack" 6 74 "(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z)"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
C G "" 21 1 1 "*"
D G "THIS_IS_MAC_LAYER" 21 47 ""
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 2 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 22 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 23 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
C G "" 18 1 1 "*"
D G "debug_mac" 21 61 ""
D G "ENC_MAC_USE_SPI" 21 78 "FALSE" "due to an errata in the ENC28J60, you should always use HW SPI to assure that SPI clock is over 8MHz!"
D G "mac_enc_spi_tris_init" 21 80 "()"
D G "SPISelectEthernet" 21 82 "()     output_low(PIN_ENC_MAC_CS)" "changed by ccs"
D G "SPIUnselectEthernet" 21 83 "()   output_high(PIN_ENC_MAC_CS)" "changed by ccs"
D G "HALF_DUPLEX" 21 104 ""
D G "LOW" 21 109 "(a)                (a & 0xFF)"
D G "HIGH" 21 110 "(a)             ((a>>8) & 0xFF)"
D G "RAMSIZE" 21 113 "8192ul"
D G "TXSTART" 21 114 " (RAMSIZE-(MAC_TX_BUFFER_COUNT * (MAC_TX_BUFFER_SIZE + 8ul)))"
D G "RXSTART" 21 115 " (0ul)" "Should be an even memory address"
D G "RXSTOP" 21 116 " ((TXSTART-2ul) | 0x0001ul)" "Odd for errata workaround"
D G "RXSIZE" 21 117 " (RXSTOP-RXSTART+1ul)"
D G "WCR" 21 120 " (0b010<<5)" "Write Control Register command"
D G "BFS" 21 121 " (0b100<<5)" "Bit Field Set command"
D G "BFC" 21 122 " (0b101<<5)" "Bit Field Clear command"
D G "RCR" 21 123 " (0b000<<5)" "Read Control Register command"
D G "RBM" 21 124 " ((0b001<<5) | 0x1A)" "Read Buffer Memory command"
D G "WBM" 21 125 " ((0b011<<5) | 0x1A)" "Write Buffer Memory command"
D G "SR" 21 126 " ((0b111<<5) | 0x1F)" "System Reset command does not use an address."
D G "ETHER_IP" 21 129 " (0x00u)"
D G "ETHER_ARP" 21 130 " (0x06u)"
D G "MAXFRAMEC" 21 132 " (1500u+sizeof(ETHER_HEADER)+4u)"
T G "ETHER_HEADER" 21 141 "{MAC_ADDR DestMACAddr,MAC_ADDR SourceMACAddr,WORD_VAL Type}" `1775  "A header appended at the start of all RX frames by the hardware"
T G "ENC_PREAMBLE" 21 152 "{int16 NextPacketPointer,RXSTATUS StatusVector,MAC_ADDR DestMACAddr,MAC_ADDR SourceMACAddr,WORD_VAL Type}" `1782 
T G "DATA_BUFFER" 21 163 "{WORD_VAL StartAddress,WORD_VAL EndAddress}" `1790 
V L "DuplexState" 21 165 "DUPLEX" `1792 
f G "MACSetDuplex" 21 165 "void(DUPLEX DuplexState)" `1697  "Prototypes of functions intended for MAC layer use only."
V L "Register" 21 168 "WORD" `1792 
f G "BankSel" 21 168 "void(WORD Register)" `1791 
V L "Address" 21 169 "int8" `1794 
f G "ReadETHReg" 21 169 "REG(int8 Address)" `1793 
V L "Address" 21 170 "int8" `1796 
f G "ReadMACReg" 21 170 "REG(int8 Address)" `1795 
V L "Address" 21 171 "int8" `1798 
V L "Data" 21 171 "int8" `1799 
f G "WriteReg" 21 171 "void(int8 Address,int8 Data)" `1797 
V L "Address" 21 172 "int8" `1801 
V L "Data" 21 172 "int8" `1802 
f G "BFCReg" 21 172 "void(int8 Address,int8 Data)" `1800 
V L "Address" 21 173 "int8" `1804 
V L "Data" 21 173 "int8" `1805 
f G "BFSReg" 21 173 "void(int8 Address,int8 Data)" `1803 
f G "SendSystemReset" 21 174 "void()" `1806  "static void GetRegs(void);"
C L "SendSystemReset" 21 85 3 "FUNCTION"
V G "NextPacketLocation" 21 193 "WORD_VAL" `1807 
V G "CurrentPacketLocation" 21 194 "WORD_VAL" `1808 
V G "WasDiscarded" 21 195 "BOOL" `1809 
V G "ENCRevID" 21 196 "int8" `1810  "ENCSPIInit() added by CCS."
C L "SendSystemReset" 21 85 1 "FUNCTION"
F G "ENCSPIInit" 21 201 "void()" `1811  "MCP_RESET_TRIS = 0;"
C L "ENCSPIInit" 21 85 1 "FUNCTION"
C L "ENCSPIInit" 21 85 5 "FUNCTION"
C L "ENCSPIInit" 21 85 1 "FUNCTION"
C L "ENCSPIXfer" 21 85 2 "FUNCTION"
V L "c" 21 224 "int8" `1813 
F G "ENCSPIXfer" 21 225 "int8(int8 c)" `1812 
V L "i" 21 229 "int8" `1814 
V L "in" 21 229 "int8" `1815 
C L "MACInit" 21 240 1 "*"
C L "MACInit" 21 240 1 "*"
C L "MACInit" 21 240 1 "*"
C L "MACInit" 21 240 1 "*"
C L "MACInit" 21 240 1 "*"
C L "MACInit" 21 240 1 "*"
C L "MACInit" 21 240 1 "*"
C L "MACInit" 21 240 1 "*"
C L "MACInit" 21 240 1 "*"
F G "MACInit" 21 258 "void()" `1718 
V L "i" 21 259 "int8" `1816 
C L "MACInit" 21 240 4 "FUNCTION"
C L "MACInit" 21 240 1 "FUNCTION"
C L "MACInit" 21 240 2 "FUNCTION"
C L "MACInit" 21 240 1 "FUNCTION"
C L "MACInit" 21 240 1 "FUNCTION"
C L "MACInit" 21 240 1 "FUNCTION"
C L "MACInit" 21 240 7 "FUNCTION"
C L "MACInit" 21 240 1 "FUNCTION"
C L "MACInit" 21 240 1 "FUNCTION"
C L "MACInit" 21 240 3 "FUNCTION"
C L "MACInit" 21 240 3 "FUNCTION"
C L "MACInit" 21 240 3 "FUNCTION"
C L "MACInit" 21 240 1 "FUNCTION"
C L "MACInit" 21 240 1 "FUNCTION"
C L "MACInit" 21 240 1 "FUNCTION"
C L "MACInit" 21 240 2 "FUNCTION"
C L "MACInit" 21 240 1 "FUNCTION"
C L "MACInit" 21 240 1 "FUNCTION"
C L "MACInit" 21 240 2 "FUNCTION"
C L "MACIsLinked" 21 240 1 "FUNCTION"
C L "MACIsLinked" 21 387 1 "*"
C L "MACIsLinked" 21 387 1 "*"
C L "MACIsLinked" 21 387 1 "*"
C L "MACIsLinked" 21 387 1 "*"
C L "MACIsLinked" 21 387 1 "*"
C L "MACIsLinked" 21 387 1 "*"
C L "MACIsLinked" 21 387 1 "*"
C L "MACIsLinked" 21 387 1 "*"
C L "MACIsLinked" 21 387 1 "*"
C L "MACIsLinked" 21 387 1 "*"
C L "MACIsLinked" 21 387 1 "*"
F G "MACIsLinked" 21 407 "int8()" `1719  "LLSTAT is a latching low link status bit.  Therefore, if the link"
C L "MACIsLinked" 21 387 4 "FUNCTION"
C L "MACIsTxReady" 21 416 1 "*"
C L "MACIsTxReady" 21 416 1 "*"
C L "MACIsTxReady" 21 416 1 "*"
C L "MACIsTxReady" 21 416 1 "*"
C L "MACIsTxReady" 21 416 1 "*"
C L "MACIsTxReady" 21 416 1 "*"
C L "MACIsTxReady" 21 416 1 "*"
C L "MACIsTxReady" 21 416 1 "*"
C L "MACIsTxReady" 21 416 1 "*"
C L "MACIsTxReady" 21 416 1 "*"
C L "MACIsTxReady" 21 416 1 "*"
C L "MACIsTxReady" 21 416 1 "*"
V L "HighPriority" 21 436 "int8" `1818 
F G "MACIsTxReady" 21 437 "int8(int8 HighPriority)" `1735 
V L "HighPriority" 21 469 "int8" `1818 
F G "MACGetTxBuffer" 21 470 "BUFFER(int8 HighPriority)" `1748 
V L "buffer" 21 501 "BUFFER" `1818 
F G "MACDiscardTx" 21 502 "void(BUFFER buffer)" `1745 
C L "MACDiscardRx" 21 513 1 "*"
C L "MACDiscardRx" 21 513 1 "*"
C L "MACDiscardRx" 21 513 1 "*"
C L "MACDiscardRx" 21 513 1 "*"
C L "MACDiscardRx" 21 513 1 "*"
C L "MACDiscardRx" 21 513 1 "*"
C L "MACDiscardRx" 21 513 1 "*"
C L "MACDiscardRx" 21 513 1 "*"
C L "MACDiscardRx" 21 513 1 "*"
F G "MACDiscardRx" 21 531 "void()" `1729 
V L "NewRXRDLocation" 21 532 "WORD_VAL" `1817  "Make sure the current packet was not already discarded"
C L "MACDiscardRx" 21 513 4 "FUNCTION"
C L "MACDiscardRx" 21 513 1 "FUNCTION"
C L "MACDiscardRx" 21 513 3 "FUNCTION"
C L "MACGetFreeRxSize" 21 564 1 "*"
C L "MACGetFreeRxSize" 21 564 1 "*"
C L "MACGetFreeRxSize" 21 564 1 "*"
C L "MACGetFreeRxSize" 21 564 1 "*"
C L "MACGetFreeRxSize" 21 564 1 "*"
C L "MACGetFreeRxSize" 21 564 1 "*"
C L "MACGetFreeRxSize" 21 564 1 "*"
C L "MACGetFreeRxSize" 21 564 1 "*"
F G "MACGetFreeRxSize" 21 581 "WORD()" `1730 
V L "ReadPT" 21 582 "WORD_VAL" `1818 
V L "WritePT" 21 582 "WORD_VAL" `1819  "Read the Ethernet hardware buffer write pointer.  Because packets can be"
C L "MACGetFreeRxSize" 21 564 3 "FUNCTION"
C L "MACGetFreeRxSize" 21 564 1 "FUNCTION"
C L "MACGetFreeRxSize" 21 564 1 "FUNCTION"
C L "MACGetFreeRxSize" 21 564 2 "FUNCTION"
C L "MACGetHeader" 21 621 1 "*"
C L "MACGetHeader" 21 621 1 "*"
C L "MACGetHeader" 21 621 1 "*"
C L "MACGetHeader" 21 621 1 "*"
C L "MACGetHeader" 21 621 1 "*"
C L "MACGetHeader" 21 621 1 "*"
C L "MACGetHeader" 21 621 1 "*"
C L "MACGetHeader" 21 621 1 "*"
C L "MACGetHeader" 21 621 1 "*"
C L "MACGetHeader" 21 621 1 "*"
C L "MACGetHeader" 21 621 1 "*"
C L "MACGetHeader" 21 621 1 "*"
C L "MACGetHeader" 21 621 1 "*"
C L "MACGetHeader" 21 621 1 "*"
C L "MACGetHeader" 21 621 1 "*"
V L "remote" 21 644 "*MAC_ADDR" `1721 
V L "type" 21 644 "*int8" `1822 
F G "MACGetHeader" 21 645 "int8(*MAC_ADDR remote,*int8 type)" `1720 
V L "header" 21 646 "ENC_PREAMBLE" `1820  "Test if at least one packet has been received and is waiting"
C L "MACGetHeader" 21 621 1 "FUNCTION"
C L "MACGetHeader" 21 621 1 "FUNCTION"
C L "MACGetHeader" 21 621 1 "FUNCTION"
C L "MACGetHeader" 21 621 1 "FUNCTION"
C L "MACGetHeader" 21 621 2 "FUNCTION"
C L "MACGetHeader" 21 621 3 "FUNCTION"
C L "MACGetHeader" 21 621 1 "FUNCTION"
C L "MACGetHeader" 21 621 1 "FUNCTION"
C L "MACGetHeader" 21 621 3 "FUNCTION"
C L "MACGetHeader" 21 621 1 "FUNCTION"
C L "MACGetHeader" 21 621 1 "FUNCTION"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
C L "MACPutHeader" 21 710 1 "*"
V L "remote" 21 736 "*MAC_ADDR" `1732 
V L "type" 21 737 "int8" `1733 
V L "dataLen" 21 738 "WORD" `1824 
F G "MACPutHeader" 21 739 "void(*MAC_ADDR remote,int8 type,WORD dataLen)" `1731 
C L "MACPutHeader" 21 710 1 "FUNCTION"
C L "MACPutHeader" 21 710 1 "FUNCTION"
C L "MACPutHeader" 21 710 1 "FUNCTION"
C L "MACPutHeader" 21 710 2 "FUNCTION"
C L "MACPutHeader" 21 710 1 "FUNCTION"
C L "MACPutHeader" 21 710 1 "FUNCTION"
C L "MACPutHeader" 21 710 1 "FUNCTION"
C L "MACFlush" 21 778 1 "*"
C L "MACFlush" 21 778 1 "*"
C L "MACFlush" 21 778 1 "*"
C L "MACFlush" 21 778 1 "*"
C L "MACFlush" 21 778 1 "*"
C L "MACFlush" 21 778 1 "*"
C L "MACFlush" 21 778 1 "*"
C L "MACFlush" 21 778 1 "*"
C L "MACFlush" 21 778 1 "*"
C L "MACFlush" 21 778 1 "*"
C L "MACFlush" 21 778 1 "*"
C L "MACFlush" 21 778 1 "*"
C L "MACFlush" 21 778 1 "*"
C L "MACFlush" 21 778 1 "*"
C L "MACFlush" 21 778 1 "*"
F G "MACFlush" 21 802 "void()" `1747 
C L "MACFlush" 21 778 2 "FUNCTION"
C L "MACFlush" 21 778 5 "FUNCTION"
C L "MACFlush" 21 778 1 "FUNCTION"
V L "ReadPtrSave" 21 836 "WORD_VAL" `1821 
V L "TXEnd" 21 837 "WORD_VAL" `1822 
V L "TXStatus" 21 838 "TXSTATUS" `1823 
V L "i" 21 839 "int8" `1824  "Cancel the previous transmission if it has become stuck set"
C L "MACFlush" 21 778 1 "FUNCTION"
C L "MACFlush" 21 778 1 "FUNCTION"
C L "MACFlush" 21 778 1 "FUNCTION"
C L "MACFlush" 21 778 3 "FUNCTION"
C L "MACFlush" 21 778 1 "FUNCTION"
C L "MACFlush" 21 778 1 "FUNCTION"
C L "MACFlush" 21 778 1 "FUNCTION"
C L "MACFlush" 21 778 1 "FUNCTION"
C L "MACFlush" 21 778 1 "FUNCTION"
C L "MACSetRxBuffer" 21 897 1 "*"
C L "MACSetRxBuffer" 21 897 1 "*"
C L "MACSetRxBuffer" 21 897 1 "*"
C L "MACSetRxBuffer" 21 897 1 "*"
C L "MACSetRxBuffer" 21 897 1 "*"
C L "MACSetRxBuffer" 21 897 1 "*"
C L "MACSetRxBuffer" 21 897 1 "*"
C L "MACSetRxBuffer" 21 897 1 "*"
C L "MACSetRxBuffer" 21 897 1 "*"
C L "MACSetRxBuffer" 21 897 1 "*"
C L "MACSetRxBuffer" 21 897 1 "*"
C L "MACSetRxBuffer" 21 897 1 "*"
C L "MACSetRxBuffer" 21 897 1 "*"
C L "MACSetRxBuffer" 21 897 1 "*"
C L "MACSetRxBuffer" 21 897 1 "*"
V L "offset" 21 920 "WORD" `1826 
F G "MACSetRxBuffer" 21 921 "void(WORD offset)" `1723 
V L "ReadPT" 21 922 "WORD_VAL" `1825  "Determine the address of the beginning of the entire packet"
C L "MACSetRxBuffer" 21 897 1 "FUNCTION"
C L "MACSetRxBuffer" 21 897 1 "FUNCTION"
C L "MACSetRxBuffer" 21 897 1 "FUNCTION"
C L "MACSetTxBuffer" 21 941 1 "*"
C L "MACSetTxBuffer" 21 941 1 "*"
C L "MACSetTxBuffer" 21 941 1 "*"
C L "MACSetTxBuffer" 21 941 1 "*"
C L "MACSetTxBuffer" 21 941 1 "*"
C L "MACSetTxBuffer" 21 941 1 "*"
C L "MACSetTxBuffer" 21 941 1 "*"
C L "MACSetTxBuffer" 21 941 1 "*"
C L "MACSetTxBuffer" 21 941 1 "*"
C L "MACSetTxBuffer" 21 941 1 "*"
C L "MACSetTxBuffer" 21 941 1 "*"
C L "MACSetTxBuffer" 21 941 1 "*"
C L "MACSetTxBuffer" 21 941 1 "*"
C L "MACSetTxBuffer" 21 941 1 "*"
V L "buffer" 21 963 "BUFFER" `1738 
V L "offset" 21 963 "WORD" `1828 
F G "MACSetTxBuffer" 21 964 "void(BUFFER buffer,WORD offset)" `1737 
C L "MACSetTxBuffer" 21 941 4 "FUNCTION"
C L "MACSetTxBuffer" 21 941 1 "FUNCTION"
C L "MACCalcRxChecksum" 21 941 2 "FUNCTION"
C L "MACCalcRxChecksum" 21 989 1 "*"
C L "MACCalcRxChecksum" 21 989 1 "*"
C L "MACCalcRxChecksum" 21 989 1 "*"
C L "MACCalcRxChecksum" 21 989 1 "*"
C L "MACCalcRxChecksum" 21 989 1 "*"
C L "MACCalcRxChecksum" 21 989 1 "*"
C L "MACCalcRxChecksum" 21 989 1 "*"
C L "MACCalcRxChecksum" 21 989 1 "*"
C L "MACCalcRxChecksum" 21 989 1 "*"
C L "MACCalcRxChecksum" 21 989 1 "*"
C L "MACCalcRxChecksum" 21 989 1 "*"
V L "offset" 21 1008 "WORD" `1702 
V L "len" 21 1008 "WORD" `1828 
F G "MACCalcRxChecksum" 21 1009 "WORD(WORD offset,WORD len)" `1701 
V L "temp" 21 1010 "WORD_VAL" `1826  "Add the offset requested by firmware plus the Ethernet header"
C L "MACCalcRxChecksum" 21 989 1 "FUNCTION"
C L "MACCalcRxChecksum" 21 989 1 "FUNCTION"
C L "MACCalcRxChecksum" 21 989 1 "FUNCTION"
C L "MACCalcRxChecksum" 21 989 1 "FUNCTION"
C L "MACCalcRxChecksum" 21 989 1 "FUNCTION"
C L "MACCalcRxChecksum" 21 989 1 "FUNCTION"
C L "MACCalcRxChecksum" 21 989 1 "FUNCTION"
C L "MACCalcTxChecksum" 21 1046 1 "*"
C L "MACCalcTxChecksum" 21 1046 1 "*"
C L "MACCalcTxChecksum" 21 1046 1 "*"
C L "MACCalcTxChecksum" 21 1046 1 "*"
C L "MACCalcTxChecksum" 21 1046 1 "*"
C L "MACCalcTxChecksum" 21 1046 1 "*"
C L "MACCalcTxChecksum" 21 1046 1 "*"
C L "MACCalcTxChecksum" 21 1046 1 "*"
C L "MACCalcTxChecksum" 21 1046 1 "*"
C L "MACCalcTxChecksum" 21 1046 1 "*"
C L "MACCalcTxChecksum" 21 1046 1 "*"
V L "offset" 21 1065 "WORD" `1705 
V L "len" 21 1065 "WORD" `1829 
F G "MACCalcTxChecksum" 21 1066 "WORD(WORD offset,WORD len)" `1704 
V L "temp" 21 1067 "WORD_VAL" `1827  "Program the start address of the DMA, after adjusting for the Ethernet"
C L "MACCalcTxChecksum" 21 1046 1 "FUNCTION"
C L "MACCalcTxChecksum" 21 1046 1 "FUNCTION"
C L "MACCalcTxChecksum" 21 1046 1 "FUNCTION"
C L "MACCalcTxChecksum" 21 1046 1 "FUNCTION"
C L "MACCalcTxChecksum" 21 1046 1 "FUNCTION"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
C L "CalcIPBufferChecksum" 21 1098 1 "*"
V L "len" 21 1122 "WORD" `1829 
F G "CalcIPBufferChecksum" 21 1123 "WORD(WORD len)" `1387 
V L "temp" 21 1124 "WORD_VAL" `1828  "Take care of special cases which the DMA cannot be used for"
C L "CalcIPBufferChecksum" 21 1098 1 "FUNCTION"
C L "CalcIPBufferChecksum" 21 1098 2 "FUNCTION"
C L "CalcIPBufferChecksum" 21 1098 1 "FUNCTION"
C L "CalcIPBufferChecksum" 21 1098 1 "FUNCTION"
C L "CalcIPBufferChecksum" 21 1098 1 "FUNCTION"
C L "MACGet" 21 1098 1 "FUNCTION"
C L "MACGet" 21 1182 1 "*"
C L "MACGet" 21 1182 1 "*"
C L "MACGet" 21 1182 1 "*"
C L "MACGet" 21 1182 1 "*"
C L "MACGet" 21 1182 1 "*"
C L "MACGet" 21 1182 1 "*"
C L "MACGet" 21 1182 1 "*"
C L "MACGet" 21 1182 1 "*"
C L "MACGet" 21 1182 1 "*"
C L "MACGet" 21 1182 1 "*"
C L "MACGet" 21 1182 1 "*"
C L "MACGet" 21 1182 1 "*"
C L "MACGet" 21 1182 1 "*"
C L "MACGet" 21 1182 4 "*"
C L "MACGet" 21 1367 1 "*"
C L "MACGet" 21 1367 1 "*"
C L "MACGet" 21 1367 1 "*"
C L "MACGet" 21 1367 1 "*"
C L "MACGet" 21 1367 1 "*"
C L "MACGet" 21 1367 1 "*"
C L "MACGet" 21 1367 1 "*"
C L "MACGet" 21 1367 1 "*"
C L "MACGet" 21 1367 1 "*"
C L "MACGet" 21 1367 1 "*"
F G "MACGet" 21 1386 "int8()" `1725  "SPISelectEthernet();"
C L "MACGet" 21 1367 9 "FUNCTION"
V L "c" 21 1400 "int8" `1829 
C L "MACGetArray" 21 1367 1 "FUNCTION"
C L "MACGetArray" 21 1410 1 "*"
C L "MACGetArray" 21 1410 1 "*"
C L "MACGetArray" 21 1410 1 "*"
C L "MACGetArray" 21 1410 1 "*"
C L "MACGetArray" 21 1410 1 "*"
C L "MACGetArray" 21 1410 1 "*"
C L "MACGetArray" 21 1410 1 "*"
C L "MACGetArray" 21 1410 1 "*"
C L "MACGetArray" 21 1410 1 "*"
C L "MACGetArray" 21 1410 1 "*"
C L "MACGetArray" 21 1410 1 "*"
C L "MACGetArray" 21 1410 1 "*"
C L "MACGetArray" 21 1410 1 "*"
V L "val" 21 1431 "*int8" `1727 
V L "len" 21 1431 "WORD" `1832 
F G "MACGetArray" 21 1432 "WORD(*int8 val,WORD len)" `1726  "int16 i;"
C L "MACGetArray" 21 1410 14 "FUNCTION"
C L "MACGetArray" 21 1433 5 "*val"
V L "i" 21 1461 "int16" `1830 
C L "MACPut" 21 1433 1 "FUNCTION"
C L "MACPut" 21 1477 1 "*"
C L "MACPut" 21 1477 1 "*"
C L "MACPut" 21 1477 1 "*"
C L "MACPut" 21 1477 1 "*"
C L "MACPut" 21 1477 1 "*"
C L "MACPut" 21 1477 1 "*"
C L "MACPut" 21 1477 1 "*"
C L "MACPut" 21 1477 1 "*"
C L "MACPut" 21 1477 1 "*"
C L "MACPut" 21 1477 1 "*"
V L "val" 21 1495 "int8" `1832 
F G "MACPut" 21 1496 "void(int8 val)" `1740  "SPISelectEthernet();"
C L "MACPut" 21 1477 7 "FUNCTION"
C L "MACPutArray" 21 1477 1 "FUNCTION"
C L "MACPutArray" 21 1514 1 "*"
C L "MACPutArray" 21 1514 1 "*"
C L "MACPutArray" 21 1514 1 "*"
C L "MACPutArray" 21 1514 1 "*"
C L "MACPutArray" 21 1514 1 "*"
C L "MACPutArray" 21 1514 1 "*"
C L "MACPutArray" 21 1514 1 "*"
C L "MACPutArray" 21 1514 1 "*"
C L "MACPutArray" 21 1514 1 "*"
C L "MACPutArray" 21 1514 1 "*"
C L "MACPutArray" 21 1514 1 "*"
V L "val" 21 1533 "*int8" `1743 
V L "len" 21 1533 "WORD" `1833 
F G "MACPutArray" 21 1534 "void(*int8 val,WORD len)" `1742  "Select the chip and send the proper opcode"
C L "MACPutArray" 21 1514 14 "FUNCTION"
C L "SendSystemReset" 21 1514 1 "FUNCTION"
C L "SendSystemReset" 21 1566 1 "*"
C L "SendSystemReset" 21 1566 1 "*"
C L "SendSystemReset" 21 1566 1 "*"
C L "SendSystemReset" 21 1566 1 "*"
C L "SendSystemReset" 21 1566 1 "*"
C L "SendSystemReset" 21 1566 1 "*"
C L "SendSystemReset" 21 1566 1 "*"
C L "SendSystemReset" 21 1566 1 "*"
C L "SendSystemReset" 21 1566 1 "*"
C L "SendSystemReset" 21 1566 1 "*"
F G "SendSystemReset" 21 1585 "void()" `1806  "SPISelectEthernet();"
C L "SendSystemReset" 21 1566 4 "FUNCTION"
C L "ReadETHReg" 21 1566 1 "FUNCTION"
C L "ReadETHReg" 21 1599 1 "*"
C L "ReadETHReg" 21 1599 1 "*"
C L "ReadETHReg" 21 1599 1 "*"
C L "ReadETHReg" 21 1599 1 "*"
C L "ReadETHReg" 21 1599 1 "*"
C L "ReadETHReg" 21 1599 1 "*"
C L "ReadETHReg" 21 1599 1 "*"
C L "ReadETHReg" 21 1599 1 "*"
C L "ReadETHReg" 21 1599 1 "*"
C L "ReadETHReg" 21 1599 1 "*"
C L "ReadETHReg" 21 1599 1 "*"
C L "ReadETHReg" 21 1599 1 "*"
C L "ReadETHReg" 21 1599 1 "*"
C L "ReadETHReg" 21 1599 1 "*"
V L "Address" 21 1621 "int8" `1832 
F G "ReadETHReg" 21 1622 "REG(int8 Address)" `1793 
V L "c" 21 1623 "int8" `1831  "Select the chip and send the Read Control Register opcode/address"
C L "ReadETHReg" 21 1599 10 "FUNCTION"
C L "ReadMACReg" 21 1599 1 "FUNCTION"
C L "ReadMACReg" 21 1648 1 "*"
C L "ReadMACReg" 21 1648 1 "*"
C L "ReadMACReg" 21 1648 1 "*"
C L "ReadMACReg" 21 1648 1 "*"
C L "ReadMACReg" 21 1648 1 "*"
C L "ReadMACReg" 21 1648 1 "*"
C L "ReadMACReg" 21 1648 1 "*"
C L "ReadMACReg" 21 1648 1 "*"
C L "ReadMACReg" 21 1648 1 "*"
C L "ReadMACReg" 21 1648 1 "*"
C L "ReadMACReg" 21 1648 1 "*"
C L "ReadMACReg" 21 1648 1 "*"
C L "ReadMACReg" 21 1648 1 "*"
C L "ReadMACReg" 21 1648 1 "*"
V L "Address" 21 1670 "int8" `1833 
F G "ReadMACReg" 21 1671 "REG(int8 Address)" `1795 
V L "c" 21 1672 "int8" `1832  "SPISelectEthernet();"
C L "ReadMACReg" 21 1648 13 "FUNCTION"
C L "ReadPHYReg" 21 1648 1 "FUNCTION"
C L "ReadPHYReg" 21 1706 1 "*"
C L "ReadPHYReg" 21 1706 1 "*"
C L "ReadPHYReg" 21 1706 1 "*"
C L "ReadPHYReg" 21 1706 1 "*"
C L "ReadPHYReg" 21 1706 1 "*"
C L "ReadPHYReg" 21 1706 1 "*"
C L "ReadPHYReg" 21 1706 1 "*"
C L "ReadPHYReg" 21 1706 1 "*"
V L "Register" 21 1722 "int8" `1834 
F G "ReadPHYReg" 21 1723 "PHYREG(int8 Register)" `1714 
V L "Result" 21 1724 "PHYREG" `1833  "Set the right address and start the register read operation"
C L "ReadPHYReg" 21 1706 2 "FUNCTION"
C L "ReadPHYReg" 21 1706 1 "FUNCTION"
C L "ReadPHYReg" 21 1706 1 "FUNCTION"
C L "WriteReg" 21 1706 1 "FUNCTION"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
C L "WriteReg" 21 1747 1 "*"
V L "Address" 21 1772 "int8" `1798 
V L "Data" 21 1772 "int8" `1836 
F G "WriteReg" 21 1773 "void(int8 Address,int8 Data)" `1797  "SPISelectEthernet();"
C L "WriteReg" 21 1747 7 "FUNCTION"
C L "BFCReg" 21 1747 1 "FUNCTION"
C L "BFCReg" 21 1791 1 "*"
C L "BFCReg" 21 1791 1 "*"
C L "BFCReg" 21 1791 1 "*"
C L "BFCReg" 21 1791 1 "*"
C L "BFCReg" 21 1791 1 "*"
C L "BFCReg" 21 1791 1 "*"
C L "BFCReg" 21 1791 1 "*"
C L "BFCReg" 21 1791 1 "*"
C L "BFCReg" 21 1791 1 "*"
C L "BFCReg" 21 1791 1 "*"
C L "BFCReg" 21 1791 1 "*"
C L "BFCReg" 21 1791 1 "*"
C L "BFCReg" 21 1791 1 "*"
C L "BFCReg" 21 1791 1 "*"
V L "Address" 21 1813 "int8" `1801 
V L "Data" 21 1813 "int8" `1836 
F G "BFCReg" 21 1814 "void(int8 Address,int8 Data)" `1800  "SPISelectEthernet();"
C L "BFCReg" 21 1791 7 "FUNCTION"
C L "BFSReg" 21 1791 1 "FUNCTION"
C L "BFSReg" 21 1832 1 "*"
C L "BFSReg" 21 1832 1 "*"
C L "BFSReg" 21 1832 1 "*"
C L "BFSReg" 21 1832 1 "*"
C L "BFSReg" 21 1832 1 "*"
C L "BFSReg" 21 1832 1 "*"
C L "BFSReg" 21 1832 1 "*"
C L "BFSReg" 21 1832 1 "*"
C L "BFSReg" 21 1832 1 "*"
C L "BFSReg" 21 1832 1 "*"
C L "BFSReg" 21 1832 1 "*"
C L "BFSReg" 21 1832 1 "*"
C L "BFSReg" 21 1832 1 "*"
C L "BFSReg" 21 1832 1 "*"
V L "Address" 21 1854 "int8" `1804 
V L "Data" 21 1854 "int8" `1836 
F G "BFSReg" 21 1855 "void(int8 Address,int8 Data)" `1803  "SPISelectEthernet();"
C L "BFSReg" 21 1832 7 "FUNCTION"
C L "WritePHYReg" 21 1832 1 "FUNCTION"
C L "WritePHYReg" 21 1873 1 "*"
C L "WritePHYReg" 21 1873 1 "*"
C L "WritePHYReg" 21 1873 1 "*"
C L "WritePHYReg" 21 1873 1 "*"
C L "WritePHYReg" 21 1873 1 "*"
C L "WritePHYReg" 21 1873 1 "*"
C L "WritePHYReg" 21 1873 1 "*"
C L "WritePHYReg" 21 1873 1 "*"
C L "WritePHYReg" 21 1873 1 "*"
V L "Register" 21 1890 "int8" `1712 
V L "Data" 21 1890 "WORD" `1836 
F G "WritePHYReg" 21 1891 "void(int8 Register,WORD Data)" `1711  "Write the register address"
C L "WritePHYReg" 21 1873 2 "FUNCTION"
C L "WritePHYReg" 21 1873 1 "FUNCTION"
C L "BankSel" 21 1873 1 "FUNCTION"
C L "BankSel" 21 1907 1 "*"
C L "BankSel" 21 1907 1 "*"
C L "BankSel" 21 1907 1 "*"
C L "BankSel" 21 1907 1 "*"
C L "BankSel" 21 1907 1 "*"
C L "BankSel" 21 1907 1 "*"
C L "BankSel" 21 1907 1 "*"
C L "BankSel" 21 1907 1 "*"
C L "BankSel" 21 1907 1 "*"
V L "Register" 21 1924 "WORD" `1835 
F G "BankSel" 21 1925 "void(WORD Register)" `1791 
C L "MACSetDuplex" 21 1907 1 "FUNCTION"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 1931 1 "*"
C L "MACSetDuplex" 21 2046 1 "*"
C L "MACSetDuplex" 21 2046 1 "*"
C L "MACSetDuplex" 21 2046 1 "*"
C L "MACSetDuplex" 21 2046 1 "*"
C L "MACSetDuplex" 21 2046 1 "*"
C L "MACSetDuplex" 21 2046 1 "*"
C L "MACSetDuplex" 21 2046 1 "*"
C L "MACSetDuplex" 21 2046 1 "*"
C L "MACSetDuplex" 21 2046 1 "*"
C L "MACSetDuplex" 21 2046 1 "*"
C L "MACSetDuplex" 21 2046 1 "*"
C L "MACSetDuplex" 21 2046 1 "*"
C L "MACSetDuplex" 21 2046 1 "*"
C L "MACSetDuplex" 21 2046 1 "*"
C L "MACSetDuplex" 21 2046 1 "*"
V L "DuplexState" 21 2069 "DUPLEX" `1835 
F G "MACSetDuplex" 21 2070 "void(DUPLEX DuplexState)" `1697 
V L "Register" 21 2071 "REG" `1834 
V L "PhyReg" 21 2072 "PHYREG" `1835  "Disable receive logic and abort any packets currently being transmitted"
C L "MACSetDuplex" 21 2046 1 "FUNCTION"
C L "MACSetDuplex" 21 2046 1 "FUNCTION"
C L "MACSetDuplex" 21 2046 4 "FUNCTION"
C L "MACSetDuplex" 21 2046 1 "FUNCTION"
C L "MACPowerDown" 21 2046 1 "FUNCTION"
C L "MACPowerDown" 21 2106 1 "*"
C L "MACPowerDown" 21 2106 1 "*"
C L "MACPowerDown" 21 2106 1 "*"
C L "MACPowerDown" 21 2106 1 "*"
C L "MACPowerDown" 21 2106 1 "*"
C L "MACPowerDown" 21 2106 1 "*"
C L "MACPowerDown" 21 2106 1 "*"
C L "MACPowerDown" 21 2106 1 "*"
C L "MACPowerDown" 21 2106 1 "*"
C L "MACPowerDown" 21 2106 1 "*"
C L "MACPowerDown" 21 2106 1 "*"
F G "MACPowerDown" 21 2126 "void()" `1699  "Disable packet reception"
C L "MACPowerDown" 21 2106 2 "FUNCTION"
C L "MACPowerDown" 21 2106 1 "FUNCTION"
C L "MACPowerDown" 21 2106 1 "FUNCTION"
C L "MACPowerUp" 21 2106 1 "FUNCTION"
C L "MACPowerUp" 21 2142 1 "*"
C L "MACPowerUp" 21 2142 1 "*"
C L "MACPowerUp" 21 2142 1 "*"
C L "MACPowerUp" 21 2142 1 "*"
C L "MACPowerUp" 21 2142 1 "*"
C L "MACPowerUp" 21 2142 1 "*"
C L "MACPowerUp" 21 2142 1 "*"
C L "MACPowerUp" 21 2142 1 "*"
C L "MACPowerUp" 21 2142 1 "*"
C L "MACPowerUp" 21 2142 1 "*"
C L "MACPowerUp" 21 2142 1 "*"
F G "MACPowerUp" 21 2162 "void()" `1700  "Leave power down mode"
C L "MACPowerUp" 21 2142 2 "FUNCTION"
C L "MACPowerUp" 21 2142 1 "FUNCTION"
C L "SetCLKOUT" 21 2142 1 "FUNCTION"
C L "SetCLKOUT" 21 2175 1 "*"
C L "SetCLKOUT" 21 2175 1 "*"
C L "SetCLKOUT" 21 2175 1 "*"
C L "SetCLKOUT" 21 2175 1 "*"
C L "SetCLKOUT" 21 2175 1 "*"
C L "SetCLKOUT" 21 2175 1 "*"
C L "SetCLKOUT" 21 2175 1 "*"
C L "SetCLKOUT" 21 2175 1 "*"
C L "SetCLKOUT" 21 2175 1 "*"
C L "SetCLKOUT" 21 2175 1 "*"
C L "SetCLKOUT" 21 2175 1 "*"
C L "SetCLKOUT" 21 2175 1 "*"
C L "SetCLKOUT" 21 2175 1 "*"
C L "SetCLKOUT" 21 2175 1 "*"
V L "NewConfig" 21 2197 "int8" `1837 
F G "SetCLKOUT" 21 2198 "void(int8 NewConfig)" `1836 
C L "GetCLKOUT" 21 2175 1 "FUNCTION"
C L "GetCLKOUT" 21 2204 1 "*"
C L "GetCLKOUT" 21 2204 1 "*"
C L "GetCLKOUT" 21 2204 1 "*"
C L "GetCLKOUT" 21 2204 1 "*"
C L "GetCLKOUT" 21 2204 1 "*"
C L "GetCLKOUT" 21 2204 1 "*"
C L "GetCLKOUT" 21 2204 1 "*"
C L "GetCLKOUT" 21 2204 1 "*"
C L "GetCLKOUT" 21 2204 1 "*"
C L "GetCLKOUT" 21 2204 1 "*"
C L "GetCLKOUT" 21 2204 1 "*"
C L "GetCLKOUT" 21 2204 1 "*"
C L "GetCLKOUT" 21 2204 1 "*"
C L "GetCLKOUT" 21 2204 1 "*"
F G "GetCLKOUT" 21 2227 "int8()" `1838 
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 24 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 2 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
D G "IP_H" 25 45 ""
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 2 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
D G "IP_PROT_ICMP" 25 50 " (1)"
D G "IP_PROT_TCP" 25 51 " (6)"
D G "IP_PROT_UDP" 25 52 " (17)"
C G "" 25 55 1 "*"
T G "IP_HEADER" 25 71 "{int8 VersionIHL,int8 TypeOfService,WORD TotalLength,WORD Identification,WORD FragmentInfo,int8 TimeToLive,int8 Protocol,WORD HeaderChecksum,IP_ADDR SourceAddress,IP_ADDR DestAddress}" `1850  "* Function:        BOOL IPIsTxReady(BOOL HighPriority)"
C G "" 25 74 1 "*"
C G "" 25 74 1 "*"
C G "" 25 74 1 "*"
C G "" 25 74 1 "*"
C G "" 25 74 1 "*"
D G "IPIsTxReady" 25 89 "(HighPriority)       MACIsTxReady(HighPriority)"
C G "" 25 92 1 "*"
C G "" 25 92 1 "*"
C G "" 25 92 1 "*"
C G "" 25 92 1 "*"
C G "" 25 92 1 "*"
C G "" 25 92 1 "*"
C G "" 25 92 1 "*"
D G "IPSetTxBuffer" 25 108 "(a,b) MACSetTxBuffer(a, b+sizeof(IP_HEADER))"
C L "IPPutHeader" 25 112 1 "*"
C L "IPPutHeader" 25 112 1 "*"
C L "IPPutHeader" 25 112 1 "*"
C L "IPPutHeader" 25 112 1 "*"
C L "IPPutHeader" 25 112 1 "*"
C L "IPPutHeader" 25 112 1 "*"
C L "IPPutHeader" 25 112 1 "*"
C L "IPPutHeader" 25 112 1 "*"
C L "IPPutHeader" 25 112 1 "*"
C L "IPPutHeader" 25 112 1 "*"
C L "IPPutHeader" 25 112 1 "*"
C L "IPPutHeader" 25 112 1 "*"
C L "IPPutHeader" 25 112 1 "*"
C L "IPPutHeader" 25 112 1 "*"
C L "IPPutHeader" 25 112 1 "*"
C L "IPPutHeader" 25 112 1 "*"
V L "remote" 25 136 "*NODE_INFO" `1852 
V L "protocol" 25 137 "int8" `1853 
V L "len" 25 138 "WORD" `1854 
f G "IPPutHeader" 25 138 "WORD(*NODE_INFO remote,int8 protocol,WORD len)" `1851  "* Macro:           IPPutArray(a, b)"
C L "IPPutHeader" 25 141 1 "*"
C L "IPPutHeader" 25 141 1 "*"
C L "IPPutHeader" 25 141 1 "*"
C L "IPPutHeader" 25 141 1 "*"
C L "IPPutHeader" 25 141 1 "*"
D G "IPPutArray" 25 156 "(a,b)    MACPutArray(a, b)"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
C L "IPPutHeader" 25 161 1 "*"
V L "localIP" 25 187 "*IP_ADDR" `1856 
V L "remote" 25 188 "*NODE_INFO" `1857 
V L "protocol" 25 189 "*int8" `1858 
V L "len" 25 190 "*WORD" `1859 
f G "IPGetHeader" 25 190 "int8(*IP_ADDR localIP,*NODE_INFO remote,*int8 protocol,*WORD len)" `1855  "* Macro:           IPDiscard()"
C L "IPGetHeader" 25 193 1 "*"
C L "IPGetHeader" 25 193 1 "*"
C L "IPGetHeader" 25 193 1 "*"
C L "IPGetHeader" 25 193 1 "*"
C L "IPGetHeader" 25 193 1 "*"
D G "IPDiscard" 25 208 "()         MACDiscard()"
C L "IPGetHeader" 25 212 1 "*"
C L "IPGetHeader" 25 212 1 "*"
C L "IPGetHeader" 25 212 1 "*"
C L "IPGetHeader" 25 212 1 "*"
C L "IPGetHeader" 25 212 1 "*"
C L "IPGetHeader" 25 212 1 "*"
D G "IPGetArray" 25 227 "(a,b)    MACGetArray(a, b)"
C L "IPGetHeader" 25 232 1 "*"
C L "IPGetHeader" 25 232 1 "*"
C L "IPGetHeader" 25 232 1 "*"
C L "IPGetHeader" 25 232 1 "*"
C L "IPGetHeader" 25 232 1 "*"
C L "IPGetHeader" 25 232 1 "*"
C L "IPGetHeader" 25 232 1 "*"
C L "IPGetHeader" 25 232 1 "*"
V L "Offset" 25 248 "WORD" `1861 
f G "IPSetRxBuffer" 25 248 "void(WORD Offset)" `1860  "This is left shifted by 4.  Actual value is 0x04."
D G "IPv4" 24 55 " (0x40u)"
D G "IP_VERSION" 24 56 "IPv4"
D G "debug_ip" 24 58 ""
D G "IP_IHL" 24 64 " (0x05)"
D G "IP_SERVICE_NW_CTRL" 24 66 " (0x07)"
D G "IP_SERVICE_IN_CTRL" 24 67 " (0x06)"
D G "IP_SERVICE_ECP" 24 68 " (0x05)"
D G "IP_SERVICE_OVR" 24 69 " (0x04)"
D G "IP_SERVICE_FLASH" 24 70 " (0x03)"
D G "IP_SERVICE_IMM" 24 71 " (0x02)"
D G "IP_SERVICE_PRIOR" 24 72 " (0x01)"
D G "IP_SERVICE_ROUTINE" 24 73 " (0x00)"
D G "IP_SERVICE_N_DELAY" 24 75 " (0x00)"
D G "IP_SERCICE_L_DELAY" 24 76 " (0x08)"
D G "IP_SERVICE_N_THRPT" 24 77 " (0x00)"
D G "IP_SERVICE_H_THRPT" 24 78 " (0x10)"
D G "IP_SERVICE_N_RELIB" 24 79 " (0x00)"
D G "IP_SERVICE_H_RELIB" 24 80 " (0x20)"
D G "IP_SERVICE" 24 82 " (IP_SERVICE_ROUTINE | IP_SERVICE_N_DELAY)"
D G "MY_IP_TTL" 24 84 " (100)" "Time-To-Live in Seconds"
V G "_Identifier" 24 89 "WORD" `1862 
V G "IPHeaderLen" 24 90 "int8" `1863 
V L "h" 24 92 "*IP_HEADER" `1865 
f G "SwapIPHeader" 24 92 "void(*IP_HEADER h)" `1864  "* Function:        BOOL IPGetHeader( IP_ADDR    *localIP,"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
C L "SwapIPHeader" 24 97 1 "*"
V L "localIP" 24 123 "*IP_ADDR" `1856 
V L "remote" 24 124 "*NODE_INFO" `1857 
V L "protocol" 24 125 "*int8" `1858 
V L "len" 24 126 "*WORD" `1870 
F G "IPGetHeader" 24 127 "int8(*IP_ADDR localIP,*NODE_INFO remote,*int8 protocol,*WORD len)" `1855 
V L "CalcChecksum" 24 128 "WORD_VAL" `1866 
V L "header" 24 129 "IP_HEADER" `1867 
C L "IPGetHeader" 24 97 1 "FUNCTION"
C L "IPGetHeader" 24 97 1 "FUNCTION"
C L "IPGetHeader" 24 97 4 "FUNCTION"
C L "IPGetHeader" 24 97 1 "FUNCTION"
C L "IPGetHeader" 24 97 2 "FUNCTION"
C L "IPGetHeader" 24 97 1 "FUNCTION"
C L "IPGetHeader" 24 97 2 "FUNCTION"
C L "IPPutHeader" 24 220 1 "*"
C L "IPPutHeader" 24 220 1 "*"
C L "IPPutHeader" 24 220 1 "*"
C L "IPPutHeader" 24 220 1 "*"
C L "IPPutHeader" 24 220 1 "*"
C L "IPPutHeader" 24 220 1 "*"
C L "IPPutHeader" 24 220 1 "*"
C L "IPPutHeader" 24 220 1 "*"
C L "IPPutHeader" 24 220 1 "*"
C L "IPPutHeader" 24 220 1 "*"
C L "IPPutHeader" 24 220 1 "*"
V L "remote" 24 238 "*NODE_INFO" `1852 
V L "protocol" 24 239 "int8" `1853 
V L "len" 24 240 "WORD" `1871 
F G "IPPutHeader" 24 241 "WORD(*NODE_INFO remote,int8 protocol,WORD len)" `1851 
V L "header" 24 242 "IP_HEADER" `1868 
C L "IPPutHeader" 24 220 1 "FUNCTION"
C L "IPPutHeader" 24 220 1 "FUNCTION"
C L "IPSetRxBuffer" 24 278 1 "*"
C L "IPSetRxBuffer" 24 278 1 "*"
C L "IPSetRxBuffer" 24 278 1 "*"
C L "IPSetRxBuffer" 24 278 1 "*"
C L "IPSetRxBuffer" 24 278 1 "*"
C L "IPSetRxBuffer" 24 278 1 "*"
C L "IPSetRxBuffer" 24 278 1 "*"
C L "IPSetRxBuffer" 24 278 1 "*"
V L "Offset" 24 294 "WORD" `1870 
F G "IPSetRxBuffer" 24 295 "void(WORD Offset)" `1860 
V L "h" 24 301 "*IP_HEADER" `1870 
F G "SwapIPHeader" 24 302 "void(*IP_HEADER h)" `1864 
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 2 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
D G "TCP_H" 27 40 ""
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 2 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
C G "" 20 1 1 "*"
T G "TCP_SOCKET" 27 45 "int8" `1869 
T G "TCP_PORT" 27 46 "WORD" `1870  "* Maximum number of times a connection be retried before"
D G "MAX_RETRY_COUNTS" 27 56 " (3)"
D G "INVALID_SOCKET" 27 58 " (0xfe)"
D G "UNKNOWN_SOCKET" 27 59 " (0xff)"
D G "REMOTE_HOST" 27 61 "(s)      (TCB[s].remote)"
C G "" 27 63 1 "*"
E G "TCP_LISTEN" 27 69 "0" `1872 
E G "TCP_SYN_SENT" 27 70 "1" `1873 
E G "TCP_SYN_RECEIVED" 27 71 "2" `1874 
E G "TCP_ESTABLISHED" 27 72 "3" `1875 
E G "TCP_FIN_WAIT_1" 27 73 "4" `1876 
E G "TCP_FIN_WAIT_2" 27 74 "5" `1877 
E G "TCP_CLOSING" 27 75 "6" `1878 
E G "TCP_TIME_WAIT" 27 76 "7" `1879 
E G "TCP_CLOSE_WAIT" 27 77 "8" `1880 
E G "TCP_LAST_ACK" 27 78 "9" `1881 
E G "TCP_CLOSED" 27 79 "10" `1882 
T G "TCP_STATE" 27 79 "_TCP_STATE" `1883  "* Socket info."
C G "" 27 81 1 "*"
T G "SOCKET_INFO" 27 115 "{TCP_STATE smState,NODE_INFO remote,TCP_PORT localPort,TCP_PORT remotePort,BUFFER TxBuffer,WORD TxCount,WORD RxCount,WORD RemoteWindow,DWORD SND_SEQ,DWORD SND_ACK,int8 RetryCount,TICKTYPE startTick,TICKTYPE TimeOut}" `1906  "* Function:        void TCPInit(void)"
C L "TCPInit" 27 117 1 "*"
C L "TCPInit" 27 117 1 "*"
C L "TCPInit" 27 117 1 "*"
C L "TCPInit" 27 117 1 "*"
C L "TCPInit" 27 117 1 "*"
C L "TCPInit" 27 117 1 "*"
C L "TCPInit" 27 117 1 "*"
f G "TCPInit" 27 133 "void()" `1907  "* Function:        TCP_SOCKET TCPListen(TCP_PORT port)"
C L "TCPInit" 27 137 1 "*"
C L "TCPInit" 27 137 1 "*"
C L "TCPInit" 27 137 1 "*"
C L "TCPInit" 27 137 1 "*"
C L "TCPInit" 27 137 1 "*"
C L "TCPInit" 27 137 1 "*"
C L "TCPInit" 27 137 1 "*"
V L "port" 27 153 "TCP_PORT" `1909 
f G "TCPListen" 27 153 "TCP_SOCKET(TCP_PORT port)" `1908  "* Function:        TCP_SOCKET TCPConnect(NODE_INFO* remote,"
C L "TCPListen" 27 157 1 "*"
C L "TCPListen" 27 157 1 "*"
C L "TCPListen" 27 157 1 "*"
C L "TCPListen" 27 157 1 "*"
C L "TCPListen" 27 157 1 "*"
C L "TCPListen" 27 157 1 "*"
C L "TCPListen" 27 157 1 "*"
C L "TCPListen" 27 157 1 "*"
V L "remote" 27 174 "*NODE_INFO" `1911 
V L "port" 27 174 "TCP_PORT" `1912 
f G "TCPConnect" 27 174 "TCP_SOCKET(*NODE_INFO remote,TCP_PORT port)" `1910  "* Function:        BOOL TCPIsConnected(TCP_SOCKET s)"
C L "TCPConnect" 27 177 1 "*"
C L "TCPConnect" 27 177 1 "*"
C L "TCPConnect" 27 177 1 "*"
C L "TCPConnect" 27 177 1 "*"
C L "TCPConnect" 27 177 1 "*"
C L "TCPConnect" 27 177 1 "*"
C L "TCPConnect" 27 177 1 "*"
C L "TCPConnect" 27 177 1 "*"
C L "TCPConnect" 27 177 1 "*"
C L "TCPConnect" 27 177 1 "*"
V L "s" 27 196 "TCP_SOCKET" `1914 
f G "TCPIsConnected" 27 196 "int8(TCP_SOCKET s)" `1913  "* Function:        void TCPDisconnect(TCP_SOCKET s)"
C L "TCPIsConnected" 27 199 1 "*"
C L "TCPIsConnected" 27 199 1 "*"
C L "TCPIsConnected" 27 199 1 "*"
C L "TCPIsConnected" 27 199 1 "*"
C L "TCPIsConnected" 27 199 1 "*"
C L "TCPIsConnected" 27 199 1 "*"
C L "TCPIsConnected" 27 199 1 "*"
V L "s" 27 215 "TCP_SOCKET" `1916 
f G "TCPDisconnect" 27 215 "void(TCP_SOCKET s)" `1915  "* Function:        BOOL TCPIsPutReady(TCP_SOCKET s)"
C L "TCPDisconnect" 27 218 1 "*"
C L "TCPDisconnect" 27 218 1 "*"
C L "TCPDisconnect" 27 218 1 "*"
C L "TCPDisconnect" 27 218 1 "*"
C L "TCPDisconnect" 27 218 1 "*"
C L "TCPDisconnect" 27 218 1 "*"
C L "TCPDisconnect" 27 218 1 "*"
C L "TCPDisconnect" 27 218 1 "*"
C L "TCPDisconnect" 27 218 1 "*"
C L "TCPDisconnect" 27 218 1 "*"
C L "TCPDisconnect" 27 218 1 "*"
C L "TCPDisconnect" 27 218 1 "*"
C L "TCPDisconnect" 27 218 1 "*"
V L "s" 27 240 "TCP_SOCKET" `1918 
f G "TCPIsPutReady" 27 240 "int8(TCP_SOCKET s)" `1917  "* Function:        BOOL TCPPut(TCP_SOCKET s, BYTE byte)"
C L "TCPIsPutReady" 27 243 1 "*"
C L "TCPIsPutReady" 27 243 1 "*"
C L "TCPIsPutReady" 27 243 1 "*"
C L "TCPIsPutReady" 27 243 1 "*"
C L "TCPIsPutReady" 27 243 1 "*"
C L "TCPIsPutReady" 27 243 1 "*"
C L "TCPIsPutReady" 27 243 1 "*"
C L "TCPIsPutReady" 27 243 1 "*"
V L "socket" 27 260 "TCP_SOCKET" `1920 
V L "data" 27 260 "int8" `1921 
f G "TCPPut" 27 260 "int8(TCP_SOCKET socket,int8 data)" `1919  "* Function:        BOOL TCPFlush(TCP_SOCKET s)"
C L "TCPPut" 27 263 1 "*"
C L "TCPPut" 27 263 1 "*"
C L "TCPPut" 27 263 1 "*"
C L "TCPPut" 27 263 1 "*"
C L "TCPPut" 27 263 1 "*"
C L "TCPPut" 27 263 1 "*"
C L "TCPPut" 27 263 1 "*"
V L "socket" 27 279 "TCP_SOCKET" `1923 
f G "TCPFlush" 27 279 "int8(TCP_SOCKET socket)" `1922  "* Function:        BOOL TCPIsGetReady(TCP_SOCKET s)"
C L "TCPFlush" 27 281 1 "*"
C L "TCPFlush" 27 281 1 "*"
C L "TCPFlush" 27 281 1 "*"
C L "TCPFlush" 27 281 1 "*"
C L "TCPFlush" 27 281 1 "*"
C L "TCPFlush" 27 281 1 "*"
C L "TCPFlush" 27 281 1 "*"
V L "s" 27 297 "TCP_SOCKET" `1925 
f G "TCPIsGetReady" 27 297 "int8(TCP_SOCKET s)" `1924  "* Function:        BOOL TCPGet(TCP_SOCKET s, BYTE *byte)"
C L "TCPIsGetReady" 27 300 1 "*"
C L "TCPIsGetReady" 27 300 1 "*"
C L "TCPIsGetReady" 27 300 1 "*"
C L "TCPIsGetReady" 27 300 1 "*"
C L "TCPIsGetReady" 27 300 1 "*"
C L "TCPIsGetReady" 27 300 1 "*"
C L "TCPIsGetReady" 27 300 1 "*"
C L "TCPIsGetReady" 27 300 1 "*"
C L "TCPIsGetReady" 27 300 1 "*"
V L "socket" 27 318 "TCP_SOCKET" `1927 
V L "data" 27 318 "*int8" `1928 
f G "TCPGet" 27 318 "int8(TCP_SOCKET socket,*int8 data)" `1926  "* Function:        WORD TCPGetArray(TCP_SOCKET s, BYTE *buffer,"
C L "TCPGet" 27 321 1 "*"
C L "TCPGet" 27 321 1 "*"
C L "TCPGet" 27 321 1 "*"
C L "TCPGet" 27 321 1 "*"
C L "TCPGet" 27 321 1 "*"
C L "TCPGet" 27 321 1 "*"
C L "TCPGet" 27 321 1 "*"
C L "TCPGet" 27 321 1 "*"
C L "TCPGet" 27 321 1 "*"
C L "TCPGet" 27 321 1 "*"
V L "s" 27 340 "TCP_SOCKET" `1930 
V L "buff" 27 340 "*int8" `1931 
V L "count" 27 340 "WORD" `1932 
f G "TCPGetArray" 27 340 "WORD(TCP_SOCKET s,*int8 buff,WORD count)" `1929  "* Function:        BOOL TCPDiscard(TCP_SOCKET s)"
C L "TCPGetArray" 27 343 1 "*"
C L "TCPGetArray" 27 343 1 "*"
C L "TCPGetArray" 27 343 1 "*"
C L "TCPGetArray" 27 343 1 "*"
C L "TCPGetArray" 27 343 1 "*"
C L "TCPGetArray" 27 343 1 "*"
C L "TCPGetArray" 27 343 1 "*"
C L "TCPGetArray" 27 343 1 "*"
V L "socket" 27 360 "TCP_SOCKET" `1934 
f G "TCPDiscard" 27 360 "int8(TCP_SOCKET socket)" `1933  "* Function:        BOOL TCPProcess(NODE_INFO* remote,"
C L "TCPDiscard" 27 363 1 "*"
C L "TCPDiscard" 27 363 1 "*"
C L "TCPDiscard" 27 363 1 "*"
C L "TCPDiscard" 27 363 1 "*"
C L "TCPDiscard" 27 363 1 "*"
C L "TCPDiscard" 27 363 1 "*"
C L "TCPDiscard" 27 363 1 "*"
C L "TCPDiscard" 27 363 1 "*"
C L "TCPDiscard" 27 363 1 "*"
C L "TCPDiscard" 27 363 1 "*"
C L "TCPDiscard" 27 363 1 "*"
V L "remote" 27 383 "*NODE_INFO" `1936 
V L "localIP" 27 384 "*IP_ADDR" `1937 
V L "len" 27 385 "WORD" `1938 
f G "TCPProcess" 27 385 "int8(*NODE_INFO remote,*IP_ADDR localIP,WORD len)" `1935  "* Function:        void TCPTick(void)"
C L "TCPProcess" 27 388 1 "*"
C L "TCPProcess" 27 388 1 "*"
C L "TCPProcess" 27 388 1 "*"
C L "TCPProcess" 27 388 1 "*"
C L "TCPProcess" 27 388 1 "*"
C L "TCPProcess" 27 388 1 "*"
C L "TCPProcess" 27 388 1 "*"
f G "TCPTick" 27 404 "void()" `1939  "*                  MAC Module Defs for Microchip Stack"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
C L "TCPTick" 16 1 1 "*"
D G "debug_tcp" 26 81 "(a,b,c,d,e,f,g,h,i,k,l,m,n,o,p,q,r,s,t,u)"
D G "MAX_TCP_DATA_LEN" 26 86 " (MAC_TX_BUFFER_SIZE - 54)"
D G "TCP_START_TIMEOUT_VAL" 26 89 " (TICKS_PER_SECOND * (TICKTYPE)3)"
D G "FIN" 26 92 " (0x01)"
D G "SYN" 26 93 " (0x02)"
D G "RST" 26 94 " (0x04)"
D G "PSH" 26 95 " (0x08)"
D G "ACK" 26 96 " (0x10)"
D G "URG" 26 97 " (0x20)"
C L "TCPTick" 26 82 1 "FUNCTION"
T G "TCP_HEADER" 26 133 "{WORD SourcePort,WORD DestPort,DWORD SeqNumber,DWORD AckNumber}" `1964  "TCP Options as defined by RFC"
D G "TCP_OPTIONS_END_OF_LIST" 26 137 " (0x00)"
D G "TCP_OPTIONS_NO_OP" 26 138 " (0x01)"
D G "TCP_OPTIONS_MAX_SEG_SIZE" 26 139 " (0x02)"
T G "TCP_OPTIONS" 26 145 "{int8 Kind,int8 Length,WORD_VAL MaxSegSize}" `1969 
D G "SwapPseudoTCPHeader" 26 147 "(h)  (h.TCPLength = swaps(h.TCPLength))"
C L "TCPTick" 26 82 1 "FUNCTION"
T G "PSEUDO_HEADER" 26 157 "{IP_ADDR SourceAddress,IP_ADDR DestAddress,int8 Zero,int8 Protocol,WORD TCPLength}" `1976 
D G "LOCAL_PORT_START_NUMBER" 26 159 " (1024)"
D G "LOCAL_PORT_END_NUMBER" 26 160 " (5000)"
C L "TCPTick" 26 82 1 "FUNCTION"
V G "_NextPort" 26 163 "WORD" `1977 
C L "TCPTick" 26 82 12 "FUNCTION"
V G "TCB" 26 180 "SOCKET_INFO[35]" `1978  "#pragma udata bla   // Return to any other RAM section   //not needed in ccs"
V L "s" 26 183 "TCP_SOCKET" `1980 
V L "remote" 26 184 "*NODE_INFO" `1981 
V L "h" 26 185 "*TCP_HEADER" `1982 
V L "len" 26 186 "WORD" `1983 
f G "HandleTCPSeg" 26 186 "void(TCP_SOCKET s,*NODE_INFO remote,*TCP_HEADER h,WORD len)" `1979 
V L "remote" 26 188 "*NODE_INFO" `1985 
V L "localPort" 26 189 "TCP_PORT" `1986 
V L "remotePort" 26 190 "TCP_PORT" `1987 
V L "tseq" 26 191 "DWORD" `1988 
V L "tack" 26 192 "DWORD" `1989 
V L "flags" 26 193 "int8" `1990 
V L "buff" 26 194 "BUFFER" `1991 
V L "len" 26 195 "WORD" `1992 
f G "TransmitTCP" 26 195 "void(*NODE_INFO remote,TCP_PORT localPort,TCP_PORT remotePort,DWORD tseq,DWORD tack,int8 flags,BUFFER buff,WORD len)" `1984 
V L "h" 26 197 "*TCP_HEADER" `1994 
V L "remote" 26 198 "*NODE_INFO" `1995 
f G "FindMatching_TCP_Socket" 26 198 "TCP_SOCKET(*TCP_HEADER h,*NODE_INFO remote)" `1993 
V L "header" 26 199 "*TCP_HEADER" `1997 
f G "SwapTCPHeader" 26 199 "void(*TCP_HEADER header)" `1996 
V L "ps" 26 200 "*SOCKET_INFO" `1999 
f G "CloseSocket" 26 200 "void(*SOCKET_INFO ps)" `1998 
D G "SendTCP" 26 202 "(remote,localPort,remotePort,seq,ack,flags)              TransmitTCP(remote, localPort, remotePort, seq, ack, flags,                      INVALID_BUFFER, 0)"
C L "CloseSocket" 26 208 1 "*"
C L "CloseSocket" 26 208 1 "*"
C L "CloseSocket" 26 208 1 "*"
C L "CloseSocket" 26 208 1 "*"
C L "CloseSocket" 26 208 1 "*"
C L "CloseSocket" 26 208 1 "*"
C L "CloseSocket" 26 208 1 "*"
C L "CloseSocket" 26 208 1 "*"
V G "TCPInit_RandSeed" 26 224 "int16" `2000 
F G "TCPInit" 26 226 "void()" `1907 
V L "s" 26 227 "TCP_SOCKET" `2001 
V L "ps" 26 228 "*SOCKET_INFO" `2002  "Initialize all sockets."
C L "TCPInit" 26 208 1 "FUNCTION"
C L "TCPListen" 26 279 1 "*"
C L "TCPListen" 26 279 1 "*"
C L "TCPListen" 26 279 1 "*"
C L "TCPListen" 26 279 1 "*"
C L "TCPListen" 26 279 1 "*"
C L "TCPListen" 26 279 1 "*"
C L "TCPListen" 26 279 1 "*"
C L "TCPListen" 26 279 1 "*"
V L "port" 26 295 "TCP_PORT" `2004 
F G "TCPListen" 26 296 "TCP_SOCKET(TCP_PORT port)" `1908 
V L "s" 26 297 "TCP_SOCKET" `2003 
V L "ps" 26 298 "*SOCKET_INFO" `2004 
C L "TCPListen" 26 279 2 "FUNCTION"
C L "TCPListen" 26 279 1 "FUNCTION"
C L "TCPListen" 26 279 1 "FUNCTION"
C L "TCPConnect" 26 341 1 "*"
C L "TCPConnect" 26 341 1 "*"
C L "TCPConnect" 26 341 1 "*"
C L "TCPConnect" 26 341 1 "*"
C L "TCPConnect" 26 341 1 "*"
C L "TCPConnect" 26 341 1 "*"
C L "TCPConnect" 26 341 1 "*"
C L "TCPConnect" 26 341 1 "*"
C L "TCPConnect" 26 341 1 "*"
V L "remote" 26 358 "*NODE_INFO" `1911 
V L "remotePort" 26 358 "TCP_PORT" `2007 
F G "TCPConnect" 26 359 "TCP_SOCKET(*NODE_INFO remote,TCP_PORT remotePort)" `1910 
V L "s" 26 360 "TCP_SOCKET" `2005 
V L "ps" 26 361 "*SOCKET_INFO" `2006 
V L "lbFound" 26 362 "BOOL" `2007 
C L "TCPConnect" 26 341 1 "FUNCTION"
C L "TCPConnect" 26 341 1 "FUNCTION"
C L "TCPConnect" 26 341 2 "FUNCTION"
C L "TCPConnect" 26 341 1 "FUNCTION"
C L "TCPConnect" 26 341 1 "FUNCTION"
C L "TCPConnect" 26 341 2 "FUNCTION"
C L "TCPConnect" 26 341 1 "FUNCTION"
C L "TCPConnect" 26 341 1 "FUNCTION"
C L "TCPIsConnected" 26 424 1 "*"
C L "TCPIsConnected" 26 424 1 "*"
C L "TCPIsConnected" 26 424 1 "*"
C L "TCPIsConnected" 26 424 1 "*"
C L "TCPIsConnected" 26 424 1 "*"
C L "TCPIsConnected" 26 424 1 "*"
C L "TCPIsConnected" 26 424 1 "*"
C L "TCPIsConnected" 26 424 1 "*"
C L "TCPIsConnected" 26 424 1 "*"
C L "TCPIsConnected" 26 424 1 "*"
C L "TCPIsConnected" 26 424 1 "*"
V L "s" 26 443 "TCP_SOCKET" `2009 
F G "TCPIsConnected" 26 444 "int8(TCP_SOCKET s)" `1913 
C L "TCPDisconnect" 26 450 1 "*"
C L "TCPDisconnect" 26 450 1 "*"
C L "TCPDisconnect" 26 450 1 "*"
C L "TCPDisconnect" 26 450 1 "*"
C L "TCPDisconnect" 26 450 1 "*"
C L "TCPDisconnect" 26 450 1 "*"
C L "TCPDisconnect" 26 450 1 "*"
C L "TCPDisconnect" 26 450 1 "*"
V L "s" 26 466 "TCP_SOCKET" `2009 
F G "TCPDisconnect" 26 467 "void(TCP_SOCKET s)" `1915 
V L "ps" 26 468 "*SOCKET_INFO" `2008 
C L "TCPDisconnect" 26 450 3 "FUNCTION"
C L "TCPDisconnect" 26 450 1 "FUNCTION"
C L "TCPDisconnect" 26 450 1 "FUNCTION"
C L "TCPDisconnect" 26 450 1 "FUNCTION"
C L "TCPFlush" 26 500 1 "*"
C L "TCPFlush" 26 500 1 "*"
C L "TCPFlush" 26 500 1 "*"
C L "TCPFlush" 26 500 1 "*"
C L "TCPFlush" 26 500 1 "*"
C L "TCPFlush" 26 500 1 "*"
C L "TCPFlush" 26 500 1 "*"
C L "TCPFlush" 26 500 1 "*"
V L "s" 26 516 "TCP_SOCKET" `2010 
F G "TCPFlush" 26 517 "int8(TCP_SOCKET s)" `1922 
V L "ps" 26 518 "*SOCKET_INFO" `2009 
C L "TCPFlush" 26 500 1 "FUNCTION"
C L "TCPFlush" 26 500 1 "FUNCTION"
C L "TCPIsPutReady" 26 556 1 "*"
C L "TCPIsPutReady" 26 556 1 "*"
C L "TCPIsPutReady" 26 556 1 "*"
C L "TCPIsPutReady" 26 556 1 "*"
C L "TCPIsPutReady" 26 556 1 "*"
C L "TCPIsPutReady" 26 556 1 "*"
C L "TCPIsPutReady" 26 556 1 "*"
C L "TCPIsPutReady" 26 556 1 "*"
C L "TCPIsPutReady" 26 556 1 "*"
C L "TCPIsPutReady" 26 556 1 "*"
C L "TCPIsPutReady" 26 556 1 "*"
C L "TCPIsPutReady" 26 556 1 "*"
C L "TCPIsPutReady" 26 556 1 "*"
C L "TCPIsPutReady" 26 556 1 "*"
V L "s" 26 578 "TCP_SOCKET" `2011 
F G "TCPIsPutReady" 26 579 "int8(TCP_SOCKET s)" `1917 
V L "s" 26 590 "TCP_SOCKET" `2011 
F G "TCPPutAvailable" 26 591 "int16(TCP_SOCKET s)" `2010 
V L "txCount" 26 592 "int16" `2012 
V L "txAvail" 26 592 "int16" `2013 
C L "TCPPutArray" 26 609 1 "*"
C L "TCPPutArray" 26 609 1 "*"
C L "TCPPutArray" 26 609 1 "*"
C L "TCPPutArray" 26 609 1 "*"
C L "TCPPutArray" 26 609 1 "*"
C L "TCPPutArray" 26 609 1 "*"
C L "TCPPutArray" 26 609 1 "*"
C L "TCPPutArray" 26 609 1 "*"
C L "TCPPutArray" 26 609 1 "*"
C L "TCPPutArray" 26 609 1 "*"
C L "TCPPutArray" 26 609 1 "*"
C L "TCPPutArray" 26 609 1 "*"
V L "s" 26 629 "TCP_SOCKET" `2015 
V L "ptr" 26 629 "*int8" `2016 
V L "len" 26 629 "WORD" `2017 
F G "TCPPutArray" 26 630 "WORD(TCP_SOCKET s,*int8 ptr,WORD len)" `2014 
V L "ps" 26 631 "*SOCKET_INFO" `2018 
V L "n" 26 632 "WORD" `2019 
C L "TCPPutArray" 26 609 1 "FUNCTION"
C L "TCPPutArray" 26 609 1 "FUNCTION"
C L "TCPPut" 26 674 1 "*"
C L "TCPPut" 26 674 1 "*"
C L "TCPPut" 26 674 1 "*"
C L "TCPPut" 26 674 1 "*"
C L "TCPPut" 26 674 1 "*"
C L "TCPPut" 26 674 1 "*"
C L "TCPPut" 26 674 1 "*"
C L "TCPPut" 26 674 1 "*"
C L "TCPPut" 26 674 1 "*"
C L "TCPPut" 26 674 1 "*"
C L "TCPPut" 26 674 1 "*"
V L "s" 26 693 "TCP_SOCKET" `1920 
V L "byte" 26 693 "int8" `2022 
F G "TCPPut" 26 694 "int8(TCP_SOCKET s,int8 byte)" `1919 
V L "ps" 26 695 "*SOCKET_INFO" `2020 
V L "tempCount" 26 696 "WORD" `2021 
C L "TCPPut" 26 674 1 "FUNCTION"
C L "TCPPut" 26 674 1 "FUNCTION"
C L "TCPDiscard" 26 732 1 "*"
C L "TCPDiscard" 26 732 1 "*"
C L "TCPDiscard" 26 732 1 "*"
C L "TCPDiscard" 26 732 1 "*"
C L "TCPDiscard" 26 732 1 "*"
C L "TCPDiscard" 26 732 1 "*"
C L "TCPDiscard" 26 732 1 "*"
C L "TCPDiscard" 26 732 1 "*"
C L "TCPDiscard" 26 732 1 "*"
V L "s" 26 749 "TCP_SOCKET" `2023 
F G "TCPDiscard" 26 750 "int8(TCP_SOCKET s)" `1933 
V L "ps" 26 751 "*SOCKET_INFO" `2022 
C L "TCPDiscard" 26 732 1 "FUNCTION"
C L "TCPGetArray" 26 768 1 "*"
C L "TCPGetArray" 26 768 1 "*"
C L "TCPGetArray" 26 768 1 "*"
C L "TCPGetArray" 26 768 1 "*"
C L "TCPGetArray" 26 768 1 "*"
C L "TCPGetArray" 26 768 1 "*"
C L "TCPGetArray" 26 768 1 "*"
C L "TCPGetArray" 26 768 1 "*"
C L "TCPGetArray" 26 768 1 "*"
C L "TCPGetArray" 26 768 1 "*"
C L "TCPGetArray" 26 768 1 "*"
V L "s" 26 787 "TCP_SOCKET" `1930 
V L "buff" 26 787 "*int8" `1931 
V L "count" 26 787 "WORD" `2026 
F G "TCPGetArray" 26 788 "WORD(TCP_SOCKET s,*int8 buff,WORD count)" `1929 
V L "ps" 26 789 "*SOCKET_INFO" `2023 
C L "TCPGetArray" 26 768 1 "FUNCTION"
C L "TCPGet" 26 813 1 "*"
C L "TCPGet" 26 813 1 "*"
C L "TCPGet" 26 813 1 "*"
C L "TCPGet" 26 813 1 "*"
C L "TCPGet" 26 813 1 "*"
C L "TCPGet" 26 813 1 "*"
C L "TCPGet" 26 813 1 "*"
C L "TCPGet" 26 813 1 "*"
C L "TCPGet" 26 813 1 "*"
C L "TCPGet" 26 813 1 "*"
V L "s" 26 831 "TCP_SOCKET" `1927 
V L "data" 26 831 "*int8" `2026 
F G "TCPGet" 26 832 "int8(TCP_SOCKET s,*int8 data)" `1926 
V L "ps" 26 833 "*SOCKET_INFO" `2024 
C L "TCPGet" 26 813 2 "FUNCTION"
C L "TCPIsGetReady" 26 864 1 "*"
C L "TCPIsGetReady" 26 864 1 "*"
C L "TCPIsGetReady" 26 864 1 "*"
C L "TCPIsGetReady" 26 864 1 "*"
C L "TCPIsGetReady" 26 864 1 "*"
C L "TCPIsGetReady" 26 864 1 "*"
C L "TCPIsGetReady" 26 864 1 "*"
C L "TCPIsGetReady" 26 864 1 "*"
V L "s" 26 880 "TCP_SOCKET" `2026 
F G "TCPIsGetReady" 26 881 "int8(TCP_SOCKET s)" `1924  "* A socket is said to be "Get" ready when it has already"
C L "TCPIsGetReady" 26 882 1 "*"
C L "TCPIsGetReady" 26 882 1 "*"
C L "TCPIsGetReady" 26 882 1 "*"
C L "TCPIsGetReady" 26 882 1 "*"
C L "DebugTCPDisplayState" 26 882 1 "FUNCTION"
V L "st" 26 894 "TCP_STATE" `2026 
F G "DebugTCPDisplayState" 26 895 "void(TCP_STATE st)" `2025 
C L "TCPTick" 26 913 1 "*"
C L "TCPTick" 26 913 1 "*"
C L "TCPTick" 26 913 1 "*"
C L "TCPTick" 26 913 1 "*"
C L "TCPTick" 26 913 1 "*"
C L "TCPTick" 26 913 1 "*"
C L "TCPTick" 26 913 1 "*"
C L "TCPTick" 26 913 1 "*"
F G "TCPTick" 26 930 "void()" `1939 
V L "s" 26 931 "TCP_SOCKET" `2027 
V L "diffTicks" 26 932 "TICKTYPE" `2028 
V L "tick" 26 933 "TICKTYPE" `2029 
V L "ps" 26 934 "*SOCKET_INFO" `2030 
V L "seq" 26 935 "DWORD" `2031 
V L "flags" 26 936 "int8" `2032  "BYTE debugLastState;"
C L "TCPTick" 26 913 1 "FUNCTION"
C L "TCPTick" 26 913 1 "FUNCTION"
C L "TCPTick" 26 913 2 "FUNCTION"
C L "TCPTick" 26 913 3 "FUNCTION"
C L "TCPTick" 26 913 1 "FUNCTION"
C L "TCPTick" 26 913 1 "FUNCTION"
C L "TCPTick" 26 913 2 "FUNCTION"
C L "TCPTick" 26 913 1 "FUNCTION"
C L "TCPTick" 26 913 1 "FUNCTION"
C L "TCPTick" 26 913 1 "FUNCTION"
C L "TCPTick" 26 913 2 "FUNCTION"
C L "TCPTick" 26 913 4 "FUNCTION"
C L "TCPTick" 26 913 3 "FUNCTION"
C L "TCPTick" 26 913 3 "FUNCTION"
C L "TCPTick" 26 913 1 "FUNCTION"
C L "TCPTick" 26 913 1 "FUNCTION"
C L "TCPTick" 26 913 1 "FUNCTION"
C L "TCPTick" 26 913 1 "FUNCTION"
C L "TCPTick" 26 913 2 "FUNCTION"
C L "TCPTick" 26 913 2 "FUNCTION"
C L "TCPTick" 26 913 1 "FUNCTION"
C L "TCPTick" 26 913 1 "FUNCTION"
C L "TCPTick" 26 913 1 "FUNCTION"
C L "TCPTick" 26 913 6 "FUNCTION"
C L "TCPProcess" 26 1127 1 "*"
C L "TCPProcess" 26 1127 1 "*"
C L "TCPProcess" 26 1127 1 "*"
C L "TCPProcess" 26 1127 1 "*"
C L "TCPProcess" 26 1127 1 "*"
C L "TCPProcess" 26 1127 1 "*"
C L "TCPProcess" 26 1127 1 "*"
C L "TCPProcess" 26 1127 1 "*"
C L "TCPProcess" 26 1127 1 "*"
C L "TCPProcess" 26 1127 1 "*"
C L "TCPProcess" 26 1127 1 "*"
C L "TCPProcess" 26 1127 1 "*"
V L "remote" 26 1147 "*NODE_INFO" `1936 
V L "localIP" 26 1147 "*IP_ADDR" `1937 
V L "len" 26 1147 "WORD" `2037 
F G "TCPProcess" 26 1148 "int8(*NODE_INFO remote,*IP_ADDR localIP,WORD len)" `1935 
V L "TCPHeader" 26 1149 "TCP_HEADER" `2034 
V L "pseudoHeader" 26 1150 "PSEUDO_HEADER" `2035 
V L "socket" 26 1151 "TCP_SOCKET" `2036 
V L "checksum1" 26 1152 "WORD_VAL" `2037 
V L "checksum2" 26 1153 "WORD_VAL" `2038 
V L "optionsSize" 26 1154 "int8" `2039  "Calculate IP pseudoheader checksum."
C L "TCPProcess" 26 1127 2 "FUNCTION"
C L "TCPProcess" 26 1127 1 "FUNCTION"
C L "TCPProcess" 26 1127 1 "FUNCTION"
C L "TCPProcess" 26 1127 1 "FUNCTION"
C L "TCPProcess" 26 1127 1 "FUNCTION"
C L "TCPProcess" 26 1127 1 "FUNCTION"
C L "TCPProcess" 26 1127 3 "FUNCTION"
C L "TCPProcess" 26 1127 12 "FUNCTION"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
C L "TransmitTCP" 26 1225 1 "*"
V L "remote" 26 1256 "*NODE_INFO" `1985 
V L "localPort" 26 1257 "TCP_PORT" `1986 
V L "remotePort" 26 1258 "TCP_PORT" `1987 
V L "tseq" 26 1259 "DWORD" `1988 
V L "tack" 26 1260 "DWORD" `1989 
V L "flags" 26 1261 "int8" `1990 
V L "buff" 26 1262 "BUFFER" `1991 
V L "len" 26 1263 "WORD" `2048 
F G "TransmitTCP" 26 1264 "void(*NODE_INFO remote,TCP_PORT localPort,TCP_PORT remotePort,DWORD tseq,DWORD tack,int8 flags,BUFFER buff,WORD len)" `1984 
V L "checkSum" 26 1265 "WORD_VAL" `2040 
V L "header" 26 1266 "TCP_HEADER" `2041 
V L "options" 26 1267 "TCP_OPTIONS" `2042 
V L "pseudoHeader" 26 1268 "PSEUDO_HEADER" `2043  "Make sure that this Tx buffer isn't currently being transmitted"
C L "TransmitTCP" 26 1225 4 "FUNCTION"
C L "TransmitTCP" 26 1225 2 "FUNCTION"
C L "TransmitTCP" 26 1225 1 "FUNCTION"
C L "TransmitTCP" 26 1225 1 "FUNCTION"
C L "TransmitTCP" 26 1225 1 "FUNCTION"
C L "TransmitTCP" 26 1225 1 "FUNCTION"
C L "TransmitTCP" 26 1225 1 "FUNCTION"
C L "TransmitTCP" 26 1225 1 "FUNCTION"
C L "TransmitTCP" 26 1225 1 "FUNCTION"
C L "TransmitTCP" 26 1225 5 "FUNCTION"
C L "FindMatching_TCP_Socket" 26 1393 1 "*"
C L "FindMatching_TCP_Socket" 26 1393 1 "*"
C L "FindMatching_TCP_Socket" 26 1393 1 "*"
C L "FindMatching_TCP_Socket" 26 1393 1 "*"
C L "FindMatching_TCP_Socket" 26 1393 1 "*"
C L "FindMatching_TCP_Socket" 26 1393 1 "*"
C L "FindMatching_TCP_Socket" 26 1393 1 "*"
C L "FindMatching_TCP_Socket" 26 1393 1 "*"
C L "FindMatching_TCP_Socket" 26 1393 1 "*"
C L "FindMatching_TCP_Socket" 26 1393 1 "*"
C L "FindMatching_TCP_Socket" 26 1393 1 "*"
C L "FindMatching_TCP_Socket" 26 1393 1 "*"
V L "h" 26 1413 "*TCP_HEADER" `1994 
V L "remote" 26 1413 "*NODE_INFO" `2046 
F G "FindMatching_TCP_Socket" 26 1414 "TCP_SOCKET(*TCP_HEADER h,*NODE_INFO remote)" `1993 
V L "ps" 26 1415 "*SOCKET_INFO" `2044 
V L "s" 26 1416 "TCP_SOCKET" `2045 
V L "partialMatch" 26 1417 "TCP_SOCKET" `2046 
C L "FindMatching_TCP_Socket" 26 1393 1 "FUNCTION"
C L "FindMatching_TCP_Socket" 26 1393 2 "FUNCTION"
C L "SwapTCPHeader" 26 1462 1 "*"
C L "SwapTCPHeader" 26 1462 1 "*"
C L "SwapTCPHeader" 26 1462 1 "*"
C L "SwapTCPHeader" 26 1462 1 "*"
C L "SwapTCPHeader" 26 1462 1 "*"
C L "SwapTCPHeader" 26 1462 1 "*"
C L "SwapTCPHeader" 26 1462 1 "*"
V L "header" 26 1477 "*TCP_HEADER" `2048 
F G "SwapTCPHeader" 26 1478 "void(*TCP_HEADER header)" `1996 
C L "CloseSocket" 26 1490 1 "*"
C L "CloseSocket" 26 1490 1 "*"
C L "CloseSocket" 26 1490 1 "*"
C L "CloseSocket" 26 1490 1 "*"
C L "CloseSocket" 26 1490 1 "*"
C L "CloseSocket" 26 1490 1 "*"
C L "CloseSocket" 26 1490 1 "*"
C L "CloseSocket" 26 1490 1 "*"
C L "CloseSocket" 26 1490 1 "*"
V L "ps" 26 1507 "*SOCKET_INFO" `2048 
F G "CloseSocket" 26 1508 "void(*SOCKET_INFO ps)" `1998 
C L "CloseSocket" 26 1490 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "*"
C L "HandleTCPSeg" 26 1546 1 "*"
C L "HandleTCPSeg" 26 1546 1 "*"
C L "HandleTCPSeg" 26 1546 1 "*"
C L "HandleTCPSeg" 26 1546 1 "*"
C L "HandleTCPSeg" 26 1546 1 "*"
C L "HandleTCPSeg" 26 1546 1 "*"
C L "HandleTCPSeg" 26 1546 1 "*"
C L "HandleTCPSeg" 26 1546 1 "*"
C L "HandleTCPSeg" 26 1546 1 "*"
C L "HandleTCPSeg" 26 1546 1 "*"
C L "HandleTCPSeg" 26 1546 1 "*"
C L "HandleTCPSeg" 26 1546 1 "*"
C L "HandleTCPSeg" 26 1546 1 "*"
C L "HandleTCPSeg" 26 1546 1 "*"
V L "s" 26 1569 "TCP_SOCKET" `1980 
V L "remote" 26 1570 "*NODE_INFO" `1981 
V L "h" 26 1571 "*TCP_HEADER" `1982 
V L "len" 26 1572 "WORD" `2051 
F G "HandleTCPSeg" 26 1573 "void(TCP_SOCKET s,*NODE_INFO remote,*TCP_HEADER h,WORD len)" `1979 
V L "ack" 26 1574 "DWORD" `2047 
V L "seq" 26 1575 "DWORD" `2048 
V L "prevAck" 26 1576 "DWORD" `2049 
V L "prevSeq" 26 1576 "DWORD" `2050 
V L "ps" 26 1577 "*SOCKET_INFO" `2051 
V L "flags" 26 1578 "int8" `2052  "BYTE debugLastState;"
V L "temp" 26 1580 "sint32" `2053 
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 5 "FUNCTION"
C L "HandleTCPSeg" 26 1546 2 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 2 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 2 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 3 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 3 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 3 "FUNCTION"
C L "HandleTCPSeg" 26 1546 2 "FUNCTION"
C L "HandleTCPSeg" 26 1546 2 "FUNCTION"
C L "HandleTCPSeg" 26 1546 2 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 3 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 4 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 2 "FUNCTION"
C L "HandleTCPSeg" 26 1546 2 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 6 "FUNCTION"
C L "HandleTCPSeg" 26 1546 2 "FUNCTION"
C L "HandleTCPSeg" 26 1546 2 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 1 "FUNCTION"
C L "HandleTCPSeg" 26 1546 7 "FUNCTION"
C L "HandleTCPSeg" 26 1546 6 "FUNCTION"
C L "HandleTCPSeg" 26 1546 6 "FUNCTION"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 2 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
D G "ICMP_H" 29 46 ""
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 2 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 25 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
D G "MAX_ICMP_DATA" 29 54 " (64)"
D G "MAX_ICMP_DATA_LEN" 29 56 " (MAX_ICMP_DATA)"
E G "ICMP_ECHO_REPLY" 29 62 "0" `2056 
E G "ICMP_ECHO_REQUEST" 29 63 "8" `2057 
T G "ICMP_CODE" 29 63 "_ICMP_CODE" `2058 
T G "ICMP_REQUESTS" 29 63 "_ICMP_CODE" `2059  "* Function:        BOOL ICMPIsTxReady()"
C G "" 29 66 1 "*"
C G "" 29 66 1 "*"
C G "" 29 66 1 "*"
C G "" 29 66 1 "*"
C G "" 29 66 1 "*"
D G "ICMPIsTxReady" 29 81 "()     MACIsTxReady(TRUE)"
C L "ICMPPut" 29 84 1 "*"
C L "ICMPPut" 29 84 1 "*"
C L "ICMPPut" 29 84 1 "*"
C L "ICMPPut" 29 84 1 "*"
C L "ICMPPut" 29 84 1 "*"
C L "ICMPPut" 29 84 1 "*"
C L "ICMPPut" 29 84 1 "*"
C L "ICMPPut" 29 84 1 "*"
C L "ICMPPut" 29 84 1 "*"
C L "ICMPPut" 29 84 1 "*"
C L "ICMPPut" 29 84 1 "*"
C L "ICMPPut" 29 84 1 "*"
C L "ICMPPut" 29 84 1 "*"
C L "ICMPPut" 29 84 1 "*"
C L "ICMPPut" 29 84 1 "*"
C L "ICMPPut" 29 84 1 "*"
V L "remote" 29 108 "*NODE_INFO" `2061 
V L "code" 29 109 "ICMP_CODE" `2062 
V L "data" 29 110 "*int8" `2063 
V L "len" 29 111 "int8" `2064 
V L "id" 29 112 "WORD" `2065 
V L "seq" 29 113 "WORD" `2066 
f G "ICMPPut" 29 113 "void(*NODE_INFO remote,ICMP_CODE code,*int8 data,int8 len,WORD id,WORD seq)" `2060  "* Function:        BOOL ICMPGet(ICMP_CODE *code,"
C L "ICMPPut" 29 116 1 "*"
C L "ICMPPut" 29 116 1 "*"
C L "ICMPPut" 29 116 1 "*"
C L "ICMPPut" 29 116 1 "*"
C L "ICMPPut" 29 116 1 "*"
C L "ICMPPut" 29 116 1 "*"
C L "ICMPPut" 29 116 1 "*"
C L "ICMPPut" 29 116 1 "*"
C L "ICMPPut" 29 116 1 "*"
C L "ICMPPut" 29 116 1 "*"
C L "ICMPPut" 29 116 1 "*"
C L "ICMPPut" 29 116 1 "*"
C L "ICMPPut" 29 116 1 "*"
C L "ICMPPut" 29 116 1 "*"
C L "ICMPPut" 29 116 1 "*"
V L "code" 29 140 "*ICMP_CODE" `2068 
V L "data" 29 141 "*int8" `2069 
V L "len" 29 142 "*int8" `2070 
V L "id" 29 143 "*WORD" `2071 
V L "seq" 29 144 "*WORD" `2072 
f G "ICMPGet" 29 144 "int8(*ICMP_CODE code,*int8 data,*int8 len,*WORD id,*WORD seq)" `2067  "*                  IP Defs for Microchip TCP/IP Stack"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
C L "ICMPGet" 25 1 1 "*"
D G "debug_icmp" 28 59 "(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z)"
C L "ICMPGet" 28 57 1 "FUNCTION"
C L "ICMPGet" 28 63 1 "*"
T G "ICMP_PACKET" 28 74 "{int8 Type,int8 Code,WORD Checksum,WORD Identifier,WORD SequenceNumber,int8[64] Data}" `2080 
D G "ICMP_HEADER_SIZE" 28 75 " (sizeof(ICMP_PACKET) - MAX_ICMP_DATA)"
V L "p" 28 77 "*ICMP_PACKET" `2082 
f G "SwapICMPPacket" 28 77 "void(*ICMP_PACKET p)" `2081  "* Function:        BOOL ICMPGet(ICMP_CODE *code,"
C L "SwapICMPPacket" 28 80 1 "*"
C L "SwapICMPPacket" 28 80 1 "*"
C L "SwapICMPPacket" 28 80 1 "*"
C L "SwapICMPPacket" 28 80 1 "*"
C L "SwapICMPPacket" 28 80 1 "*"
C L "SwapICMPPacket" 28 80 1 "*"
C L "SwapICMPPacket" 28 80 1 "*"
C L "SwapICMPPacket" 28 80 1 "*"
C L "SwapICMPPacket" 28 80 1 "*"
C L "SwapICMPPacket" 28 80 1 "*"
C L "SwapICMPPacket" 28 80 1 "*"
C L "SwapICMPPacket" 28 80 1 "*"
C L "SwapICMPPacket" 28 80 1 "*"
C L "SwapICMPPacket" 28 80 1 "*"
C L "SwapICMPPacket" 28 80 1 "*"
V L "code" 28 104 "*ICMP_CODE" `2068 
V L "data" 28 105 "*int8" `2069 
V L "len" 28 106 "*int8" `2070 
V L "id" 28 107 "*WORD" `2071 
V L "seq" 28 108 "*WORD" `2088 
F G "ICMPGet" 28 109 "int8(*ICMP_CODE code,*int8 data,*int8 len,*WORD id,*WORD seq)" `2067 
V L "packet" 28 110 "ICMP_PACKET" `2083 
V L "CalcChecksum" 28 111 "WORD" `2084 
V L "ReceivedChecksum" 28 112 "WORD" `2085 
C L "ICMPGet" 28 80 1 "FUNCTION"
C L "ICMPGet" 28 80 4 "FUNCTION"
C L "ICMPGet" 28 80 1 "FUNCTION"
C L "ICMPPut" 28 159 1 "*"
C L "ICMPPut" 28 159 1 "*"
C L "ICMPPut" 28 159 1 "*"
C L "ICMPPut" 28 159 1 "*"
C L "ICMPPut" 28 159 1 "*"
C L "ICMPPut" 28 159 1 "*"
C L "ICMPPut" 28 159 1 "*"
C L "ICMPPut" 28 159 1 "*"
C L "ICMPPut" 28 159 1 "*"
C L "ICMPPut" 28 159 1 "*"
C L "ICMPPut" 28 159 1 "*"
C L "ICMPPut" 28 159 1 "*"
C L "ICMPPut" 28 159 1 "*"
C L "ICMPPut" 28 159 1 "*"
C L "ICMPPut" 28 159 1 "*"
C L "ICMPPut" 28 159 1 "*"
V L "remote" 28 183 "*NODE_INFO" `2061 
V L "code" 28 184 "ICMP_CODE" `2062 
V L "data" 28 185 "*int8" `2063 
V L "len" 28 186 "int8" `2064 
V L "id" 28 187 "WORD" `2065 
V L "seq" 28 188 "WORD" `2092 
F G "ICMPPut" 28 189 "void(*NODE_INFO remote,ICMP_CODE code,*int8 data,int8 len,WORD id,WORD seq)" `2060 
V L "packet" 28 190 "ICMP_PACKET" `2086 
V L "ICMPLen" 28 191 "WORD" `2087 
V L "MyTxBuffer" 28 192 "BUFFER" `2088 
C L "ICMPPut" 28 159 2 "FUNCTION"
C L "ICMPPut" 28 159 1 "FUNCTION"
C L "SwapICMPPacket" 28 237 1 "*"
C L "SwapICMPPacket" 28 237 1 "*"
C L "SwapICMPPacket" 28 237 1 "*"
C L "SwapICMPPacket" 28 237 1 "*"
C L "SwapICMPPacket" 28 237 1 "*"
C L "SwapICMPPacket" 28 237 1 "*"
C L "SwapICMPPacket" 28 237 1 "*"
V L "p" 28 252 "*ICMP_PACKET" `2090 
F G "SwapICMPPacket" 28 253 "void(*ICMP_PACKET p)" `2081 
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
D G "ARP_H" 31 44 ""
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 2 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
D G "ARP_REPLY" 31 52 " (0x00)"
D G "ARP_REQUEST" 31 53 " (0x01)"
D G "ARP_UNKNOWN" 31 54 " (0x02)"
C L "ARPGet" 31 57 1 "*"
C L "ARPGet" 31 57 1 "*"
C L "ARPGet" 31 57 1 "*"
C L "ARPGet" 31 57 1 "*"
C L "ARPGet" 31 57 1 "*"
C L "ARPGet" 31 57 1 "*"
C L "ARPGet" 31 57 1 "*"
C L "ARPGet" 31 57 1 "*"
C L "ARPGet" 31 57 1 "*"
V L "remote" 31 74 "*NODE_INFO" `2090 
V L "opCode" 31 74 "*int8" `2091 
f G "ARPGet" 31 74 "int8(*NODE_INFO remote,*int8 opCode,WORD seq,*NODE_INFO remote,int8 opCode)" `2089  "* Macro:           ARPIsRxReady()"
C L "ARPGet" 31 77 1 "*"
C L "ARPGet" 31 77 1 "*"
C L "ARPGet" 31 77 1 "*"
C L "ARPGet" 31 77 1 "*"
C L "ARPGet" 31 77 1 "*"
C L "ARPGet" 31 77 1 "*"
D G "ARPIsTxReady" 31 93 "()      MACIsTxReady(TRUE)"
C L "ARPGet" 31 97 1 "*"
C L "ARPGet" 31 97 1 "*"
C L "ARPGet" 31 97 1 "*"
C L "ARPGet" 31 97 1 "*"
C L "ARPGet" 31 97 1 "*"
C L "ARPGet" 31 97 1 "*"
C L "ARPGet" 31 97 1 "*"
C L "ARPGet" 31 97 1 "*"
V L "remote" 31 113 "*NODE_INFO" `2093 
V L "opCode" 31 113 "int8" `2094 
f G "ARPPut" 31 113 "int8(*NODE_INFO remote,int8 opCode)" `2092  "*                  ARP Server Defs for Microchip TCP/IP Stack"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
C L "ARPPut" 32 1 1 "*"
D G "ARP_TSK_H" 32 45 ""
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 2 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 16 1 1 "*"
C L "ARPPut" 32 51 1 "*"
C L "ARPPut" 32 51 1 "*"
C L "ARPPut" 32 51 1 "*"
C L "ARPPut" 32 51 1 "*"
C L "ARPPut" 32 51 1 "*"
C L "ARPPut" 32 51 1 "*"
C L "ARPPut" 32 51 1 "*"
f G "ARPInit" 32 66 "void()" `2095  "* Function:        BOOL ARPProcess(void)"
C L "ARPInit" 32 69 1 "*"
C L "ARPInit" 32 69 1 "*"
C L "ARPInit" 32 69 1 "*"
C L "ARPInit" 32 69 1 "*"
C L "ARPInit" 32 69 1 "*"
C L "ARPInit" 32 69 1 "*"
f G "ARPProcess" 32 84 "int8()" `2096  "* Function:        void ARPResolve(IP_ADDR* IPAddr)"
C L "ARPProcess" 32 87 1 "*"
C L "ARPProcess" 32 87 1 "*"
C L "ARPProcess" 32 87 1 "*"
C L "ARPProcess" 32 87 1 "*"
C L "ARPProcess" 32 87 1 "*"
C L "ARPProcess" 32 87 1 "*"
V L "IPAddr" 32 102 "*IP_ADDR" `2098 
f G "ARPResolve" 32 102 "void(*IP_ADDR IPAddr)" `2097  "* Function:        BOOL ARPIsResolved(IP_ADDR* IPAddr,"
C L "ARPResolve" 32 105 1 "*"
C L "ARPResolve" 32 105 1 "*"
C L "ARPResolve" 32 105 1 "*"
C L "ARPResolve" 32 105 1 "*"
C L "ARPResolve" 32 105 1 "*"
C L "ARPResolve" 32 105 1 "*"
C L "ARPResolve" 32 105 1 "*"
C L "ARPResolve" 32 105 1 "*"
C L "ARPResolve" 32 105 1 "*"
V L "IPAddr" 32 123 "*IP_ADDR" `2100 
V L "MACAddr" 32 123 "*MAC_ADDR" `2101 
f G "ARPIsResolved" 32 123 "int8(*IP_ADDR IPAddr,*MAC_ADDR MACAddr)" `2099 
D G "debug_arptask" 30 56 ""
C L "ARPIsResolved" 30 57 1 "FUNCTION"
C L "ARPIsResolved" 30 59 1 "*"
E G "SM_ARP_IDLE" 30 65 "0" `2103 
E G "SM_ARP_REPLY" 30 66 "1" `2104 
T G "ARP_STATE" 30 66 "_ARP_STATE" `2105  "* This ARP task caches one ARP response."
V G "smARP" 30 72 "ARP_STATE" `2106 
V G "Cache" 30 74 "NODE_INFO" `2107  "* Function:        void ARPInit(void)"
C L "ARPIsResolved" 30 77 1 "*"
C L "ARPIsResolved" 30 77 1 "*"
C L "ARPIsResolved" 30 77 1 "*"
C L "ARPIsResolved" 30 77 1 "*"
C L "ARPIsResolved" 30 77 1 "*"
C L "ARPIsResolved" 30 77 1 "*"
F G "ARPInit" 30 93 "void()" `2095 
C L "ARPProcess" 30 108 1 "*"
C L "ARPProcess" 30 108 1 "*"
C L "ARPProcess" 30 108 1 "*"
C L "ARPProcess" 30 108 1 "*"
C L "ARPProcess" 30 108 1 "*"
C L "ARPProcess" 30 108 1 "*"
C L "ARPProcess" 30 108 1 "*"
F G "ARPProcess" 30 124 "int8()" `2096 
V L "remoteNode" 30 125 "NODE_INFO" `2108 
V L "opCode" 30 126 "int8" `2109 
C L "ARPProcess" 30 108 2 "FUNCTION"
C L "ARPResolve" 30 160 1 "*"
C L "ARPResolve" 30 160 1 "*"
C L "ARPResolve" 30 160 1 "*"
C L "ARPResolve" 30 160 1 "*"
C L "ARPResolve" 30 160 1 "*"
C L "ARPResolve" 30 160 1 "*"
V L "IPAddr" 30 173 "*IP_ADDR" `2111 
F G "ARPResolve" 30 174 "void(*IP_ADDR IPAddr)" `2097 
V L "remoteNode" 30 175 "NODE_INFO" `2110 
C L "ARPIsResolved" 30 184 1 "*"
C L "ARPIsResolved" 30 184 1 "*"
C L "ARPIsResolved" 30 184 1 "*"
C L "ARPIsResolved" 30 184 1 "*"
C L "ARPIsResolved" 30 184 1 "*"
C L "ARPIsResolved" 30 184 1 "*"
C L "ARPIsResolved" 30 184 1 "*"
C L "ARPIsResolved" 30 184 1 "*"
C L "ARPIsResolved" 30 184 1 "*"
C L "ARPIsResolved" 30 184 1 "*"
V L "IPAddr" 30 202 "*IP_ADDR" `2100 
V L "MACAddr" 30 202 "*MAC_ADDR" `2113 
F G "ARPIsResolved" 30 203 "int8(*IP_ADDR IPAddr,*MAC_ADDR MACAddr)" `2099 
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 2 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
D G "debug_arp" 33 55 "(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z)"
D G "ARP_OPERATION_REQ" 33 58 "0x01u"
D G "ARP_OPERATION_RESP" 33 59 "0x02u"
D G "HW_ETHERNET" 33 62 " (0x0001u)"
D G "ARP_IP" 33 63 " (0x0800u)"
T G "ARP_PACKET" 33 79 "{WORD HardwareType,WORD Protocol,int8 MACAddrLen,int8 ProtocolLen,WORD Operation,MAC_ADDR SenderMACAddr,IP_ADDR SenderIPAddr,MAC_ADDR TargetMACAddr,IP_ADDR TargetIPAddr}" `2121  "Helper function"
V L "p" 33 82 "*ARP_PACKET" `2123 
f G "SwapARPPacket" 33 82 "void(*ARP_PACKET p)" `2122  "* Function:        BOOL ARPGet(NODE_INFO* remote, BYTE* opCode)"
C L "SwapARPPacket" 33 85 1 "*"
C L "SwapARPPacket" 33 85 1 "*"
C L "SwapARPPacket" 33 85 1 "*"
C L "SwapARPPacket" 33 85 1 "*"
C L "SwapARPPacket" 33 85 1 "*"
C L "SwapARPPacket" 33 85 1 "*"
C L "SwapARPPacket" 33 85 1 "*"
C L "SwapARPPacket" 33 85 1 "*"
V L "remote" 33 102 "*NODE_INFO" `2090 
V L "opCode" 33 102 "*int8" `2126 
F G "ARPGet" 33 103 "int8(*NODE_INFO remote,*int8 opCode)" `2089 
V L "packet" 33 104 "ARP_PACKET" `2124  "MACGetArray((int8*)&packet, sizeof(packet));"
C L "ARPPut" 33 145 1 "*"
C L "ARPPut" 33 145 1 "*"
C L "ARPPut" 33 145 1 "*"
C L "ARPPut" 33 145 1 "*"
C L "ARPPut" 33 145 1 "*"
C L "ARPPut" 33 145 1 "*"
C L "ARPPut" 33 145 1 "*"
C L "ARPPut" 33 145 1 "*"
C L "ARPPut" 33 145 1 "*"
V L "remote" 33 162 "*NODE_INFO" `2093 
V L "opCode" 33 162 "int8" `2127 
F G "ARPPut" 33 163 "int8(*NODE_INFO remote,int8 opCode)" `2092 
V L "packet" 33 164 "ARP_PACKET" `2125 
V L "MyTxBuffer" 33 166 "BUFFER" `2126 
C L "ARPPut" 33 145 1 "FUNCTION"
C L "ARPPut" 33 145 2 "FUNCTION"
C L "ARPPut" 33 145 1 "FUNCTION"
C L "SwapARPPacket" 33 223 1 "*"
C L "SwapARPPacket" 33 223 1 "*"
C L "SwapARPPacket" 33 223 1 "*"
C L "SwapARPPacket" 33 223 1 "*"
C L "SwapARPPacket" 33 223 1 "*"
C L "SwapARPPacket" 33 223 1 "*"
C L "SwapARPPacket" 33 223 1 "*"
V L "p" 33 238 "*ARP_PACKET" `2128 
F G "SwapARPPacket" 33 239 "void(*ARP_PACKET p)" `2122 
C G "" 6 221 1 "*"
E G "SM_STACK_IDLE" 6 227 "0" `2128 
E G "SM_STACK_MAC" 6 228 "1" `2129 
E G "SM_STACK_IP" 6 229 "2" `2130 
E G "SM_STACK_ICMP" 6 230 "3" `2131 
E G "SM_STACK_ICMP_REPLY" 6 231 "4" `2132 
E G "SM_STACK_ARP" 6 232 "5" `2133 
E G "SM_STACK_TCP" 6 233 "6" `2134 
E G "SM_STACK_UDP" 6 234 "7" `2135 
T G "SM_STACK" 6 234 "_SM_STACK" `2136 
V G "smStack" 6 236 "SM_STACK" `2137 
V G "remoteNode" 6 238 "NODE_INFO" `2138  "* Function:        void StackInit(void)"
C L "StackInit" 6 241 1 "*"
C L "StackInit" 6 241 1 "*"
C L "StackInit" 6 241 1 "*"
C L "StackInit" 6 241 1 "*"
C L "StackInit" 6 241 1 "*"
C L "StackInit" 6 241 1 "*"
F G "StackInit" 6 257 "void()" `1096 
D G "DebugDisplayVals" 6 327 "()"
C L "StackTask" 6 329 1 "*"
C L "StackTask" 6 329 1 "*"
C L "StackTask" 6 329 1 "*"
C L "StackTask" 6 329 1 "*"
C L "StackTask" 6 329 1 "*"
C L "StackTask" 6 329 1 "*"
C L "StackTask" 6 329 1 "*"
C L "StackTask" 6 329 1 "*"
C L "StackTask" 6 329 1 "*"
C L "StackTask" 6 329 1 "*"
F G "StackTask" 6 349 "void()" `1097 
V L "dataCount" 6 350 "WORD" `2139 
V L "data" 6 353 "int8[64]" `2140 
V L "ICMPId" 6 354 "WORD" `2141 
V L "ICMPSeq" 6 355 "WORD" `2142 
V L "tempLocalIP" 6 357 "IP_ADDR" `2143 
V L "type" 6 367 "{int8 MACFrameType,int8 IPFrameType,ICMP_CODE ICMPCode}" `2148 
V L "lbContinue" 6 370 "BOOL" `2149 
C L "StackTask" 6 329 1 "FUNCTION"
C L "StackTask" 6 329 1 "FUNCTION"
V G "server" 0 38 "IP_ADDR" `2151  "Puerto TCP."
D G "EXAMPLE_TCP_PORT" 0 40 " (int16)7654"
C L "MACAddrInit" 0 37 2 "FUNCTION"
F G "MACAddrInit" 0 45 "void()" `2152 
F G "IPAddrInit" 0 54 "void()" `2153  "IP del dispositivo."
C L "IPAddrInit" 0 37 1 "FUNCTION"
C L "IPAddrInit" 0 37 1 "FUNCTION"
F G "ServerAddrInit" 0 74 "void()" `2154  "IP del servidor.."
C L "ServerAddrInit" 0 37 2 "FUNCTION"
C L "TCPConnectedTask" 0 37 3 "FUNCTION"
V L "socket" 0 86 "TCP_SOCKET" `2156 
F G "TCPConnectedTask" 0 86 "int8(TCP_SOCKET socket)" `2155 
V L "c" 0 87 "int8" `2157  "static int8 counter;"
C L "TCPConnectedTask" 0 37 1 "FUNCTION"
V L "button1_held" 0 90 "int8" `2158 
C L "TCPConnectedTask" 0 37 5 "FUNCTION"
C L "TCPConnectedTask" 0 37 1 "FUNCTION"
C L "TCPConnectedTask" 0 37 2 "FUNCTION"
C L "TCPConnectedTask" 0 37 1 "FUNCTION"
C L "TCPConnectedTask" 0 37 1 "FUNCTION"
C L "TCPConnectedTask" 0 37 4 "FUNCTION"
C L "TCPConnectedTask" 0 37 1 "FUNCTION"
C L "TCPConnectedTask" 0 37 4 "FUNCTION"
F G "MyTCPTask" 0 142 "void()" `2160 
V L "lastTick" 0 143 "TICKTYPE" `2161 
V L "socket" 0 144 "TCP_SOCKET" `2162 
V L "MYTCP_STATE_NEW" 0 146 "0" `2164 
V L "MYTCP_STATE_ARP_REQ" 0 146 "1" `2165 
V L "MYTCP_STATE_ARP_WAIT" 0 147 "2" `2166 
V L "MYTCP_STATE_CONNECT" 0 147 "3" `2167 
V L "MYTCP_STATE_CONNECT_WAIT" 0 148 "4" `2168 
V L "MYTCP_STATE_CONNECTED" 0 148 "5" `2169 
V L "MYTCP_STATE_DISCONNECT" 0 149 "6" `2170 
V L "MYTCP_STATE_FORCE_DISCONNECT" 0 150 "7" `2171 
V L "state" 0 150 "" `2172 
V L "remote" 0 151 "NODE_INFO" `2173 
V L "currTick" 0 152 "TICKTYPE" `2174 
V L "dis" 0 153 "int8" `2175 
C L "MyTCPTask" 0 37 1 "FUNCTION"
C L "MyTCPTask" 0 37 1 "FUNCTION"
C L "MyTCPTask" 0 37 1 "FUNCTION"
C L "MyTCPTask" 0 37 1 "FUNCTION"
C L "MyTCPTask" 0 37 1 "FUNCTION"
C L "MyTCPTask" 0 37 1 "FUNCTION"
C L "MyTCPTask" 0 37 2 "FUNCTION"
C L "MyTCPTask" 0 37 1 "FUNCTION"
C L "MyTCPTask" 0 37 1 "FUNCTION"
C L "TIMER1_isr" 0 37 1 "FUNCTION"
F G "TIMER1_isr" 0 262 "void()" `2184 
C L "TIMER1_isr" 0 37 1 "FUNCTION"
F G "EXT_isr" 0 272 "void()" `2185  "data1"
C L "EXT_isr" 0 37 1 "FUNCTION"
F G "EXT1_isr" 0 285 "void()" `2186  "data0"
C L "EXT1_isr" 0 37 1 "FUNCTION"
C L "wiegand_read_card" 0 37 1 "FUNCTION"
f G "wiegand_read_card" 0 298 "void()" `2187 
f G "enviar_tcp" 0 299 "void()" `2188  "boleto////////////////////"
f G "reset" 0 301 "void()" `2189 
f G "encri" 0 302 "void()" `2190 
f G "barra1" 0 303 "void()" `2191 
f G "barra2" 0 304 "void()" `2192 
f G "CR" 0 305 "void()" `2193 
f G "LF" 0 306 "void()" `2194 
f G "ticket" 0 307 "void()" `2195 
f G "sensores" 0 308 "void()" `2196 
f G "llaves" 0 309 "void()" `2197 
f G "rd_eeprom" 0 310 "void()" `2198 
f G "zeller" 0 311 "void()" `2199 
f G "horario" 0 312 "void()" `2200 
f G "fecha" 0 313 "void()" `2201 
F G "main" 0 315 "void()" `2202  "fprintf(DEBUG,"\r\n\nCLIENTE TCP/IP\r\n");"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
V L "vigencia" 0 346 "int8" `2206 
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 2 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 4 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 3 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 2 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 2 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "main" 0 37 2 "FUNCTION"
C L "main" 0 37 1 "FUNCTION"
C L "convertir_to_entero" 0 37 1 "FUNCTION"
V L "cadena" 0 522 "*int8" `2241 
F G "convertir_to_entero" 0 522 "int8(*int8 cadena)" `2240 
V L "valor" 0 523 "int8" `2242 
F G "fecha" 0 537 "void()" `2201  "falta revisar si se deshabilitan las int globales"
C L "fecha" 0 37 5 "FUNCTION"
C L "fecha" 0 37 7 "FUNCTION"
C L "fecha" 0 37 1 "FUNCTION"
F G "wiegand_read_card" 0 572 "void()" `2187 
C L "wiegand_read_card" 0 37 1 "FUNCTION"
C L "wiegand_read_card" 0 37 1 "FUNCTION"
C L "wiegand_read_card" 0 37 4 "FUNCTION"
C L "wiegand_read_card" 0 37 1 "FUNCTION"
C L "wiegand_read_card" 0 37 1 "FUNCTION"
C L "wiegand_read_card" 0 37 4 "FUNCTION"
C L "wiegand_read_card" 0 37 1 "FUNCTION"
F G "enviar_tcp" 0 608 "void()" `2188 
F G "zeller" 0 614 "void()" `2199 
V L "dia_s1" 0 615 "int16" `2254 
V L "dia_s2" 0 615 "int16" `2255 
V L "dia_s3" 0 615 "int16" `2256 
V L "diac" 0 615 "int16" `2257 
V L "mesc" 0 615 "int16" `2258 
V L "dia_fecha" 0 615 "int16" `2259  "(day,month,yr,dow,hrs,min,sec"
V L "siglo" 0 616 "int8" `2260 
V L "asiglo" 0 616 "int8" `2261 
V L "resultado" 0 616 "int8" `2262 
V L "di2" 0 616 "int8" `2263 
C L "zeller" 0 37 1 "FUNCTION"
C L "zeller" 0 37 1 "FUNCTION"
C L "zeller" 0 37 1 "FUNCTION"
C L "zeller" 0 37 2 "FUNCTION"
C L "zeller" 0 37 1 "FUNCTION"
C L "zeller" 0 37 1 "FUNCTION"
C L "zeller" 0 37 1 "FUNCTION"
C L "zeller" 0 37 1 "FUNCTION"
C L "zeller" 0 37 1 "FUNCTION"
C L "zeller" 0 37 1 "FUNCTION"
F G "sensores" 0 653 "void()" `2196 
C L "sensores" 0 37 1 "FUNCTION"
C L "sensores" 0 37 1 "FUNCTION"
C L "sensores" 0 37 3 "FUNCTION"
C L "sensores" 0 37 4 "FUNCTION"
C L "sensores" 0 37 1 "FUNCTION"
C L "sensores" 0 37 2 "FUNCTION"
C L "sensores" 0 37 1 "FUNCTION"
C L "sensores" 0 37 1 "FUNCTION"
C L "sensores" 0 37 1 "FUNCTION"
C L "sensores" 0 37 5 "FUNCTION"
C L "sensores" 0 37 1 "FUNCTION"
C L "sensores" 0 37 12 "FUNCTION"
C L "ticket" 0 37 1 "FUNCTION"
F G "ticket" 0 715 "void()" `2195  "U1PRINTER //HHMMSSFFFFFFFFZ"
C L "ticket" 0 37 4 "FUNCTION"
V L "fol_bol" 0 720 "int8[20]" `2267  "leer"
C L "ticket" 0 37 13 "FUNCTION"
C L "ticket" 0 37 2 "FUNCTION"
C L "ticket" 0 37 1 "FUNCTION"
C L "ticket" 0 37 3 "FUNCTION"
C L "ticket" 0 37 1 "FUNCTION"
C L "ticket" 0 37 1 "FUNCTION"
C L "ticket" 0 37 1 "FUNCTION"
C L "ticket" 0 37 2 "FUNCTION"
C L "ticket" 0 37 5 "FUNCTION"
C L "ticket" 0 37 2 "FUNCTION"
C L "ticket" 0 776 2 "*"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 3 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 4 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 2 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 1 "FUNCTION"
C L "ticket" 0 776 2 "FUNCTION"
F G "LF" 0 907 "void()" `2194 
F G "CR" 0 911 "void()" `2193 
C L "CR" 0 776 1 "FUNCTION"
F G "barra1" 0 915 "void()" `2191  "sprintf(con_barra,"%08Ld%02d%02d%02d%02d%02d%02d",folio,yr,month,day,hrs,min,sec);//"
C L "barra1" 0 776 4 "FUNCTION"
V L "size_bar" 0 922 "int8" `2372 
C L "barra1" 0 776 4 "FUNCTION"
C L "barra1" 0 776 2 "FUNCTION"
C L "barra1" 0 776 1 "FUNCTION"
C L "barra1" 0 776 2 "FUNCTION"
C L "barra1" 0 776 1 "FUNCTION"
C L "barra1" 0 776 1 "FUNCTION"
C L "barra1" 0 776 2 "FUNCTION"
C L "barra1" 0 776 1 "FUNCTION"
C L "barra1" 0 776 1 "FUNCTION"
C L "barra1" 0 776 1 "FUNCTION"
C L "barra1" 0 776 2 "FUNCTION"
F G "barra2" 0 954 "void()" `2192 
V L "size_bar" 0 955 "int8" `2377 
C L "barra2" 0 776 3 "FUNCTION"
C L "barra2" 0 776 1 "FUNCTION"
C L "barra2" 0 776 2 "FUNCTION"
C L "barra2" 0 776 2 "FUNCTION"
C L "barra2" 0 776 1 "FUNCTION"
C L "barra2" 0 776 2 "FUNCTION"
C L "barra2" 0 776 1 "FUNCTION"
C L "barra2" 0 776 2 "FUNCTION"
F G "encri" 0 981 "void()" `2190 
V L "tem" 0 982 "int8" `2382  "fprintf(U1PRINTER,"con_barra:%Lu\r\n",strlen(con_barra));"
C L "encri" 0 776 1 "FUNCTION"
F G "llaves" 0 1000 "void()" `2197 
V L "tem" 0 1001 "int8" `2383 
V L "texto" 0 1002 "int8[12]" `2384  "llaves////////////"
C L "llaves" 0 776 1 "FUNCTION"
C L "llaves" 0 776 1 "FUNCTION"
C L "llaves" 0 776 1 "FUNCTION"
C L "llaves" 0 776 1 "FUNCTION"
C L "llaves" 0 776 1 "FUNCTION"
C L "llaves" 0 776 1 "FUNCTION"
C L "llaves" 0 776 1 "FUNCTION"
F G "rd_eeprom" 0 1069 "void()" `2198 
C L "rd_eeprom" 0 776 1 "FUNCTION"
C L "rd_eeprom" 0 776 1 "FUNCTION"
C L "rd_eeprom" 0 776 2 "FUNCTION"
C L "rd_eeprom" 0 776 2 "FUNCTION"
C L "rd_eeprom" 0 776 1 "FUNCTION"
C L "rd_eeprom" 0 776 2 "FUNCTION"
F G "reset" 0 1094 "void()" `2189 
C L "reset" 0 776 2 "FUNCTION"
C L "reset" 0 776 1 "FUNCTION"
C L "reset" 0 776 1 "FUNCTION"
C L "reset" 0 776 1 "FUNCTION"
C L "reset" 0 776 1 "FUNCTION"
C L "reset" 0 776 8 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
